syntax = "proto3";

package proto;
import "ddi_response.proto";

service DHCPManager {
    rpc CreateSubnet4(CreateSubnet4Request) returns (DDIResponse) {}
    rpc DeleteSubnet4(DeleteSubnet4Request) returns (DDIResponse) {}
    rpc UpdateSubnet4(UpdateSubnet4Request) returns (DDIResponse) {}

    rpc CreateSubnet6(CreateSubnet6Request) returns (DDIResponse) {}
    rpc DeleteSubnet6(DeleteSubnet6Request) returns (DDIResponse) {}
    rpc UpdateSubnet6(UpdateSubnet6Request) returns (DDIResponse) {}

    rpc CreatePool4(CreatePool4Request) returns (DDIResponse) {}
    rpc DeletePool4(DeletePool4Request) returns (DDIResponse) {}
    rpc UpdatePool4(UpdatePool4Request) returns (DDIResponse) {}

    rpc CreatePool6(CreatePool6Request) returns (DDIResponse) {}
    rpc DeletePool6(DeletePool6Request) returns (DDIResponse) {}
    rpc UpdatePool6(UpdatePool6Request) returns (DDIResponse) {}

    rpc CreatePDPool(CreatePDPoolRequest) returns (DDIResponse) {}
    rpc DeletePDPool(DeletePDPoolRequest) returns (DDIResponse) {}
    rpc UpdatePDPool(UpdatePDPoolRequest) returns (DDIResponse) {}

    rpc CreateReservation4(CreateReservation4Request) returns (DDIResponse) {}
    rpc DeleteReservation4(DeleteReservation4Request) returns (DDIResponse) {}
    rpc UpdateReservation4(UpdateReservation4Request) returns (DDIResponse) {}

    rpc CreateReservation6(CreateReservation6Request) returns (DDIResponse) {}
    rpc DeleteReservation6(DeleteReservation6Request) returns (DDIResponse) {}
    rpc UpdateReservation6(UpdateReservation6Request) returns (DDIResponse) {}

    rpc CreateClientClass4(CreateClientClass4Request) returns (DDIResponse) {}
    rpc DeleteClientClass4(DeleteClientClass4Request) returns (DDIResponse) {}
    rpc UpdateClientClass4(UpdateClientClass4Request) returns (DDIResponse) {}
    
    rpc UpdateGlobalConfig(UpdateGlobalConfigRequest) returns (DDIResponse) {}


    rpc GetSubnet4LeasesCount(GetSubnet4LeasesCountRequest) returns (GetLeasesCountResponse){}
    rpc GetPool4LeasesCount(GetPool4LeasesCountRequest) returns (GetLeasesCountResponse){}
    rpc GetReservation4LeasesCount(GetReservation4LeasesCountRequest) returns (GetLeasesCountResponse){}


    rpc GetSubnet6LeasesCount(GetSubnet6LeasesCountRequest) returns (GetLeasesCountResponse){}
    rpc GetPool6LeasesCount(GetPool6LeasesCountRequest) returns (GetLeasesCountResponse){}
    rpc GetReservation6LeasesCount(GetReservation6LeasesCountRequest) returns (GetLeasesCountResponse){}

    rpc GetSubnet4Leases(GetSubnet4LeasesRequest) returns (GetLeasesResponse){}

    rpc GetSubnet6Leases(GetSubnet6LeasesRequest) returns (GetLeasesResponse){}
}

message CreateSubnet4Request {
    DDIRequestHead header = 1;
    uint32 id = 2;
    string ipnet = 3;
    uint32 valid_lifetime = 4;
    uint32 max_valid_lifetime = 5;
    uint32 min_valid_lifetime = 6;
    repeated string domain_servers = 7;
    repeated string routers = 8;
    string client_class = 9;
    repeated string relay_agent_addresses = 10;
}

message DeleteSubnet4Request {
    DDIRequestHead header = 1;
    uint32 id = 2;
}

message UpdateSubnet4Request {
    DDIRequestHead header = 1;
    uint32 id = 2;
    uint32 valid_lifetime = 3;
    uint32 max_valid_lifetime = 4;
    uint32 min_valid_lifetime = 5;
    repeated string domain_servers = 6;
    repeated string routers = 7;
    string client_class = 8;
    repeated string relay_agent_addresses = 9;
}

message CreateSubnet6Request {
    DDIRequestHead header = 1;
    uint32 id = 2;
    string ipnet = 3;
    uint32 valid_lifetime = 4;
    uint32 max_valid_lifetime = 5;
    uint32 min_valid_lifetime = 6;
    repeated string dns_servers = 7;
    string client_class = 8;
    repeated string relay_agent_addresses = 9;
}

message DeleteSubnet6Request {
    DDIRequestHead header = 1;
    uint32 id = 2;
}

message UpdateSubnet6Request {
    DDIRequestHead header = 1;
    uint32 id = 2;
    uint32 valid_lifetime = 3;
    uint32 max_valid_lifetime = 4;
    uint32 min_valid_lifetime = 5;
    repeated string dns_servers= 6;
    string client_class = 7;
    repeated string relay_agent_addresses = 8;
}

message CreatePool4Request {
    DDIRequestHead header = 1;
    uint32 subnet_id = 2;
    string begin_address = 3;
    string end_address = 4;
    repeated string domain_servers = 5;
    repeated string routers = 6;
    string client_class = 7;
}

message DeletePool4Request {
    DDIRequestHead header = 1;
    uint32 subnet_id = 2;
    string begin_address = 3;
    string end_address = 4;
}

message UpdatePool4Request {
    DDIRequestHead header = 1;
    uint32 subnet_id = 2;
    string begin_address = 3;
    string end_address = 4;
    repeated string domain_servers = 5;
    repeated string routers = 6;
    string client_class = 7;
}

message CreatePool6Request {
    DDIRequestHead header = 1;
    uint32 subnet_id = 2;
    string begin_address = 3;
    string end_address = 4;
    repeated string dns_servers = 5;
    string client_class = 6;
}

message DeletePool6Request {
    DDIRequestHead header = 1;
    uint32 subnet_id = 2;
    string begin_address = 3;
    string end_address = 4;
}

message UpdatePool6Request {
    DDIRequestHead header = 1;
    uint32 subnet_id = 2;
    string begin_address = 3;
    string end_address = 4;
    repeated string dns_servers = 5;
    string client_class = 6;
}

message CreateReservation4Request {
    DDIRequestHead header = 1;
    uint32 subnet_id = 2;
    string hw_address = 3;
    string ip_address = 4;
    repeated string domain_servers = 5;
    repeated string routers = 6;
}

message DeleteReservation4Request {
    DDIRequestHead header = 1;
    uint32 subnet_id = 2;
    string hw_address = 3;
}

message UpdateReservation4Request {
    DDIRequestHead header = 1;
    uint32 subnet_id = 2;
    string hw_address = 3;
    repeated string domain_servers = 4;
    repeated string routers = 5;
}

message CreateReservation6Request {
    DDIRequestHead header = 1;
    uint32 subnet_id = 2;
    string hw_address = 3;
    repeated string ip_addresses = 4;
    repeated string dns_servers = 5;
}

message DeleteReservation6Request {
    DDIRequestHead header = 1;
    uint32 subnet_id = 2;
    string hw_address = 3;
}

message UpdateReservation6Request {
    DDIRequestHead header = 1;
    uint32 subnet_id = 2;
    string hw_address = 3;
    repeated string dns_servers = 4;
}

message CreatePDPoolRequest {
    DDIRequestHead header = 1;
    uint32 subnet_id = 2;
    string prefix = 3;
    uint32 prefix_len = 4;
    uint32 delegated_len = 5;
    repeated string dns_servers = 6;
    string client_class = 7;
}

message DeletePDPoolRequest {
    DDIRequestHead header = 1;
    uint32 subnet_id = 2;
    string prefix = 3;
}

message UpdatePDPoolRequest {
    DDIRequestHead header = 1;
    uint32 subnet_id = 2;
    string prefix = 3;
    repeated string dns_servers = 4;
    string client_class = 5;
}

message CreateClientClass4Request {
    DDIRequestHead header = 1;
    string name = 2;
    string regexp = 3;
}

message DeleteClientClass4Request {
    DDIRequestHead header = 1;
    string name = 2;
}

message UpdateClientClass4Request {
    DDIRequestHead header = 1;
    string name = 2;
    string regexp = 3;
}

message UpdateGlobalConfigRequest {
    DDIRequestHead header = 1;
    uint32 valid_lifetime = 2;
    uint32 max_valid_lifetime = 3;
    uint32 min_valid_lifetime = 4;
    repeated string domain_servers = 5;
}

message GetSubnet4LeasesCountRequest{
    DDIRequestHead header = 1;
    uint32 id = 2;
}

message GetPool4LeasesCountRequest{
    DDIRequestHead header = 1;
    uint32 subnet_id = 2;
    string begin_address = 3;
    string end_address = 4;
}

message GetReservation4LeasesCountRequest {
    DDIRequestHead header = 1;
    uint32 subnet_id = 2;
    string hw_address = 3;
}

message GetLeasesCountResponse {
    bool succeed = 1;
    uint64 leases_count = 2;
}

message GetSubnet6LeasesCountRequest{
    DDIRequestHead header = 1;
    uint32 id = 2;
}

message GetPool6LeasesCountRequest{
    DDIRequestHead header = 1;
    uint32 subnet_id = 2;
    string begin_address = 3;
    string end_address = 4;
}

message GetReservation6LeasesCountRequest {
    DDIRequestHead header = 1;
    uint32 subnet_id = 2;
    string hw_address = 3;
}

message GetSubnet4LeasesRequest{
    DDIRequestHead header = 1;
    uint32 id = 2;
}

message GetSubnet6LeasesRequest{
    DDIRequestHead header = 1;
    uint32 id = 2;
}

message DHCPLease {
    string address = 1;
    uint32 subnet_id = 2;
    string hw_address = 3;
    uint32 hw_type = 4;
    uint32 hw_address_source = 5;
    string duid = 6;
    uint32 valid_lifetime = 7;
    int64 expire = 8;
    uint32 prefix_len = 9;
    enum LeaseType {
        TYPE_NA = 0;
        TYPE_TA = 1;
        TYPE_PD = 2;
        TYPE_V4 = 3;
    }
    LeaseType lease_type = 10;
    uint32 state = 11;
    string hostname = 12;
    string client_id = 13;
}

message GetLeasesResponse {
    bool succeed = 1;
    repeated DHCPLease leases = 2;
}