// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.6.1
// source: dns.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type DNSStartReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config string `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *DNSStartReq) Reset() {
	*x = DNSStartReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dns_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DNSStartReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNSStartReq) ProtoMessage() {}

func (x *DNSStartReq) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNSStartReq.ProtoReflect.Descriptor instead.
func (*DNSStartReq) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{0}
}

func (x *DNSStartReq) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

type DNSStopReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DNSStopReq) Reset() {
	*x = DNSStopReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dns_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DNSStopReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNSStopReq) ProtoMessage() {}

func (x *DNSStopReq) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNSStopReq.ProtoReflect.Descriptor instead.
func (*DNSStopReq) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{1}
}

type UpdateGlobalConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogEnable    bool   `protobuf:"varint,1,opt,name=log_enable,json=logEnable,proto3" json:"log_enable,omitempty"`
	DnssecEnable bool   `protobuf:"varint,2,opt,name=dnssec_enable,json=dnssecEnable,proto3" json:"dnssec_enable,omitempty"`
	TtlChanged   bool   `protobuf:"varint,3,opt,name=ttl_changed,json=ttlChanged,proto3" json:"ttl_changed,omitempty"`
	Ttl          uint32 `protobuf:"varint,4,opt,name=ttl,proto3" json:"ttl,omitempty"`
}

func (x *UpdateGlobalConfigReq) Reset() {
	*x = UpdateGlobalConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dns_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGlobalConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGlobalConfigReq) ProtoMessage() {}

func (x *UpdateGlobalConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGlobalConfigReq.ProtoReflect.Descriptor instead.
func (*UpdateGlobalConfigReq) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateGlobalConfigReq) GetLogEnable() bool {
	if x != nil {
		return x.LogEnable
	}
	return false
}

func (x *UpdateGlobalConfigReq) GetDnssecEnable() bool {
	if x != nil {
		return x.DnssecEnable
	}
	return false
}

func (x *UpdateGlobalConfigReq) GetTtlChanged() bool {
	if x != nil {
		return x.TtlChanged
	}
	return false
}

func (x *UpdateGlobalConfigReq) GetTtl() uint32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

type CreateACLReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Ips  []string `protobuf:"bytes,3,rep,name=ips,proto3" json:"ips,omitempty"`
}

func (x *CreateACLReq) Reset() {
	*x = CreateACLReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dns_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateACLReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateACLReq) ProtoMessage() {}

func (x *CreateACLReq) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateACLReq.ProtoReflect.Descriptor instead.
func (*CreateACLReq) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{3}
}

func (x *CreateACLReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateACLReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateACLReq) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

type UpdateACLReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Ips  []string `protobuf:"bytes,3,rep,name=ips,proto3" json:"ips,omitempty"`
}

func (x *UpdateACLReq) Reset() {
	*x = UpdateACLReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dns_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateACLReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateACLReq) ProtoMessage() {}

func (x *UpdateACLReq) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateACLReq.ProtoReflect.Descriptor instead.
func (*UpdateACLReq) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateACLReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateACLReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateACLReq) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

type DeleteACLReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteACLReq) Reset() {
	*x = DeleteACLReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dns_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteACLReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteACLReq) ProtoMessage() {}

func (x *DeleteACLReq) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteACLReq.ProtoReflect.Descriptor instead.
func (*DeleteACLReq) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteACLReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CreateZoneReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ViewId       string `protobuf:"bytes,1,opt,name=view_id,json=viewId,proto3" json:"view_id,omitempty"`
	ZoneId       string `protobuf:"bytes,2,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`
	ZoneName     string `protobuf:"bytes,3,opt,name=zone_name,json=zoneName,proto3" json:"zone_name,omitempty"`
	ZoneFileName string `protobuf:"bytes,4,opt,name=zone_file_name,json=zoneFileName,proto3" json:"zone_file_name,omitempty"`
	Ttl          uint32 `protobuf:"varint,5,opt,name=ttl,proto3" json:"ttl,omitempty"`
	RrsRole      string `protobuf:"bytes,6,opt,name=rrs_role,json=rrsRole,proto3" json:"rrs_role,omitempty"`
}

func (x *CreateZoneReq) Reset() {
	*x = CreateZoneReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dns_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateZoneReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateZoneReq) ProtoMessage() {}

func (x *CreateZoneReq) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateZoneReq.ProtoReflect.Descriptor instead.
func (*CreateZoneReq) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{6}
}

func (x *CreateZoneReq) GetViewId() string {
	if x != nil {
		return x.ViewId
	}
	return ""
}

func (x *CreateZoneReq) GetZoneId() string {
	if x != nil {
		return x.ZoneId
	}
	return ""
}

func (x *CreateZoneReq) GetZoneName() string {
	if x != nil {
		return x.ZoneName
	}
	return ""
}

func (x *CreateZoneReq) GetZoneFileName() string {
	if x != nil {
		return x.ZoneFileName
	}
	return ""
}

func (x *CreateZoneReq) GetTtl() uint32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *CreateZoneReq) GetRrsRole() string {
	if x != nil {
		return x.RrsRole
	}
	return ""
}

type UpdateZoneReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Ttl          uint32 `protobuf:"varint,2,opt,name=ttl,proto3" json:"ttl,omitempty"`
	Name         string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	ZoneFileName string `protobuf:"bytes,4,opt,name=zone_file_name,json=zoneFileName,proto3" json:"zone_file_name,omitempty"`
	View         string `protobuf:"bytes,5,opt,name=view,proto3" json:"view,omitempty"`
}

func (x *UpdateZoneReq) Reset() {
	*x = UpdateZoneReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dns_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateZoneReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateZoneReq) ProtoMessage() {}

func (x *UpdateZoneReq) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateZoneReq.ProtoReflect.Descriptor instead.
func (*UpdateZoneReq) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateZoneReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateZoneReq) GetTtl() uint32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *UpdateZoneReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateZoneReq) GetZoneFileName() string {
	if x != nil {
		return x.ZoneFileName
	}
	return ""
}

func (x *UpdateZoneReq) GetView() string {
	if x != nil {
		return x.View
	}
	return ""
}

type DeleteZoneReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	View string `protobuf:"bytes,3,opt,name=view,proto3" json:"view,omitempty"`
}

func (x *DeleteZoneReq) Reset() {
	*x = DeleteZoneReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dns_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteZoneReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteZoneReq) ProtoMessage() {}

func (x *DeleteZoneReq) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteZoneReq.ProtoReflect.Descriptor instead.
func (*DeleteZoneReq) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteZoneReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteZoneReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteZoneReq) GetView() string {
	if x != nil {
		return x.View
	}
	return ""
}

type UpdateRRsByZoneReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ZoneId     string `protobuf:"bytes,1,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`
	NewRrsRole string `protobuf:"bytes,2,opt,name=new_rrs_role,json=newRrsRole,proto3" json:"new_rrs_role,omitempty"`
	ViewName   string `protobuf:"bytes,3,opt,name=view_name,json=viewName,proto3" json:"view_name,omitempty"`
	ViewKey    string `protobuf:"bytes,4,opt,name=view_key,json=viewKey,proto3" json:"view_key,omitempty"`
	ZoneName   string `protobuf:"bytes,5,opt,name=zone_name,json=zoneName,proto3" json:"zone_name,omitempty"`
	OldRrsRole string `protobuf:"bytes,6,opt,name=old_rrs_role,json=oldRrsRole,proto3" json:"old_rrs_role,omitempty"`
}

func (x *UpdateRRsByZoneReq) Reset() {
	*x = UpdateRRsByZoneReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dns_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRRsByZoneReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRRsByZoneReq) ProtoMessage() {}

func (x *UpdateRRsByZoneReq) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRRsByZoneReq.ProtoReflect.Descriptor instead.
func (*UpdateRRsByZoneReq) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateRRsByZoneReq) GetZoneId() string {
	if x != nil {
		return x.ZoneId
	}
	return ""
}

func (x *UpdateRRsByZoneReq) GetNewRrsRole() string {
	if x != nil {
		return x.NewRrsRole
	}
	return ""
}

func (x *UpdateRRsByZoneReq) GetViewName() string {
	if x != nil {
		return x.ViewName
	}
	return ""
}

func (x *UpdateRRsByZoneReq) GetViewKey() string {
	if x != nil {
		return x.ViewKey
	}
	return ""
}

func (x *UpdateRRsByZoneReq) GetZoneName() string {
	if x != nil {
		return x.ZoneName
	}
	return ""
}

func (x *UpdateRRsByZoneReq) GetOldRrsRole() string {
	if x != nil {
		return x.OldRrsRole
	}
	return ""
}

type CreateRRReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ZoneId      string `protobuf:"bytes,3,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`
	ViewId      string `protobuf:"bytes,4,opt,name=view_id,json=viewId,proto3" json:"view_id,omitempty"`
	DataType    string `protobuf:"bytes,5,opt,name=data_type,json=dataType,proto3" json:"data_type,omitempty"`
	RData       string `protobuf:"bytes,6,opt,name=r_data,json=rData,proto3" json:"r_data,omitempty"`
	BackupRData string `protobuf:"bytes,7,opt,name=backup_r_data,json=backupRData,proto3" json:"backup_r_data,omitempty"`
	Ttl         uint32 `protobuf:"varint,8,opt,name=ttl,proto3" json:"ttl,omitempty"`
	ViewKey     string `protobuf:"bytes,9,opt,name=view_key,json=viewKey,proto3" json:"view_key,omitempty"`
	ZoneName    string `protobuf:"bytes,10,opt,name=zone_name,json=zoneName,proto3" json:"zone_name,omitempty"`
	ZoneRrsRole string `protobuf:"bytes,11,opt,name=zone_rrs_role,json=zoneRrsRole,proto3" json:"zone_rrs_role,omitempty"`
}

func (x *CreateRRReq) Reset() {
	*x = CreateRRReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dns_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRRReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRRReq) ProtoMessage() {}

func (x *CreateRRReq) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRRReq.ProtoReflect.Descriptor instead.
func (*CreateRRReq) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{10}
}

func (x *CreateRRReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateRRReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateRRReq) GetZoneId() string {
	if x != nil {
		return x.ZoneId
	}
	return ""
}

func (x *CreateRRReq) GetViewId() string {
	if x != nil {
		return x.ViewId
	}
	return ""
}

func (x *CreateRRReq) GetDataType() string {
	if x != nil {
		return x.DataType
	}
	return ""
}

func (x *CreateRRReq) GetRData() string {
	if x != nil {
		return x.RData
	}
	return ""
}

func (x *CreateRRReq) GetBackupRData() string {
	if x != nil {
		return x.BackupRData
	}
	return ""
}

func (x *CreateRRReq) GetTtl() uint32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *CreateRRReq) GetViewKey() string {
	if x != nil {
		return x.ViewKey
	}
	return ""
}

func (x *CreateRRReq) GetZoneName() string {
	if x != nil {
		return x.ZoneName
	}
	return ""
}

func (x *CreateRRReq) GetZoneRrsRole() string {
	if x != nil {
		return x.ZoneRrsRole
	}
	return ""
}

type UpdateRRReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DataType    string `protobuf:"bytes,2,opt,name=data_type,json=dataType,proto3" json:"data_type,omitempty"`
	RData       string `protobuf:"bytes,3,opt,name=r_data,json=rData,proto3" json:"r_data,omitempty"`
	BackupRData string `protobuf:"bytes,4,opt,name=backup_r_data,json=backupRData,proto3" json:"backup_r_data,omitempty"`
	Ttl         uint32 `protobuf:"varint,5,opt,name=ttl,proto3" json:"ttl,omitempty"`
	ViewName    string `protobuf:"bytes,6,opt,name=view_name,json=viewName,proto3" json:"view_name,omitempty"`
	ViewKey     string `protobuf:"bytes,7,opt,name=view_key,json=viewKey,proto3" json:"view_key,omitempty"`
	ZoneName    string `protobuf:"bytes,8,opt,name=zone_name,json=zoneName,proto3" json:"zone_name,omitempty"`
	ZoneRrsRole string `protobuf:"bytes,9,opt,name=zone_rrs_role,json=zoneRrsRole,proto3" json:"zone_rrs_role,omitempty"`
}

func (x *UpdateRRReq) Reset() {
	*x = UpdateRRReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dns_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRRReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRRReq) ProtoMessage() {}

func (x *UpdateRRReq) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRRReq.ProtoReflect.Descriptor instead.
func (*UpdateRRReq) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateRRReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateRRReq) GetDataType() string {
	if x != nil {
		return x.DataType
	}
	return ""
}

func (x *UpdateRRReq) GetRData() string {
	if x != nil {
		return x.RData
	}
	return ""
}

func (x *UpdateRRReq) GetBackupRData() string {
	if x != nil {
		return x.BackupRData
	}
	return ""
}

func (x *UpdateRRReq) GetTtl() uint32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *UpdateRRReq) GetViewName() string {
	if x != nil {
		return x.ViewName
	}
	return ""
}

func (x *UpdateRRReq) GetViewKey() string {
	if x != nil {
		return x.ViewKey
	}
	return ""
}

func (x *UpdateRRReq) GetZoneName() string {
	if x != nil {
		return x.ZoneName
	}
	return ""
}

func (x *UpdateRRReq) GetZoneRrsRole() string {
	if x != nil {
		return x.ZoneRrsRole
	}
	return ""
}

type DeleteRRReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ZoneId      string `protobuf:"bytes,3,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`
	DataType    string `protobuf:"bytes,4,opt,name=data_type,json=dataType,proto3" json:"data_type,omitempty"`
	RData       string `protobuf:"bytes,5,opt,name=r_data,json=rData,proto3" json:"r_data,omitempty"`
	BackupRData string `protobuf:"bytes,6,opt,name=backup_r_data,json=backupRData,proto3" json:"backup_r_data,omitempty"`
	Ttl         uint32 `protobuf:"varint,7,opt,name=ttl,proto3" json:"ttl,omitempty"`
	ViewName    string `protobuf:"bytes,8,opt,name=view_name,json=viewName,proto3" json:"view_name,omitempty"`
	ViewKey     string `protobuf:"bytes,9,opt,name=view_key,json=viewKey,proto3" json:"view_key,omitempty"`
	ZoneName    string `protobuf:"bytes,10,opt,name=zone_name,json=zoneName,proto3" json:"zone_name,omitempty"`
	ZoneRrsRole string `protobuf:"bytes,11,opt,name=zone_rrs_role,json=zoneRrsRole,proto3" json:"zone_rrs_role,omitempty"`
}

func (x *DeleteRRReq) Reset() {
	*x = DeleteRRReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dns_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRRReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRRReq) ProtoMessage() {}

func (x *DeleteRRReq) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRRReq.ProtoReflect.Descriptor instead.
func (*DeleteRRReq) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteRRReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteRRReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteRRReq) GetZoneId() string {
	if x != nil {
		return x.ZoneId
	}
	return ""
}

func (x *DeleteRRReq) GetDataType() string {
	if x != nil {
		return x.DataType
	}
	return ""
}

func (x *DeleteRRReq) GetRData() string {
	if x != nil {
		return x.RData
	}
	return ""
}

func (x *DeleteRRReq) GetBackupRData() string {
	if x != nil {
		return x.BackupRData
	}
	return ""
}

func (x *DeleteRRReq) GetTtl() uint32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *DeleteRRReq) GetViewName() string {
	if x != nil {
		return x.ViewName
	}
	return ""
}

func (x *DeleteRRReq) GetViewKey() string {
	if x != nil {
		return x.ViewKey
	}
	return ""
}

func (x *DeleteRRReq) GetZoneName() string {
	if x != nil {
		return x.ZoneName
	}
	return ""
}

func (x *DeleteRRReq) GetZoneRrsRole() string {
	if x != nil {
		return x.ZoneRrsRole
	}
	return ""
}

type CreateViewReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Priority     uint32          `protobuf:"varint,3,opt,name=priority,proto3" json:"priority,omitempty"`
	Dns64        string          `protobuf:"bytes,4,opt,name=dns64,proto3" json:"dns64,omitempty"`
	Key          string          `protobuf:"bytes,5,opt,name=key,proto3" json:"key,omitempty"`
	Acls         []string        `protobuf:"bytes,6,rep,name=acls,proto3" json:"acls,omitempty"`
	ViewPriority []*ViewPriority `protobuf:"bytes,7,rep,name=view_priority,json=viewPriority,proto3" json:"view_priority,omitempty"`
}

func (x *CreateViewReq) Reset() {
	*x = CreateViewReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dns_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateViewReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateViewReq) ProtoMessage() {}

func (x *CreateViewReq) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateViewReq.ProtoReflect.Descriptor instead.
func (*CreateViewReq) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{13}
}

func (x *CreateViewReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateViewReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateViewReq) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *CreateViewReq) GetDns64() string {
	if x != nil {
		return x.Dns64
	}
	return ""
}

func (x *CreateViewReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *CreateViewReq) GetAcls() []string {
	if x != nil {
		return x.Acls
	}
	return nil
}

func (x *CreateViewReq) GetViewPriority() []*ViewPriority {
	if x != nil {
		return x.ViewPriority
	}
	return nil
}

type ViewPriority struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Priority uint32 `protobuf:"varint,3,opt,name=priority,proto3" json:"priority,omitempty"`
}

func (x *ViewPriority) Reset() {
	*x = ViewPriority{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dns_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ViewPriority) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewPriority) ProtoMessage() {}

func (x *ViewPriority) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewPriority.ProtoReflect.Descriptor instead.
func (*ViewPriority) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{14}
}

func (x *ViewPriority) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ViewPriority) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

type UpdateViewReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Priority     uint32          `protobuf:"varint,2,opt,name=priority,proto3" json:"priority,omitempty"`
	Dns64        string          `protobuf:"bytes,3,opt,name=dns64,proto3" json:"dns64,omitempty"`
	Acls         []string        `protobuf:"bytes,4,rep,name=acls,proto3" json:"acls,omitempty"`
	ViewPriority []*ViewPriority `protobuf:"bytes,5,rep,name=view_priority,json=viewPriority,proto3" json:"view_priority,omitempty"`
}

func (x *UpdateViewReq) Reset() {
	*x = UpdateViewReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dns_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateViewReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateViewReq) ProtoMessage() {}

func (x *UpdateViewReq) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateViewReq.ProtoReflect.Descriptor instead.
func (*UpdateViewReq) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateViewReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateViewReq) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *UpdateViewReq) GetDns64() string {
	if x != nil {
		return x.Dns64
	}
	return ""
}

func (x *UpdateViewReq) GetAcls() []string {
	if x != nil {
		return x.Acls
	}
	return nil
}

func (x *UpdateViewReq) GetViewPriority() []*ViewPriority {
	if x != nil {
		return x.ViewPriority
	}
	return nil
}

type DeleteViewReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ViewPriority []*ViewPriority `protobuf:"bytes,2,rep,name=view_priority,json=viewPriority,proto3" json:"view_priority,omitempty"`
}

func (x *DeleteViewReq) Reset() {
	*x = DeleteViewReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dns_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteViewReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteViewReq) ProtoMessage() {}

func (x *DeleteViewReq) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteViewReq.ProtoReflect.Descriptor instead.
func (*DeleteViewReq) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteViewReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteViewReq) GetViewPriority() []*ViewPriority {
	if x != nil {
		return x.ViewPriority
	}
	return nil
}

type CreateUrlRedirectReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Domain string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	Url    string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	ViewId string `protobuf:"bytes,4,opt,name=view_id,json=viewId,proto3" json:"view_id,omitempty"`
}

func (x *CreateUrlRedirectReq) Reset() {
	*x = CreateUrlRedirectReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dns_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUrlRedirectReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUrlRedirectReq) ProtoMessage() {}

func (x *CreateUrlRedirectReq) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUrlRedirectReq.ProtoReflect.Descriptor instead.
func (*CreateUrlRedirectReq) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{17}
}

func (x *CreateUrlRedirectReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateUrlRedirectReq) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *CreateUrlRedirectReq) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *CreateUrlRedirectReq) GetViewId() string {
	if x != nil {
		return x.ViewId
	}
	return ""
}

type UpdateUrlRedirectReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Domain string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	Url    string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	View   string `protobuf:"bytes,5,opt,name=view,proto3" json:"view,omitempty"`
}

func (x *UpdateUrlRedirectReq) Reset() {
	*x = UpdateUrlRedirectReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dns_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUrlRedirectReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUrlRedirectReq) ProtoMessage() {}

func (x *UpdateUrlRedirectReq) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUrlRedirectReq.ProtoReflect.Descriptor instead.
func (*UpdateUrlRedirectReq) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateUrlRedirectReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateUrlRedirectReq) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *UpdateUrlRedirectReq) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *UpdateUrlRedirectReq) GetView() string {
	if x != nil {
		return x.View
	}
	return ""
}

type DeleteUrlRedirectReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	View string `protobuf:"bytes,2,opt,name=view,proto3" json:"view,omitempty"`
}

func (x *DeleteUrlRedirectReq) Reset() {
	*x = DeleteUrlRedirectReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dns_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUrlRedirectReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUrlRedirectReq) ProtoMessage() {}

func (x *DeleteUrlRedirectReq) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUrlRedirectReq.ProtoReflect.Descriptor instead.
func (*DeleteUrlRedirectReq) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{19}
}

func (x *DeleteUrlRedirectReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteUrlRedirectReq) GetView() string {
	if x != nil {
		return x.View
	}
	return ""
}

type CreateRedirectionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Ttl          uint32 `protobuf:"varint,3,opt,name=ttl,proto3" json:"ttl,omitempty"`
	DataType     string `protobuf:"bytes,4,opt,name=data_type,json=dataType,proto3" json:"data_type,omitempty"`
	RedirectType string `protobuf:"bytes,5,opt,name=redirect_type,json=redirectType,proto3" json:"redirect_type,omitempty"`
	RData        string `protobuf:"bytes,6,opt,name=r_data,json=rData,proto3" json:"r_data,omitempty"`
	ViewId       string `protobuf:"bytes,7,opt,name=view_id,json=viewId,proto3" json:"view_id,omitempty"`
}

func (x *CreateRedirectionReq) Reset() {
	*x = CreateRedirectionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dns_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRedirectionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRedirectionReq) ProtoMessage() {}

func (x *CreateRedirectionReq) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRedirectionReq.ProtoReflect.Descriptor instead.
func (*CreateRedirectionReq) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{20}
}

func (x *CreateRedirectionReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateRedirectionReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateRedirectionReq) GetTtl() uint32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *CreateRedirectionReq) GetDataType() string {
	if x != nil {
		return x.DataType
	}
	return ""
}

func (x *CreateRedirectionReq) GetRedirectType() string {
	if x != nil {
		return x.RedirectType
	}
	return ""
}

func (x *CreateRedirectionReq) GetRData() string {
	if x != nil {
		return x.RData
	}
	return ""
}

func (x *CreateRedirectionReq) GetViewId() string {
	if x != nil {
		return x.ViewId
	}
	return ""
}

type UpdateRedirectionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DataType            string `protobuf:"bytes,2,opt,name=data_type,json=dataType,proto3" json:"data_type,omitempty"`
	RedirectType        string `protobuf:"bytes,3,opt,name=redirect_type,json=redirectType,proto3" json:"redirect_type,omitempty"`
	RData               string `protobuf:"bytes,4,opt,name=r_data,json=rData,proto3" json:"r_data,omitempty"`
	Ttl                 uint32 `protobuf:"varint,5,opt,name=ttl,proto3" json:"ttl,omitempty"`
	RedirectTypeChanged bool   `protobuf:"varint,6,opt,name=redirect_type_changed,json=redirectTypeChanged,proto3" json:"redirect_type_changed,omitempty"`
	View                string `protobuf:"bytes,7,opt,name=view,proto3" json:"view,omitempty"`
}

func (x *UpdateRedirectionReq) Reset() {
	*x = UpdateRedirectionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dns_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRedirectionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRedirectionReq) ProtoMessage() {}

func (x *UpdateRedirectionReq) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRedirectionReq.ProtoReflect.Descriptor instead.
func (*UpdateRedirectionReq) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{21}
}

func (x *UpdateRedirectionReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateRedirectionReq) GetDataType() string {
	if x != nil {
		return x.DataType
	}
	return ""
}

func (x *UpdateRedirectionReq) GetRedirectType() string {
	if x != nil {
		return x.RedirectType
	}
	return ""
}

func (x *UpdateRedirectionReq) GetRData() string {
	if x != nil {
		return x.RData
	}
	return ""
}

func (x *UpdateRedirectionReq) GetTtl() uint32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *UpdateRedirectionReq) GetRedirectTypeChanged() bool {
	if x != nil {
		return x.RedirectTypeChanged
	}
	return false
}

func (x *UpdateRedirectionReq) GetView() string {
	if x != nil {
		return x.View
	}
	return ""
}

type DeleteRedirectionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RedirectType string `protobuf:"bytes,2,opt,name=redirect_type,json=redirectType,proto3" json:"redirect_type,omitempty"`
	View         string `protobuf:"bytes,3,opt,name=view,proto3" json:"view,omitempty"`
}

func (x *DeleteRedirectionReq) Reset() {
	*x = DeleteRedirectionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dns_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRedirectionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRedirectionReq) ProtoMessage() {}

func (x *DeleteRedirectionReq) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRedirectionReq.ProtoReflect.Descriptor instead.
func (*DeleteRedirectionReq) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteRedirectionReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteRedirectionReq) GetRedirectType() string {
	if x != nil {
		return x.RedirectType
	}
	return ""
}

func (x *DeleteRedirectionReq) GetView() string {
	if x != nil {
		return x.View
	}
	return ""
}

type CreateForwardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Ips  []string `protobuf:"bytes,3,rep,name=ips,proto3" json:"ips,omitempty"`
}

func (x *CreateForwardReq) Reset() {
	*x = CreateForwardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dns_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateForwardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateForwardReq) ProtoMessage() {}

func (x *CreateForwardReq) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateForwardReq.ProtoReflect.Descriptor instead.
func (*CreateForwardReq) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{23}
}

func (x *CreateForwardReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateForwardReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateForwardReq) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

type UpdateForwardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Ips          []string       `protobuf:"bytes,2,rep,name=ips,proto3" json:"ips,omitempty"`
	ForwardZones []*ForwardZone `protobuf:"bytes,3,rep,name=forwardZones,proto3" json:"forwardZones,omitempty"`
}

func (x *UpdateForwardReq) Reset() {
	*x = UpdateForwardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dns_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateForwardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateForwardReq) ProtoMessage() {}

func (x *UpdateForwardReq) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateForwardReq.ProtoReflect.Descriptor instead.
func (*UpdateForwardReq) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{24}
}

func (x *UpdateForwardReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateForwardReq) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

func (x *UpdateForwardReq) GetForwardZones() []*ForwardZone {
	if x != nil {
		return x.ForwardZones
	}
	return nil
}

type ForwardZone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ForwardIps []string `protobuf:"bytes,2,rep,name=forward_ips,json=forwardIps,proto3" json:"forward_ips,omitempty"`
}

func (x *ForwardZone) Reset() {
	*x = ForwardZone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dns_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForwardZone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForwardZone) ProtoMessage() {}

func (x *ForwardZone) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForwardZone.ProtoReflect.Descriptor instead.
func (*ForwardZone) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{25}
}

func (x *ForwardZone) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ForwardZone) GetForwardIps() []string {
	if x != nil {
		return x.ForwardIps
	}
	return nil
}

type DeleteForwardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteForwardReq) Reset() {
	*x = DeleteForwardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dns_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteForwardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteForwardReq) ProtoMessage() {}

func (x *DeleteForwardReq) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteForwardReq.ProtoReflect.Descriptor instead.
func (*DeleteForwardReq) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{26}
}

func (x *DeleteForwardReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CreateForwardZoneReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ForwardType string   `protobuf:"bytes,3,opt,name=forward_type,json=forwardType,proto3" json:"forward_type,omitempty"`
	ForwardIds  []string `protobuf:"bytes,4,rep,name=forward_ids,json=forwardIds,proto3" json:"forward_ids,omitempty"`
	ForwardIps  []string `protobuf:"bytes,5,rep,name=forward_ips,json=forwardIps,proto3" json:"forward_ips,omitempty"`
	ViewId      string   `protobuf:"bytes,6,opt,name=view_id,json=viewId,proto3" json:"view_id,omitempty"`
}

func (x *CreateForwardZoneReq) Reset() {
	*x = CreateForwardZoneReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dns_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateForwardZoneReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateForwardZoneReq) ProtoMessage() {}

func (x *CreateForwardZoneReq) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateForwardZoneReq.ProtoReflect.Descriptor instead.
func (*CreateForwardZoneReq) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{27}
}

func (x *CreateForwardZoneReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateForwardZoneReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateForwardZoneReq) GetForwardType() string {
	if x != nil {
		return x.ForwardType
	}
	return ""
}

func (x *CreateForwardZoneReq) GetForwardIds() []string {
	if x != nil {
		return x.ForwardIds
	}
	return nil
}

func (x *CreateForwardZoneReq) GetForwardIps() []string {
	if x != nil {
		return x.ForwardIps
	}
	return nil
}

func (x *CreateForwardZoneReq) GetViewId() string {
	if x != nil {
		return x.ViewId
	}
	return ""
}

type UpdateForwardZoneReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ForwardIds  []string `protobuf:"bytes,2,rep,name=forward_ids,json=forwardIds,proto3" json:"forward_ids,omitempty"`
	ForwardType string   `protobuf:"bytes,3,opt,name=forward_type,json=forwardType,proto3" json:"forward_type,omitempty"`
	IpsChanged  bool     `protobuf:"varint,4,opt,name=ips_changed,json=ipsChanged,proto3" json:"ips_changed,omitempty"`
	ForwardIps  []string `protobuf:"bytes,5,rep,name=forward_ips,json=forwardIps,proto3" json:"forward_ips,omitempty"`
}

func (x *UpdateForwardZoneReq) Reset() {
	*x = UpdateForwardZoneReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dns_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateForwardZoneReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateForwardZoneReq) ProtoMessage() {}

func (x *UpdateForwardZoneReq) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateForwardZoneReq.ProtoReflect.Descriptor instead.
func (*UpdateForwardZoneReq) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{28}
}

func (x *UpdateForwardZoneReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateForwardZoneReq) GetForwardIds() []string {
	if x != nil {
		return x.ForwardIds
	}
	return nil
}

func (x *UpdateForwardZoneReq) GetForwardType() string {
	if x != nil {
		return x.ForwardType
	}
	return ""
}

func (x *UpdateForwardZoneReq) GetIpsChanged() bool {
	if x != nil {
		return x.IpsChanged
	}
	return false
}

func (x *UpdateForwardZoneReq) GetForwardIps() []string {
	if x != nil {
		return x.ForwardIps
	}
	return nil
}

type DeleteForwardZoneReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteForwardZoneReq) Reset() {
	*x = DeleteForwardZoneReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dns_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteForwardZoneReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteForwardZoneReq) ProtoMessage() {}

func (x *DeleteForwardZoneReq) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteForwardZoneReq.ProtoReflect.Descriptor instead.
func (*DeleteForwardZoneReq) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{29}
}

func (x *DeleteForwardZoneReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CreateIPBlackHoleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Acl string `protobuf:"bytes,2,opt,name=acl,proto3" json:"acl,omitempty"`
}

func (x *CreateIPBlackHoleReq) Reset() {
	*x = CreateIPBlackHoleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dns_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateIPBlackHoleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIPBlackHoleReq) ProtoMessage() {}

func (x *CreateIPBlackHoleReq) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIPBlackHoleReq.ProtoReflect.Descriptor instead.
func (*CreateIPBlackHoleReq) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{30}
}

func (x *CreateIPBlackHoleReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateIPBlackHoleReq) GetAcl() string {
	if x != nil {
		return x.Acl
	}
	return ""
}

type UpdateIPBlackHoleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Acl string `protobuf:"bytes,2,opt,name=acl,proto3" json:"acl,omitempty"`
}

func (x *UpdateIPBlackHoleReq) Reset() {
	*x = UpdateIPBlackHoleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dns_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateIPBlackHoleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIPBlackHoleReq) ProtoMessage() {}

func (x *UpdateIPBlackHoleReq) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIPBlackHoleReq.ProtoReflect.Descriptor instead.
func (*UpdateIPBlackHoleReq) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{31}
}

func (x *UpdateIPBlackHoleReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateIPBlackHoleReq) GetAcl() string {
	if x != nil {
		return x.Acl
	}
	return ""
}

type DeleteIPBlackHoleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteIPBlackHoleReq) Reset() {
	*x = DeleteIPBlackHoleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dns_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteIPBlackHoleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteIPBlackHoleReq) ProtoMessage() {}

func (x *DeleteIPBlackHoleReq) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteIPBlackHoleReq.ProtoReflect.Descriptor instead.
func (*DeleteIPBlackHoleReq) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{32}
}

func (x *DeleteIPBlackHoleReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type UpdateRecurConcuReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RecursiveClients uint32 `protobuf:"varint,2,opt,name=recursive_clients,json=recursiveClients,proto3" json:"recursive_clients,omitempty"`
	FetchesPerZone   uint32 `protobuf:"varint,3,opt,name=fetches_per_zone,json=fetchesPerZone,proto3" json:"fetches_per_zone,omitempty"`
}

func (x *UpdateRecurConcuReq) Reset() {
	*x = UpdateRecurConcuReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dns_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRecurConcuReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRecurConcuReq) ProtoMessage() {}

func (x *UpdateRecurConcuReq) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRecurConcuReq.ProtoReflect.Descriptor instead.
func (*UpdateRecurConcuReq) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{33}
}

func (x *UpdateRecurConcuReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateRecurConcuReq) GetRecursiveClients() uint32 {
	if x != nil {
		return x.RecursiveClients
	}
	return 0
}

func (x *UpdateRecurConcuReq) GetFetchesPerZone() uint32 {
	if x != nil {
		return x.FetchesPerZone
	}
	return 0
}

type CreateSortListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateSortListReq) Reset() {
	*x = CreateSortListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dns_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSortListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSortListReq) ProtoMessage() {}

func (x *CreateSortListReq) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSortListReq.ProtoReflect.Descriptor instead.
func (*CreateSortListReq) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{34}
}

type UpdateSortListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateSortListReq) Reset() {
	*x = UpdateSortListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dns_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSortListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSortListReq) ProtoMessage() {}

func (x *UpdateSortListReq) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSortListReq.ProtoReflect.Descriptor instead.
func (*UpdateSortListReq) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{35}
}

type DeleteSortListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteSortListReq) Reset() {
	*x = DeleteSortListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dns_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSortListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSortListReq) ProtoMessage() {}

func (x *DeleteSortListReq) ProtoReflect() protoreflect.Message {
	mi := &file_dns_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSortListReq.ProtoReflect.Descriptor instead.
func (*DeleteSortListReq) Descriptor() ([]byte, []int) {
	return file_dns_proto_rawDescGZIP(), []int{36}
}

var File_dns_proto protoreflect.FileDescriptor

var file_dns_proto_rawDesc = []byte{
	0x0a, 0x09, 0x64, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x12, 0x64, 0x64, 0x69, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x25, 0x0a, 0x0b, 0x44, 0x4e, 0x53, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x0c, 0x0a,
	0x0a, 0x44, 0x4e, 0x53, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x22, 0x8e, 0x01, 0x0a, 0x15,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x6e, 0x73, 0x73, 0x65, 0x63, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x64, 0x6e, 0x73,
	0x73, 0x65, 0x63, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x74, 0x6c,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x74, 0x74, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x22, 0x44, 0x0a, 0x0c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x43, 0x4c, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x69, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69,
	0x70, 0x73, 0x22, 0x44, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x43, 0x4c, 0x52,
	0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x70, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x70, 0x73, 0x22, 0x1e, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x43, 0x4c, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xb1, 0x01, 0x0a, 0x0d, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x69,
	0x65, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x69, 0x65,
	0x77, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x7a, 0x6f, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x7a, 0x6f, 0x6e,
	0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x7a, 0x6f, 0x6e, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74, 0x74,
	0x6c, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x72, 0x73, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x72, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x22, 0x7f, 0x0a, 0x0d,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x74, 0x74, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x7a, 0x6f, 0x6e,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x69, 0x65,
	0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x22, 0x47, 0x0a,
	0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x22, 0xc6, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x52, 0x73, 0x42, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a,
	0x07, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x72,
	0x73, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65,
	0x77, 0x52, 0x72, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x69, 0x65, 0x77,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x69, 0x65,
	0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x69, 0x65, 0x77, 0x4b, 0x65, 0x79,
	0x12, 0x1b, 0x0a, 0x09, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x7a, 0x6f, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0c, 0x6f, 0x6c, 0x64, 0x5f, 0x72, 0x72, 0x73, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x6c, 0x64, 0x52, 0x72, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x22,
	0xa9, 0x02, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x52, 0x52, 0x65, 0x71, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x76, 0x69, 0x65, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76,
	0x69, 0x65, 0x77, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x5f, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a,
	0x03, 0x74, 0x74, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x12,
	0x19, 0x0a, 0x08, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x69, 0x65, 0x77, 0x4b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x7a, 0x6f,
	0x6e, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x7a,
	0x6f, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x7a, 0x6f, 0x6e, 0x65, 0x5f,
	0x72, 0x72, 0x73, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x7a, 0x6f, 0x6e, 0x65, 0x52, 0x72, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x22, 0x80, 0x02, 0x0a, 0x0b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x52, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x22, 0x0a, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x74, 0x74, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x69, 0x65, 0x77, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x69, 0x65, 0x77, 0x4b, 0x65, 0x79, 0x12, 0x1b, 0x0a,
	0x09, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x7a, 0x6f, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x7a, 0x6f,
	0x6e, 0x65, 0x5f, 0x72, 0x72, 0x73, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x7a, 0x6f, 0x6e, 0x65, 0x52, 0x72, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x22, 0xad,
	0x02, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x52, 0x52, 0x65, 0x71, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x22, 0x0a, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x74, 0x74, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x69, 0x65, 0x77, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x69, 0x65, 0x77, 0x4b, 0x65, 0x79, 0x12, 0x1b, 0x0a,
	0x09, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x7a, 0x6f, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x7a, 0x6f,
	0x6e, 0x65, 0x5f, 0x72, 0x72, 0x73, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x7a, 0x6f, 0x6e, 0x65, 0x52, 0x72, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x22, 0xc5,
	0x01, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x64, 0x6e, 0x73, 0x36, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x64, 0x6e, 0x73, 0x36, 0x34, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x63, 0x6c, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x61, 0x63, 0x6c, 0x73, 0x12, 0x38, 0x0a, 0x0d,
	0x76, 0x69, 0x65, 0x77, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x65, 0x77,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0x3a, 0x0a, 0x0c, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x22, 0x9f, 0x01, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x69, 0x65,
	0x77, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x64, 0x6e, 0x73, 0x36, 0x34, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x64, 0x6e, 0x73, 0x36, 0x34, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x63, 0x6c, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x61, 0x63, 0x6c, 0x73, 0x12, 0x38, 0x0a, 0x0d, 0x76, 0x69,
	0x65, 0x77, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x22, 0x59, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x69,
	0x65, 0x77, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x0d, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x52, 0x0c, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22,
	0x69, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x22, 0x64, 0x0a, 0x14, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x76, 0x69, 0x65, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77,
	0x22, 0x3a, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x22, 0xbe, 0x01, 0x0a,
	0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a,
	0x06, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x22, 0xd9, 0x01,
	0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74, 0x74,
	0x6c, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x13, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x22, 0x5f, 0x0a, 0x14, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x22, 0x48, 0x0a, 0x10, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x03, 0x69, 0x70, 0x73, 0x22, 0x6c, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x70, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x70, 0x73, 0x12, 0x36, 0x0a, 0x0c, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5a, 0x6f, 0x6e,
	0x65, 0x73, 0x22, 0x3e, 0x0a, 0x0b, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5a, 0x6f, 0x6e,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x70, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x49,
	0x70, 0x73, 0x22, 0x22, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xb8, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x49, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x5f, 0x69, 0x70, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x49, 0x70, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x69, 0x65, 0x77,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x69, 0x65, 0x77, 0x49,
	0x64, 0x22, 0xac, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x49, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x69, 0x70, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x70, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x70, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x49, 0x70, 0x73,
	0x22, 0x26, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x38, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x49, 0x50, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x48, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x61, 0x63, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61,
	0x63, 0x6c, 0x22, 0x38, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x50, 0x42, 0x6c,
	0x61, 0x63, 0x6b, 0x48, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x63,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x63, 0x6c, 0x22, 0x26, 0x0a, 0x14,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x50, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x48, 0x6f, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x7c, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x63, 0x75, 0x72, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x72,
	0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76,
	0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x65, 0x74, 0x63,
	0x68, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x66, 0x65, 0x74, 0x63, 0x68, 0x65, 0x73, 0x50, 0x65, 0x72, 0x5a, 0x6f,
	0x6e, 0x65, 0x22, 0x13, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x72, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x22, 0x13, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x22, 0x13, 0x0a, 0x11,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x32, 0xe1, 0x11, 0x0a, 0x0c, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x12, 0x34, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x4e, 0x53, 0x12, 0x12,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x4e, 0x53, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x44, 0x49, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x07, 0x53, 0x74, 0x6f, 0x70,
	0x44, 0x4e, 0x53, 0x12, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x4e, 0x53, 0x53,
	0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x44, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x09,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x43, 0x4c, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x43, 0x4c, 0x52, 0x65, 0x71, 0x1a, 0x12,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x44, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x43,
	0x4c, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x43, 0x4c, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x44, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x09,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x43, 0x4c, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x43, 0x4c, 0x52, 0x65, 0x71, 0x1a, 0x12,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x44, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69,
	0x65, 0x77, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x44, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x38,
	0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x12, 0x14, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x52,
	0x65, 0x71, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x44, 0x49, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x44, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x38, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5a, 0x6f, 0x6e, 0x65,
	0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5a,
	0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x44, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x0a,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x44, 0x49, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x44, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x42, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x52, 0x73, 0x42, 0x79, 0x5a,
	0x6f, 0x6e, 0x65, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x52, 0x73, 0x42, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x12,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x44, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5a,
	0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x44, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x11,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5a, 0x6f, 0x6e,
	0x65, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x12,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x44, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5a,
	0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x44, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x08,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x52, 0x12, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x52, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x44, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x34, 0x0a, 0x08, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x52, 0x12, 0x12,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x52, 0x52,
	0x65, 0x71, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x44, 0x49, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x08, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x52, 0x12, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x52, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x44, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3e,
	0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x12,
	0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x44, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3e,
	0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x12,
	0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x44, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3e,
	0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x12,
	0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x44, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x46,
	0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x44, 0x49, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x44, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x46,
	0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x44, 0x49, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x49, 0x50, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x48, 0x6f, 0x6c, 0x65, 0x12, 0x1b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x50, 0x42, 0x6c, 0x61, 0x63,
	0x6b, 0x48, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x44, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x46,
	0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x50, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x48,
	0x6f, 0x6c, 0x65, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x49, 0x50, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x48, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x44, 0x49, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x49, 0x50, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x48, 0x6f, 0x6c, 0x65, 0x12, 0x1b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x50, 0x42, 0x6c, 0x61, 0x63,
	0x6b, 0x48, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x44, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d,
	0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x75, 0x72, 0x43,
	0x6f, 0x6e, 0x63, 0x75, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x44, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a,
	0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6f,
	0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x44, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x40, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x44, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x40, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x44, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x72, 0x6c,
	0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x44,
	0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x11, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55,
	0x72, 0x6c, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x44, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x72, 0x6c,
	0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x44,
	0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x12, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x1a,
	0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x44, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dns_proto_rawDescOnce sync.Once
	file_dns_proto_rawDescData = file_dns_proto_rawDesc
)

func file_dns_proto_rawDescGZIP() []byte {
	file_dns_proto_rawDescOnce.Do(func() {
		file_dns_proto_rawDescData = protoimpl.X.CompressGZIP(file_dns_proto_rawDescData)
	})
	return file_dns_proto_rawDescData
}

var file_dns_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_dns_proto_goTypes = []interface{}{
	(*DNSStartReq)(nil),           // 0: proto.DNSStartReq
	(*DNSStopReq)(nil),            // 1: proto.DNSStopReq
	(*UpdateGlobalConfigReq)(nil), // 2: proto.UpdateGlobalConfigReq
	(*CreateACLReq)(nil),          // 3: proto.CreateACLReq
	(*UpdateACLReq)(nil),          // 4: proto.UpdateACLReq
	(*DeleteACLReq)(nil),          // 5: proto.DeleteACLReq
	(*CreateZoneReq)(nil),         // 6: proto.CreateZoneReq
	(*UpdateZoneReq)(nil),         // 7: proto.UpdateZoneReq
	(*DeleteZoneReq)(nil),         // 8: proto.DeleteZoneReq
	(*UpdateRRsByZoneReq)(nil),    // 9: proto.UpdateRRsByZoneReq
	(*CreateRRReq)(nil),           // 10: proto.CreateRRReq
	(*UpdateRRReq)(nil),           // 11: proto.UpdateRRReq
	(*DeleteRRReq)(nil),           // 12: proto.DeleteRRReq
	(*CreateViewReq)(nil),         // 13: proto.CreateViewReq
	(*ViewPriority)(nil),          // 14: proto.ViewPriority
	(*UpdateViewReq)(nil),         // 15: proto.UpdateViewReq
	(*DeleteViewReq)(nil),         // 16: proto.DeleteViewReq
	(*CreateUrlRedirectReq)(nil),  // 17: proto.CreateUrlRedirectReq
	(*UpdateUrlRedirectReq)(nil),  // 18: proto.UpdateUrlRedirectReq
	(*DeleteUrlRedirectReq)(nil),  // 19: proto.DeleteUrlRedirectReq
	(*CreateRedirectionReq)(nil),  // 20: proto.CreateRedirectionReq
	(*UpdateRedirectionReq)(nil),  // 21: proto.UpdateRedirectionReq
	(*DeleteRedirectionReq)(nil),  // 22: proto.DeleteRedirectionReq
	(*CreateForwardReq)(nil),      // 23: proto.CreateForwardReq
	(*UpdateForwardReq)(nil),      // 24: proto.UpdateForwardReq
	(*ForwardZone)(nil),           // 25: proto.ForwardZone
	(*DeleteForwardReq)(nil),      // 26: proto.DeleteForwardReq
	(*CreateForwardZoneReq)(nil),  // 27: proto.CreateForwardZoneReq
	(*UpdateForwardZoneReq)(nil),  // 28: proto.UpdateForwardZoneReq
	(*DeleteForwardZoneReq)(nil),  // 29: proto.DeleteForwardZoneReq
	(*CreateIPBlackHoleReq)(nil),  // 30: proto.CreateIPBlackHoleReq
	(*UpdateIPBlackHoleReq)(nil),  // 31: proto.UpdateIPBlackHoleReq
	(*DeleteIPBlackHoleReq)(nil),  // 32: proto.DeleteIPBlackHoleReq
	(*UpdateRecurConcuReq)(nil),   // 33: proto.UpdateRecurConcuReq
	(*CreateSortListReq)(nil),     // 34: proto.CreateSortListReq
	(*UpdateSortListReq)(nil),     // 35: proto.UpdateSortListReq
	(*DeleteSortListReq)(nil),     // 36: proto.DeleteSortListReq
	(*DDIResponse)(nil),           // 37: proto.DDIResponse
}
var file_dns_proto_depIdxs = []int32{
	14, // 0: proto.CreateViewReq.view_priority:type_name -> proto.ViewPriority
	14, // 1: proto.UpdateViewReq.view_priority:type_name -> proto.ViewPriority
	14, // 2: proto.DeleteViewReq.view_priority:type_name -> proto.ViewPriority
	25, // 3: proto.UpdateForwardReq.forwardZones:type_name -> proto.ForwardZone
	0,  // 4: proto.AgentManager.StartDNS:input_type -> proto.DNSStartReq
	1,  // 5: proto.AgentManager.StopDNS:input_type -> proto.DNSStopReq
	3,  // 6: proto.AgentManager.CreateACL:input_type -> proto.CreateACLReq
	4,  // 7: proto.AgentManager.UpdateACL:input_type -> proto.UpdateACLReq
	5,  // 8: proto.AgentManager.DeleteACL:input_type -> proto.DeleteACLReq
	13, // 9: proto.AgentManager.CreateView:input_type -> proto.CreateViewReq
	15, // 10: proto.AgentManager.UpdateView:input_type -> proto.UpdateViewReq
	16, // 11: proto.AgentManager.DeleteView:input_type -> proto.DeleteViewReq
	6,  // 12: proto.AgentManager.CreateZone:input_type -> proto.CreateZoneReq
	7,  // 13: proto.AgentManager.UpdateZone:input_type -> proto.UpdateZoneReq
	8,  // 14: proto.AgentManager.DeleteZone:input_type -> proto.DeleteZoneReq
	9,  // 15: proto.AgentManager.UpdateRRsByZone:input_type -> proto.UpdateRRsByZoneReq
	27, // 16: proto.AgentManager.CreateForwardZone:input_type -> proto.CreateForwardZoneReq
	28, // 17: proto.AgentManager.UpdateForwardZone:input_type -> proto.UpdateForwardZoneReq
	29, // 18: proto.AgentManager.DeleteForwardZone:input_type -> proto.DeleteForwardZoneReq
	10, // 19: proto.AgentManager.CreateRR:input_type -> proto.CreateRRReq
	11, // 20: proto.AgentManager.UpdateRR:input_type -> proto.UpdateRRReq
	12, // 21: proto.AgentManager.DeleteRR:input_type -> proto.DeleteRRReq
	23, // 22: proto.AgentManager.CreateForward:input_type -> proto.CreateForwardReq
	24, // 23: proto.AgentManager.UpdateForward:input_type -> proto.UpdateForwardReq
	26, // 24: proto.AgentManager.DeleteForward:input_type -> proto.DeleteForwardReq
	20, // 25: proto.AgentManager.CreateRedirection:input_type -> proto.CreateRedirectionReq
	21, // 26: proto.AgentManager.UpdateRedirection:input_type -> proto.UpdateRedirectionReq
	22, // 27: proto.AgentManager.DeleteRedirection:input_type -> proto.DeleteRedirectionReq
	30, // 28: proto.AgentManager.CreateIPBlackHole:input_type -> proto.CreateIPBlackHoleReq
	31, // 29: proto.AgentManager.UpdateIPBlackHole:input_type -> proto.UpdateIPBlackHoleReq
	32, // 30: proto.AgentManager.DeleteIPBlackHole:input_type -> proto.DeleteIPBlackHoleReq
	33, // 31: proto.AgentManager.UpdateRecursiveConcurrent:input_type -> proto.UpdateRecurConcuReq
	34, // 32: proto.AgentManager.CreateSortList:input_type -> proto.CreateSortListReq
	35, // 33: proto.AgentManager.UpdateSortList:input_type -> proto.UpdateSortListReq
	36, // 34: proto.AgentManager.DeleteSortList:input_type -> proto.DeleteSortListReq
	17, // 35: proto.AgentManager.CreateUrlRedirect:input_type -> proto.CreateUrlRedirectReq
	18, // 36: proto.AgentManager.UpdateUrlRedirect:input_type -> proto.UpdateUrlRedirectReq
	19, // 37: proto.AgentManager.DeleteUrlRedirect:input_type -> proto.DeleteUrlRedirectReq
	2,  // 38: proto.AgentManager.UpdateGlobalConfig:input_type -> proto.UpdateGlobalConfigReq
	37, // 39: proto.AgentManager.StartDNS:output_type -> proto.DDIResponse
	37, // 40: proto.AgentManager.StopDNS:output_type -> proto.DDIResponse
	37, // 41: proto.AgentManager.CreateACL:output_type -> proto.DDIResponse
	37, // 42: proto.AgentManager.UpdateACL:output_type -> proto.DDIResponse
	37, // 43: proto.AgentManager.DeleteACL:output_type -> proto.DDIResponse
	37, // 44: proto.AgentManager.CreateView:output_type -> proto.DDIResponse
	37, // 45: proto.AgentManager.UpdateView:output_type -> proto.DDIResponse
	37, // 46: proto.AgentManager.DeleteView:output_type -> proto.DDIResponse
	37, // 47: proto.AgentManager.CreateZone:output_type -> proto.DDIResponse
	37, // 48: proto.AgentManager.UpdateZone:output_type -> proto.DDIResponse
	37, // 49: proto.AgentManager.DeleteZone:output_type -> proto.DDIResponse
	37, // 50: proto.AgentManager.UpdateRRsByZone:output_type -> proto.DDIResponse
	37, // 51: proto.AgentManager.CreateForwardZone:output_type -> proto.DDIResponse
	37, // 52: proto.AgentManager.UpdateForwardZone:output_type -> proto.DDIResponse
	37, // 53: proto.AgentManager.DeleteForwardZone:output_type -> proto.DDIResponse
	37, // 54: proto.AgentManager.CreateRR:output_type -> proto.DDIResponse
	37, // 55: proto.AgentManager.UpdateRR:output_type -> proto.DDIResponse
	37, // 56: proto.AgentManager.DeleteRR:output_type -> proto.DDIResponse
	37, // 57: proto.AgentManager.CreateForward:output_type -> proto.DDIResponse
	37, // 58: proto.AgentManager.UpdateForward:output_type -> proto.DDIResponse
	37, // 59: proto.AgentManager.DeleteForward:output_type -> proto.DDIResponse
	37, // 60: proto.AgentManager.CreateRedirection:output_type -> proto.DDIResponse
	37, // 61: proto.AgentManager.UpdateRedirection:output_type -> proto.DDIResponse
	37, // 62: proto.AgentManager.DeleteRedirection:output_type -> proto.DDIResponse
	37, // 63: proto.AgentManager.CreateIPBlackHole:output_type -> proto.DDIResponse
	37, // 64: proto.AgentManager.UpdateIPBlackHole:output_type -> proto.DDIResponse
	37, // 65: proto.AgentManager.DeleteIPBlackHole:output_type -> proto.DDIResponse
	37, // 66: proto.AgentManager.UpdateRecursiveConcurrent:output_type -> proto.DDIResponse
	37, // 67: proto.AgentManager.CreateSortList:output_type -> proto.DDIResponse
	37, // 68: proto.AgentManager.UpdateSortList:output_type -> proto.DDIResponse
	37, // 69: proto.AgentManager.DeleteSortList:output_type -> proto.DDIResponse
	37, // 70: proto.AgentManager.CreateUrlRedirect:output_type -> proto.DDIResponse
	37, // 71: proto.AgentManager.UpdateUrlRedirect:output_type -> proto.DDIResponse
	37, // 72: proto.AgentManager.DeleteUrlRedirect:output_type -> proto.DDIResponse
	37, // 73: proto.AgentManager.UpdateGlobalConfig:output_type -> proto.DDIResponse
	39, // [39:74] is the sub-list for method output_type
	4,  // [4:39] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_dns_proto_init() }
func file_dns_proto_init() {
	if File_dns_proto != nil {
		return
	}
	file_ddi_response_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_dns_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DNSStartReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dns_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DNSStopReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dns_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGlobalConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dns_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateACLReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dns_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateACLReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dns_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteACLReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dns_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateZoneReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dns_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateZoneReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dns_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteZoneReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dns_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRRsByZoneReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dns_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRRReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dns_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRRReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dns_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRRReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dns_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateViewReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dns_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ViewPriority); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dns_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateViewReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dns_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteViewReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dns_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUrlRedirectReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dns_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUrlRedirectReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dns_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUrlRedirectReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dns_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRedirectionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dns_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRedirectionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dns_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRedirectionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dns_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateForwardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dns_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateForwardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dns_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForwardZone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dns_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteForwardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dns_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateForwardZoneReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dns_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateForwardZoneReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dns_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteForwardZoneReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dns_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateIPBlackHoleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dns_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateIPBlackHoleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dns_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteIPBlackHoleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dns_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRecurConcuReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dns_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSortListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dns_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSortListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dns_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSortListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dns_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dns_proto_goTypes,
		DependencyIndexes: file_dns_proto_depIdxs,
		MessageInfos:      file_dns_proto_msgTypes,
	}.Build()
	File_dns_proto = out.File
	file_dns_proto_rawDesc = nil
	file_dns_proto_goTypes = nil
	file_dns_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AgentManagerClient is the client API for AgentManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AgentManagerClient interface {
	StartDNS(ctx context.Context, in *DNSStartReq, opts ...grpc.CallOption) (*DDIResponse, error)
	StopDNS(ctx context.Context, in *DNSStopReq, opts ...grpc.CallOption) (*DDIResponse, error)
	CreateACL(ctx context.Context, in *CreateACLReq, opts ...grpc.CallOption) (*DDIResponse, error)
	UpdateACL(ctx context.Context, in *UpdateACLReq, opts ...grpc.CallOption) (*DDIResponse, error)
	DeleteACL(ctx context.Context, in *DeleteACLReq, opts ...grpc.CallOption) (*DDIResponse, error)
	CreateView(ctx context.Context, in *CreateViewReq, opts ...grpc.CallOption) (*DDIResponse, error)
	UpdateView(ctx context.Context, in *UpdateViewReq, opts ...grpc.CallOption) (*DDIResponse, error)
	DeleteView(ctx context.Context, in *DeleteViewReq, opts ...grpc.CallOption) (*DDIResponse, error)
	CreateZone(ctx context.Context, in *CreateZoneReq, opts ...grpc.CallOption) (*DDIResponse, error)
	UpdateZone(ctx context.Context, in *UpdateZoneReq, opts ...grpc.CallOption) (*DDIResponse, error)
	DeleteZone(ctx context.Context, in *DeleteZoneReq, opts ...grpc.CallOption) (*DDIResponse, error)
	UpdateRRsByZone(ctx context.Context, in *UpdateRRsByZoneReq, opts ...grpc.CallOption) (*DDIResponse, error)
	CreateForwardZone(ctx context.Context, in *CreateForwardZoneReq, opts ...grpc.CallOption) (*DDIResponse, error)
	UpdateForwardZone(ctx context.Context, in *UpdateForwardZoneReq, opts ...grpc.CallOption) (*DDIResponse, error)
	DeleteForwardZone(ctx context.Context, in *DeleteForwardZoneReq, opts ...grpc.CallOption) (*DDIResponse, error)
	CreateRR(ctx context.Context, in *CreateRRReq, opts ...grpc.CallOption) (*DDIResponse, error)
	UpdateRR(ctx context.Context, in *UpdateRRReq, opts ...grpc.CallOption) (*DDIResponse, error)
	DeleteRR(ctx context.Context, in *DeleteRRReq, opts ...grpc.CallOption) (*DDIResponse, error)
	CreateForward(ctx context.Context, in *CreateForwardReq, opts ...grpc.CallOption) (*DDIResponse, error)
	UpdateForward(ctx context.Context, in *UpdateForwardReq, opts ...grpc.CallOption) (*DDIResponse, error)
	DeleteForward(ctx context.Context, in *DeleteForwardReq, opts ...grpc.CallOption) (*DDIResponse, error)
	CreateRedirection(ctx context.Context, in *CreateRedirectionReq, opts ...grpc.CallOption) (*DDIResponse, error)
	UpdateRedirection(ctx context.Context, in *UpdateRedirectionReq, opts ...grpc.CallOption) (*DDIResponse, error)
	DeleteRedirection(ctx context.Context, in *DeleteRedirectionReq, opts ...grpc.CallOption) (*DDIResponse, error)
	CreateIPBlackHole(ctx context.Context, in *CreateIPBlackHoleReq, opts ...grpc.CallOption) (*DDIResponse, error)
	UpdateIPBlackHole(ctx context.Context, in *UpdateIPBlackHoleReq, opts ...grpc.CallOption) (*DDIResponse, error)
	DeleteIPBlackHole(ctx context.Context, in *DeleteIPBlackHoleReq, opts ...grpc.CallOption) (*DDIResponse, error)
	UpdateRecursiveConcurrent(ctx context.Context, in *UpdateRecurConcuReq, opts ...grpc.CallOption) (*DDIResponse, error)
	CreateSortList(ctx context.Context, in *CreateSortListReq, opts ...grpc.CallOption) (*DDIResponse, error)
	UpdateSortList(ctx context.Context, in *UpdateSortListReq, opts ...grpc.CallOption) (*DDIResponse, error)
	DeleteSortList(ctx context.Context, in *DeleteSortListReq, opts ...grpc.CallOption) (*DDIResponse, error)
	CreateUrlRedirect(ctx context.Context, in *CreateUrlRedirectReq, opts ...grpc.CallOption) (*DDIResponse, error)
	UpdateUrlRedirect(ctx context.Context, in *UpdateUrlRedirectReq, opts ...grpc.CallOption) (*DDIResponse, error)
	DeleteUrlRedirect(ctx context.Context, in *DeleteUrlRedirectReq, opts ...grpc.CallOption) (*DDIResponse, error)
	UpdateGlobalConfig(ctx context.Context, in *UpdateGlobalConfigReq, opts ...grpc.CallOption) (*DDIResponse, error)
}

type agentManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentManagerClient(cc grpc.ClientConnInterface) AgentManagerClient {
	return &agentManagerClient{cc}
}

func (c *agentManagerClient) StartDNS(ctx context.Context, in *DNSStartReq, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.AgentManager/StartDNS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentManagerClient) StopDNS(ctx context.Context, in *DNSStopReq, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.AgentManager/StopDNS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentManagerClient) CreateACL(ctx context.Context, in *CreateACLReq, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.AgentManager/CreateACL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentManagerClient) UpdateACL(ctx context.Context, in *UpdateACLReq, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.AgentManager/UpdateACL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentManagerClient) DeleteACL(ctx context.Context, in *DeleteACLReq, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.AgentManager/DeleteACL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentManagerClient) CreateView(ctx context.Context, in *CreateViewReq, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.AgentManager/CreateView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentManagerClient) UpdateView(ctx context.Context, in *UpdateViewReq, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.AgentManager/UpdateView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentManagerClient) DeleteView(ctx context.Context, in *DeleteViewReq, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.AgentManager/DeleteView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentManagerClient) CreateZone(ctx context.Context, in *CreateZoneReq, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.AgentManager/CreateZone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentManagerClient) UpdateZone(ctx context.Context, in *UpdateZoneReq, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.AgentManager/UpdateZone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentManagerClient) DeleteZone(ctx context.Context, in *DeleteZoneReq, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.AgentManager/DeleteZone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentManagerClient) UpdateRRsByZone(ctx context.Context, in *UpdateRRsByZoneReq, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.AgentManager/UpdateRRsByZone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentManagerClient) CreateForwardZone(ctx context.Context, in *CreateForwardZoneReq, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.AgentManager/CreateForwardZone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentManagerClient) UpdateForwardZone(ctx context.Context, in *UpdateForwardZoneReq, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.AgentManager/UpdateForwardZone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentManagerClient) DeleteForwardZone(ctx context.Context, in *DeleteForwardZoneReq, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.AgentManager/DeleteForwardZone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentManagerClient) CreateRR(ctx context.Context, in *CreateRRReq, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.AgentManager/CreateRR", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentManagerClient) UpdateRR(ctx context.Context, in *UpdateRRReq, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.AgentManager/UpdateRR", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentManagerClient) DeleteRR(ctx context.Context, in *DeleteRRReq, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.AgentManager/DeleteRR", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentManagerClient) CreateForward(ctx context.Context, in *CreateForwardReq, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.AgentManager/CreateForward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentManagerClient) UpdateForward(ctx context.Context, in *UpdateForwardReq, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.AgentManager/UpdateForward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentManagerClient) DeleteForward(ctx context.Context, in *DeleteForwardReq, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.AgentManager/DeleteForward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentManagerClient) CreateRedirection(ctx context.Context, in *CreateRedirectionReq, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.AgentManager/CreateRedirection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentManagerClient) UpdateRedirection(ctx context.Context, in *UpdateRedirectionReq, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.AgentManager/UpdateRedirection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentManagerClient) DeleteRedirection(ctx context.Context, in *DeleteRedirectionReq, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.AgentManager/DeleteRedirection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentManagerClient) CreateIPBlackHole(ctx context.Context, in *CreateIPBlackHoleReq, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.AgentManager/CreateIPBlackHole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentManagerClient) UpdateIPBlackHole(ctx context.Context, in *UpdateIPBlackHoleReq, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.AgentManager/UpdateIPBlackHole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentManagerClient) DeleteIPBlackHole(ctx context.Context, in *DeleteIPBlackHoleReq, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.AgentManager/DeleteIPBlackHole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentManagerClient) UpdateRecursiveConcurrent(ctx context.Context, in *UpdateRecurConcuReq, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.AgentManager/UpdateRecursiveConcurrent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentManagerClient) CreateSortList(ctx context.Context, in *CreateSortListReq, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.AgentManager/CreateSortList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentManagerClient) UpdateSortList(ctx context.Context, in *UpdateSortListReq, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.AgentManager/UpdateSortList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentManagerClient) DeleteSortList(ctx context.Context, in *DeleteSortListReq, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.AgentManager/DeleteSortList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentManagerClient) CreateUrlRedirect(ctx context.Context, in *CreateUrlRedirectReq, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.AgentManager/CreateUrlRedirect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentManagerClient) UpdateUrlRedirect(ctx context.Context, in *UpdateUrlRedirectReq, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.AgentManager/UpdateUrlRedirect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentManagerClient) DeleteUrlRedirect(ctx context.Context, in *DeleteUrlRedirectReq, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.AgentManager/DeleteUrlRedirect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentManagerClient) UpdateGlobalConfig(ctx context.Context, in *UpdateGlobalConfigReq, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.AgentManager/UpdateGlobalConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentManagerServer is the server API for AgentManager service.
type AgentManagerServer interface {
	StartDNS(context.Context, *DNSStartReq) (*DDIResponse, error)
	StopDNS(context.Context, *DNSStopReq) (*DDIResponse, error)
	CreateACL(context.Context, *CreateACLReq) (*DDIResponse, error)
	UpdateACL(context.Context, *UpdateACLReq) (*DDIResponse, error)
	DeleteACL(context.Context, *DeleteACLReq) (*DDIResponse, error)
	CreateView(context.Context, *CreateViewReq) (*DDIResponse, error)
	UpdateView(context.Context, *UpdateViewReq) (*DDIResponse, error)
	DeleteView(context.Context, *DeleteViewReq) (*DDIResponse, error)
	CreateZone(context.Context, *CreateZoneReq) (*DDIResponse, error)
	UpdateZone(context.Context, *UpdateZoneReq) (*DDIResponse, error)
	DeleteZone(context.Context, *DeleteZoneReq) (*DDIResponse, error)
	UpdateRRsByZone(context.Context, *UpdateRRsByZoneReq) (*DDIResponse, error)
	CreateForwardZone(context.Context, *CreateForwardZoneReq) (*DDIResponse, error)
	UpdateForwardZone(context.Context, *UpdateForwardZoneReq) (*DDIResponse, error)
	DeleteForwardZone(context.Context, *DeleteForwardZoneReq) (*DDIResponse, error)
	CreateRR(context.Context, *CreateRRReq) (*DDIResponse, error)
	UpdateRR(context.Context, *UpdateRRReq) (*DDIResponse, error)
	DeleteRR(context.Context, *DeleteRRReq) (*DDIResponse, error)
	CreateForward(context.Context, *CreateForwardReq) (*DDIResponse, error)
	UpdateForward(context.Context, *UpdateForwardReq) (*DDIResponse, error)
	DeleteForward(context.Context, *DeleteForwardReq) (*DDIResponse, error)
	CreateRedirection(context.Context, *CreateRedirectionReq) (*DDIResponse, error)
	UpdateRedirection(context.Context, *UpdateRedirectionReq) (*DDIResponse, error)
	DeleteRedirection(context.Context, *DeleteRedirectionReq) (*DDIResponse, error)
	CreateIPBlackHole(context.Context, *CreateIPBlackHoleReq) (*DDIResponse, error)
	UpdateIPBlackHole(context.Context, *UpdateIPBlackHoleReq) (*DDIResponse, error)
	DeleteIPBlackHole(context.Context, *DeleteIPBlackHoleReq) (*DDIResponse, error)
	UpdateRecursiveConcurrent(context.Context, *UpdateRecurConcuReq) (*DDIResponse, error)
	CreateSortList(context.Context, *CreateSortListReq) (*DDIResponse, error)
	UpdateSortList(context.Context, *UpdateSortListReq) (*DDIResponse, error)
	DeleteSortList(context.Context, *DeleteSortListReq) (*DDIResponse, error)
	CreateUrlRedirect(context.Context, *CreateUrlRedirectReq) (*DDIResponse, error)
	UpdateUrlRedirect(context.Context, *UpdateUrlRedirectReq) (*DDIResponse, error)
	DeleteUrlRedirect(context.Context, *DeleteUrlRedirectReq) (*DDIResponse, error)
	UpdateGlobalConfig(context.Context, *UpdateGlobalConfigReq) (*DDIResponse, error)
}

// UnimplementedAgentManagerServer can be embedded to have forward compatible implementations.
type UnimplementedAgentManagerServer struct {
}

func (*UnimplementedAgentManagerServer) StartDNS(context.Context, *DNSStartReq) (*DDIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartDNS not implemented")
}
func (*UnimplementedAgentManagerServer) StopDNS(context.Context, *DNSStopReq) (*DDIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopDNS not implemented")
}
func (*UnimplementedAgentManagerServer) CreateACL(context.Context, *CreateACLReq) (*DDIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateACL not implemented")
}
func (*UnimplementedAgentManagerServer) UpdateACL(context.Context, *UpdateACLReq) (*DDIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateACL not implemented")
}
func (*UnimplementedAgentManagerServer) DeleteACL(context.Context, *DeleteACLReq) (*DDIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteACL not implemented")
}
func (*UnimplementedAgentManagerServer) CreateView(context.Context, *CreateViewReq) (*DDIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateView not implemented")
}
func (*UnimplementedAgentManagerServer) UpdateView(context.Context, *UpdateViewReq) (*DDIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateView not implemented")
}
func (*UnimplementedAgentManagerServer) DeleteView(context.Context, *DeleteViewReq) (*DDIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteView not implemented")
}
func (*UnimplementedAgentManagerServer) CreateZone(context.Context, *CreateZoneReq) (*DDIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateZone not implemented")
}
func (*UnimplementedAgentManagerServer) UpdateZone(context.Context, *UpdateZoneReq) (*DDIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateZone not implemented")
}
func (*UnimplementedAgentManagerServer) DeleteZone(context.Context, *DeleteZoneReq) (*DDIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteZone not implemented")
}
func (*UnimplementedAgentManagerServer) UpdateRRsByZone(context.Context, *UpdateRRsByZoneReq) (*DDIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRRsByZone not implemented")
}
func (*UnimplementedAgentManagerServer) CreateForwardZone(context.Context, *CreateForwardZoneReq) (*DDIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateForwardZone not implemented")
}
func (*UnimplementedAgentManagerServer) UpdateForwardZone(context.Context, *UpdateForwardZoneReq) (*DDIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateForwardZone not implemented")
}
func (*UnimplementedAgentManagerServer) DeleteForwardZone(context.Context, *DeleteForwardZoneReq) (*DDIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteForwardZone not implemented")
}
func (*UnimplementedAgentManagerServer) CreateRR(context.Context, *CreateRRReq) (*DDIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRR not implemented")
}
func (*UnimplementedAgentManagerServer) UpdateRR(context.Context, *UpdateRRReq) (*DDIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRR not implemented")
}
func (*UnimplementedAgentManagerServer) DeleteRR(context.Context, *DeleteRRReq) (*DDIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRR not implemented")
}
func (*UnimplementedAgentManagerServer) CreateForward(context.Context, *CreateForwardReq) (*DDIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateForward not implemented")
}
func (*UnimplementedAgentManagerServer) UpdateForward(context.Context, *UpdateForwardReq) (*DDIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateForward not implemented")
}
func (*UnimplementedAgentManagerServer) DeleteForward(context.Context, *DeleteForwardReq) (*DDIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteForward not implemented")
}
func (*UnimplementedAgentManagerServer) CreateRedirection(context.Context, *CreateRedirectionReq) (*DDIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRedirection not implemented")
}
func (*UnimplementedAgentManagerServer) UpdateRedirection(context.Context, *UpdateRedirectionReq) (*DDIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRedirection not implemented")
}
func (*UnimplementedAgentManagerServer) DeleteRedirection(context.Context, *DeleteRedirectionReq) (*DDIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRedirection not implemented")
}
func (*UnimplementedAgentManagerServer) CreateIPBlackHole(context.Context, *CreateIPBlackHoleReq) (*DDIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIPBlackHole not implemented")
}
func (*UnimplementedAgentManagerServer) UpdateIPBlackHole(context.Context, *UpdateIPBlackHoleReq) (*DDIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIPBlackHole not implemented")
}
func (*UnimplementedAgentManagerServer) DeleteIPBlackHole(context.Context, *DeleteIPBlackHoleReq) (*DDIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIPBlackHole not implemented")
}
func (*UnimplementedAgentManagerServer) UpdateRecursiveConcurrent(context.Context, *UpdateRecurConcuReq) (*DDIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRecursiveConcurrent not implemented")
}
func (*UnimplementedAgentManagerServer) CreateSortList(context.Context, *CreateSortListReq) (*DDIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSortList not implemented")
}
func (*UnimplementedAgentManagerServer) UpdateSortList(context.Context, *UpdateSortListReq) (*DDIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSortList not implemented")
}
func (*UnimplementedAgentManagerServer) DeleteSortList(context.Context, *DeleteSortListReq) (*DDIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSortList not implemented")
}
func (*UnimplementedAgentManagerServer) CreateUrlRedirect(context.Context, *CreateUrlRedirectReq) (*DDIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUrlRedirect not implemented")
}
func (*UnimplementedAgentManagerServer) UpdateUrlRedirect(context.Context, *UpdateUrlRedirectReq) (*DDIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUrlRedirect not implemented")
}
func (*UnimplementedAgentManagerServer) DeleteUrlRedirect(context.Context, *DeleteUrlRedirectReq) (*DDIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUrlRedirect not implemented")
}
func (*UnimplementedAgentManagerServer) UpdateGlobalConfig(context.Context, *UpdateGlobalConfigReq) (*DDIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGlobalConfig not implemented")
}

func RegisterAgentManagerServer(s *grpc.Server, srv AgentManagerServer) {
	s.RegisterService(&_AgentManager_serviceDesc, srv)
}

func _AgentManager_StartDNS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DNSStartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentManagerServer).StartDNS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AgentManager/StartDNS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentManagerServer).StartDNS(ctx, req.(*DNSStartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentManager_StopDNS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DNSStopReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentManagerServer).StopDNS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AgentManager/StopDNS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentManagerServer).StopDNS(ctx, req.(*DNSStopReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentManager_CreateACL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateACLReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentManagerServer).CreateACL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AgentManager/CreateACL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentManagerServer).CreateACL(ctx, req.(*CreateACLReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentManager_UpdateACL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateACLReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentManagerServer).UpdateACL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AgentManager/UpdateACL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentManagerServer).UpdateACL(ctx, req.(*UpdateACLReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentManager_DeleteACL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteACLReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentManagerServer).DeleteACL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AgentManager/DeleteACL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentManagerServer).DeleteACL(ctx, req.(*DeleteACLReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentManager_CreateView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateViewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentManagerServer).CreateView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AgentManager/CreateView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentManagerServer).CreateView(ctx, req.(*CreateViewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentManager_UpdateView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateViewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentManagerServer).UpdateView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AgentManager/UpdateView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentManagerServer).UpdateView(ctx, req.(*UpdateViewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentManager_DeleteView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteViewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentManagerServer).DeleteView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AgentManager/DeleteView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentManagerServer).DeleteView(ctx, req.(*DeleteViewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentManager_CreateZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateZoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentManagerServer).CreateZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AgentManager/CreateZone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentManagerServer).CreateZone(ctx, req.(*CreateZoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentManager_UpdateZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateZoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentManagerServer).UpdateZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AgentManager/UpdateZone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentManagerServer).UpdateZone(ctx, req.(*UpdateZoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentManager_DeleteZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteZoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentManagerServer).DeleteZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AgentManager/DeleteZone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentManagerServer).DeleteZone(ctx, req.(*DeleteZoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentManager_UpdateRRsByZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRRsByZoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentManagerServer).UpdateRRsByZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AgentManager/UpdateRRsByZone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentManagerServer).UpdateRRsByZone(ctx, req.(*UpdateRRsByZoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentManager_CreateForwardZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateForwardZoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentManagerServer).CreateForwardZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AgentManager/CreateForwardZone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentManagerServer).CreateForwardZone(ctx, req.(*CreateForwardZoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentManager_UpdateForwardZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateForwardZoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentManagerServer).UpdateForwardZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AgentManager/UpdateForwardZone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentManagerServer).UpdateForwardZone(ctx, req.(*UpdateForwardZoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentManager_DeleteForwardZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteForwardZoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentManagerServer).DeleteForwardZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AgentManager/DeleteForwardZone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentManagerServer).DeleteForwardZone(ctx, req.(*DeleteForwardZoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentManager_CreateRR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRRReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentManagerServer).CreateRR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AgentManager/CreateRR",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentManagerServer).CreateRR(ctx, req.(*CreateRRReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentManager_UpdateRR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRRReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentManagerServer).UpdateRR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AgentManager/UpdateRR",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentManagerServer).UpdateRR(ctx, req.(*UpdateRRReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentManager_DeleteRR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRRReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentManagerServer).DeleteRR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AgentManager/DeleteRR",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentManagerServer).DeleteRR(ctx, req.(*DeleteRRReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentManager_CreateForward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateForwardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentManagerServer).CreateForward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AgentManager/CreateForward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentManagerServer).CreateForward(ctx, req.(*CreateForwardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentManager_UpdateForward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateForwardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentManagerServer).UpdateForward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AgentManager/UpdateForward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentManagerServer).UpdateForward(ctx, req.(*UpdateForwardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentManager_DeleteForward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteForwardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentManagerServer).DeleteForward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AgentManager/DeleteForward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentManagerServer).DeleteForward(ctx, req.(*DeleteForwardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentManager_CreateRedirection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRedirectionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentManagerServer).CreateRedirection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AgentManager/CreateRedirection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentManagerServer).CreateRedirection(ctx, req.(*CreateRedirectionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentManager_UpdateRedirection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRedirectionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentManagerServer).UpdateRedirection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AgentManager/UpdateRedirection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentManagerServer).UpdateRedirection(ctx, req.(*UpdateRedirectionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentManager_DeleteRedirection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRedirectionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentManagerServer).DeleteRedirection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AgentManager/DeleteRedirection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentManagerServer).DeleteRedirection(ctx, req.(*DeleteRedirectionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentManager_CreateIPBlackHole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIPBlackHoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentManagerServer).CreateIPBlackHole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AgentManager/CreateIPBlackHole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentManagerServer).CreateIPBlackHole(ctx, req.(*CreateIPBlackHoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentManager_UpdateIPBlackHole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIPBlackHoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentManagerServer).UpdateIPBlackHole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AgentManager/UpdateIPBlackHole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentManagerServer).UpdateIPBlackHole(ctx, req.(*UpdateIPBlackHoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentManager_DeleteIPBlackHole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIPBlackHoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentManagerServer).DeleteIPBlackHole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AgentManager/DeleteIPBlackHole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentManagerServer).DeleteIPBlackHole(ctx, req.(*DeleteIPBlackHoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentManager_UpdateRecursiveConcurrent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRecurConcuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentManagerServer).UpdateRecursiveConcurrent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AgentManager/UpdateRecursiveConcurrent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentManagerServer).UpdateRecursiveConcurrent(ctx, req.(*UpdateRecurConcuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentManager_CreateSortList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSortListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentManagerServer).CreateSortList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AgentManager/CreateSortList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentManagerServer).CreateSortList(ctx, req.(*CreateSortListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentManager_UpdateSortList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSortListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentManagerServer).UpdateSortList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AgentManager/UpdateSortList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentManagerServer).UpdateSortList(ctx, req.(*UpdateSortListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentManager_DeleteSortList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSortListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentManagerServer).DeleteSortList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AgentManager/DeleteSortList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentManagerServer).DeleteSortList(ctx, req.(*DeleteSortListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentManager_CreateUrlRedirect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUrlRedirectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentManagerServer).CreateUrlRedirect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AgentManager/CreateUrlRedirect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentManagerServer).CreateUrlRedirect(ctx, req.(*CreateUrlRedirectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentManager_UpdateUrlRedirect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUrlRedirectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentManagerServer).UpdateUrlRedirect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AgentManager/UpdateUrlRedirect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentManagerServer).UpdateUrlRedirect(ctx, req.(*UpdateUrlRedirectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentManager_DeleteUrlRedirect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUrlRedirectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentManagerServer).DeleteUrlRedirect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AgentManager/DeleteUrlRedirect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentManagerServer).DeleteUrlRedirect(ctx, req.(*DeleteUrlRedirectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentManager_UpdateGlobalConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGlobalConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentManagerServer).UpdateGlobalConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AgentManager/UpdateGlobalConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentManagerServer).UpdateGlobalConfig(ctx, req.(*UpdateGlobalConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _AgentManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AgentManager",
	HandlerType: (*AgentManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartDNS",
			Handler:    _AgentManager_StartDNS_Handler,
		},
		{
			MethodName: "StopDNS",
			Handler:    _AgentManager_StopDNS_Handler,
		},
		{
			MethodName: "CreateACL",
			Handler:    _AgentManager_CreateACL_Handler,
		},
		{
			MethodName: "UpdateACL",
			Handler:    _AgentManager_UpdateACL_Handler,
		},
		{
			MethodName: "DeleteACL",
			Handler:    _AgentManager_DeleteACL_Handler,
		},
		{
			MethodName: "CreateView",
			Handler:    _AgentManager_CreateView_Handler,
		},
		{
			MethodName: "UpdateView",
			Handler:    _AgentManager_UpdateView_Handler,
		},
		{
			MethodName: "DeleteView",
			Handler:    _AgentManager_DeleteView_Handler,
		},
		{
			MethodName: "CreateZone",
			Handler:    _AgentManager_CreateZone_Handler,
		},
		{
			MethodName: "UpdateZone",
			Handler:    _AgentManager_UpdateZone_Handler,
		},
		{
			MethodName: "DeleteZone",
			Handler:    _AgentManager_DeleteZone_Handler,
		},
		{
			MethodName: "UpdateRRsByZone",
			Handler:    _AgentManager_UpdateRRsByZone_Handler,
		},
		{
			MethodName: "CreateForwardZone",
			Handler:    _AgentManager_CreateForwardZone_Handler,
		},
		{
			MethodName: "UpdateForwardZone",
			Handler:    _AgentManager_UpdateForwardZone_Handler,
		},
		{
			MethodName: "DeleteForwardZone",
			Handler:    _AgentManager_DeleteForwardZone_Handler,
		},
		{
			MethodName: "CreateRR",
			Handler:    _AgentManager_CreateRR_Handler,
		},
		{
			MethodName: "UpdateRR",
			Handler:    _AgentManager_UpdateRR_Handler,
		},
		{
			MethodName: "DeleteRR",
			Handler:    _AgentManager_DeleteRR_Handler,
		},
		{
			MethodName: "CreateForward",
			Handler:    _AgentManager_CreateForward_Handler,
		},
		{
			MethodName: "UpdateForward",
			Handler:    _AgentManager_UpdateForward_Handler,
		},
		{
			MethodName: "DeleteForward",
			Handler:    _AgentManager_DeleteForward_Handler,
		},
		{
			MethodName: "CreateRedirection",
			Handler:    _AgentManager_CreateRedirection_Handler,
		},
		{
			MethodName: "UpdateRedirection",
			Handler:    _AgentManager_UpdateRedirection_Handler,
		},
		{
			MethodName: "DeleteRedirection",
			Handler:    _AgentManager_DeleteRedirection_Handler,
		},
		{
			MethodName: "CreateIPBlackHole",
			Handler:    _AgentManager_CreateIPBlackHole_Handler,
		},
		{
			MethodName: "UpdateIPBlackHole",
			Handler:    _AgentManager_UpdateIPBlackHole_Handler,
		},
		{
			MethodName: "DeleteIPBlackHole",
			Handler:    _AgentManager_DeleteIPBlackHole_Handler,
		},
		{
			MethodName: "UpdateRecursiveConcurrent",
			Handler:    _AgentManager_UpdateRecursiveConcurrent_Handler,
		},
		{
			MethodName: "CreateSortList",
			Handler:    _AgentManager_CreateSortList_Handler,
		},
		{
			MethodName: "UpdateSortList",
			Handler:    _AgentManager_UpdateSortList_Handler,
		},
		{
			MethodName: "DeleteSortList",
			Handler:    _AgentManager_DeleteSortList_Handler,
		},
		{
			MethodName: "CreateUrlRedirect",
			Handler:    _AgentManager_CreateUrlRedirect_Handler,
		},
		{
			MethodName: "UpdateUrlRedirect",
			Handler:    _AgentManager_UpdateUrlRedirect_Handler,
		},
		{
			MethodName: "DeleteUrlRedirect",
			Handler:    _AgentManager_DeleteUrlRedirect_Handler,
		},
		{
			MethodName: "UpdateGlobalConfig",
			Handler:    _AgentManager_UpdateGlobalConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dns.proto",
}
