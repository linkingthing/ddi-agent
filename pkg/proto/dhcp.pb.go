// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.6.1
// source: dhcp.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type DHCPLease_LeaseType int32

const (
	DHCPLease_TYPE_NA DHCPLease_LeaseType = 0
	DHCPLease_TYPE_TA DHCPLease_LeaseType = 1
	DHCPLease_TYPE_PD DHCPLease_LeaseType = 2
	DHCPLease_TYPE_V4 DHCPLease_LeaseType = 3
)

// Enum value maps for DHCPLease_LeaseType.
var (
	DHCPLease_LeaseType_name = map[int32]string{
		0: "TYPE_NA",
		1: "TYPE_TA",
		2: "TYPE_PD",
		3: "TYPE_V4",
	}
	DHCPLease_LeaseType_value = map[string]int32{
		"TYPE_NA": 0,
		"TYPE_TA": 1,
		"TYPE_PD": 2,
		"TYPE_V4": 3,
	}
)

func (x DHCPLease_LeaseType) Enum() *DHCPLease_LeaseType {
	p := new(DHCPLease_LeaseType)
	*p = x
	return p
}

func (x DHCPLease_LeaseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DHCPLease_LeaseType) Descriptor() protoreflect.EnumDescriptor {
	return file_dhcp_proto_enumTypes[0].Descriptor()
}

func (DHCPLease_LeaseType) Type() protoreflect.EnumType {
	return &file_dhcp_proto_enumTypes[0]
}

func (x DHCPLease_LeaseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DHCPLease_LeaseType.Descriptor instead.
func (DHCPLease_LeaseType) EnumDescriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{34, 0}
}

type CreateSubnet4Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Ipnet               string   `protobuf:"bytes,2,opt,name=ipnet,proto3" json:"ipnet,omitempty"`
	ValidLifetime       uint32   `protobuf:"varint,3,opt,name=valid_lifetime,json=validLifetime,proto3" json:"valid_lifetime,omitempty"`
	MaxValidLifetime    uint32   `protobuf:"varint,4,opt,name=max_valid_lifetime,json=maxValidLifetime,proto3" json:"max_valid_lifetime,omitempty"`
	MinValidLifetime    uint32   `protobuf:"varint,5,opt,name=min_valid_lifetime,json=minValidLifetime,proto3" json:"min_valid_lifetime,omitempty"`
	DomainServers       []string `protobuf:"bytes,6,rep,name=domain_servers,json=domainServers,proto3" json:"domain_servers,omitempty"`
	Routers             []string `protobuf:"bytes,7,rep,name=routers,proto3" json:"routers,omitempty"`
	ClientClass         string   `protobuf:"bytes,8,opt,name=client_class,json=clientClass,proto3" json:"client_class,omitempty"`
	RelayAgentAddresses []string `protobuf:"bytes,9,rep,name=relay_agent_addresses,json=relayAgentAddresses,proto3" json:"relay_agent_addresses,omitempty"`
}

func (x *CreateSubnet4Request) Reset() {
	*x = CreateSubnet4Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSubnet4Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSubnet4Request) ProtoMessage() {}

func (x *CreateSubnet4Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSubnet4Request.ProtoReflect.Descriptor instead.
func (*CreateSubnet4Request) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{0}
}

func (x *CreateSubnet4Request) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreateSubnet4Request) GetIpnet() string {
	if x != nil {
		return x.Ipnet
	}
	return ""
}

func (x *CreateSubnet4Request) GetValidLifetime() uint32 {
	if x != nil {
		return x.ValidLifetime
	}
	return 0
}

func (x *CreateSubnet4Request) GetMaxValidLifetime() uint32 {
	if x != nil {
		return x.MaxValidLifetime
	}
	return 0
}

func (x *CreateSubnet4Request) GetMinValidLifetime() uint32 {
	if x != nil {
		return x.MinValidLifetime
	}
	return 0
}

func (x *CreateSubnet4Request) GetDomainServers() []string {
	if x != nil {
		return x.DomainServers
	}
	return nil
}

func (x *CreateSubnet4Request) GetRouters() []string {
	if x != nil {
		return x.Routers
	}
	return nil
}

func (x *CreateSubnet4Request) GetClientClass() string {
	if x != nil {
		return x.ClientClass
	}
	return ""
}

func (x *CreateSubnet4Request) GetRelayAgentAddresses() []string {
	if x != nil {
		return x.RelayAgentAddresses
	}
	return nil
}

type DeleteSubnet4Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteSubnet4Request) Reset() {
	*x = DeleteSubnet4Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSubnet4Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubnet4Request) ProtoMessage() {}

func (x *DeleteSubnet4Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubnet4Request.ProtoReflect.Descriptor instead.
func (*DeleteSubnet4Request) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{1}
}

func (x *DeleteSubnet4Request) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type UpdateSubnet4Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ValidLifetime       uint32   `protobuf:"varint,2,opt,name=valid_lifetime,json=validLifetime,proto3" json:"valid_lifetime,omitempty"`
	MaxValidLifetime    uint32   `protobuf:"varint,3,opt,name=max_valid_lifetime,json=maxValidLifetime,proto3" json:"max_valid_lifetime,omitempty"`
	MinValidLifetime    uint32   `protobuf:"varint,4,opt,name=min_valid_lifetime,json=minValidLifetime,proto3" json:"min_valid_lifetime,omitempty"`
	DomainServers       []string `protobuf:"bytes,5,rep,name=domain_servers,json=domainServers,proto3" json:"domain_servers,omitempty"`
	Routers             []string `protobuf:"bytes,6,rep,name=routers,proto3" json:"routers,omitempty"`
	ClientClass         string   `protobuf:"bytes,7,opt,name=client_class,json=clientClass,proto3" json:"client_class,omitempty"`
	RelayAgentAddresses []string `protobuf:"bytes,8,rep,name=relay_agent_addresses,json=relayAgentAddresses,proto3" json:"relay_agent_addresses,omitempty"`
}

func (x *UpdateSubnet4Request) Reset() {
	*x = UpdateSubnet4Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSubnet4Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubnet4Request) ProtoMessage() {}

func (x *UpdateSubnet4Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubnet4Request.ProtoReflect.Descriptor instead.
func (*UpdateSubnet4Request) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateSubnet4Request) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateSubnet4Request) GetValidLifetime() uint32 {
	if x != nil {
		return x.ValidLifetime
	}
	return 0
}

func (x *UpdateSubnet4Request) GetMaxValidLifetime() uint32 {
	if x != nil {
		return x.MaxValidLifetime
	}
	return 0
}

func (x *UpdateSubnet4Request) GetMinValidLifetime() uint32 {
	if x != nil {
		return x.MinValidLifetime
	}
	return 0
}

func (x *UpdateSubnet4Request) GetDomainServers() []string {
	if x != nil {
		return x.DomainServers
	}
	return nil
}

func (x *UpdateSubnet4Request) GetRouters() []string {
	if x != nil {
		return x.Routers
	}
	return nil
}

func (x *UpdateSubnet4Request) GetClientClass() string {
	if x != nil {
		return x.ClientClass
	}
	return ""
}

func (x *UpdateSubnet4Request) GetRelayAgentAddresses() []string {
	if x != nil {
		return x.RelayAgentAddresses
	}
	return nil
}

type CreateSubnet6Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Ipnet               string   `protobuf:"bytes,2,opt,name=ipnet,proto3" json:"ipnet,omitempty"`
	ValidLifetime       uint32   `protobuf:"varint,3,opt,name=valid_lifetime,json=validLifetime,proto3" json:"valid_lifetime,omitempty"`
	MaxValidLifetime    uint32   `protobuf:"varint,4,opt,name=max_valid_lifetime,json=maxValidLifetime,proto3" json:"max_valid_lifetime,omitempty"`
	MinValidLifetime    uint32   `protobuf:"varint,5,opt,name=min_valid_lifetime,json=minValidLifetime,proto3" json:"min_valid_lifetime,omitempty"`
	DnsServers          []string `protobuf:"bytes,6,rep,name=dns_servers,json=dnsServers,proto3" json:"dns_servers,omitempty"`
	ClientClass         string   `protobuf:"bytes,7,opt,name=client_class,json=clientClass,proto3" json:"client_class,omitempty"`
	RelayAgentAddresses []string `protobuf:"bytes,8,rep,name=relay_agent_addresses,json=relayAgentAddresses,proto3" json:"relay_agent_addresses,omitempty"`
}

func (x *CreateSubnet6Request) Reset() {
	*x = CreateSubnet6Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSubnet6Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSubnet6Request) ProtoMessage() {}

func (x *CreateSubnet6Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSubnet6Request.ProtoReflect.Descriptor instead.
func (*CreateSubnet6Request) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{3}
}

func (x *CreateSubnet6Request) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreateSubnet6Request) GetIpnet() string {
	if x != nil {
		return x.Ipnet
	}
	return ""
}

func (x *CreateSubnet6Request) GetValidLifetime() uint32 {
	if x != nil {
		return x.ValidLifetime
	}
	return 0
}

func (x *CreateSubnet6Request) GetMaxValidLifetime() uint32 {
	if x != nil {
		return x.MaxValidLifetime
	}
	return 0
}

func (x *CreateSubnet6Request) GetMinValidLifetime() uint32 {
	if x != nil {
		return x.MinValidLifetime
	}
	return 0
}

func (x *CreateSubnet6Request) GetDnsServers() []string {
	if x != nil {
		return x.DnsServers
	}
	return nil
}

func (x *CreateSubnet6Request) GetClientClass() string {
	if x != nil {
		return x.ClientClass
	}
	return ""
}

func (x *CreateSubnet6Request) GetRelayAgentAddresses() []string {
	if x != nil {
		return x.RelayAgentAddresses
	}
	return nil
}

type DeleteSubnet6Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteSubnet6Request) Reset() {
	*x = DeleteSubnet6Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSubnet6Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubnet6Request) ProtoMessage() {}

func (x *DeleteSubnet6Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubnet6Request.ProtoReflect.Descriptor instead.
func (*DeleteSubnet6Request) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteSubnet6Request) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type UpdateSubnet6Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ValidLifetime       uint32   `protobuf:"varint,2,opt,name=valid_lifetime,json=validLifetime,proto3" json:"valid_lifetime,omitempty"`
	MaxValidLifetime    uint32   `protobuf:"varint,3,opt,name=max_valid_lifetime,json=maxValidLifetime,proto3" json:"max_valid_lifetime,omitempty"`
	MinValidLifetime    uint32   `protobuf:"varint,4,opt,name=min_valid_lifetime,json=minValidLifetime,proto3" json:"min_valid_lifetime,omitempty"`
	DnsServers          []string `protobuf:"bytes,5,rep,name=dns_servers,json=dnsServers,proto3" json:"dns_servers,omitempty"`
	ClientClass         string   `protobuf:"bytes,6,opt,name=client_class,json=clientClass,proto3" json:"client_class,omitempty"`
	RelayAgentAddresses []string `protobuf:"bytes,7,rep,name=relay_agent_addresses,json=relayAgentAddresses,proto3" json:"relay_agent_addresses,omitempty"`
}

func (x *UpdateSubnet6Request) Reset() {
	*x = UpdateSubnet6Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSubnet6Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubnet6Request) ProtoMessage() {}

func (x *UpdateSubnet6Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubnet6Request.ProtoReflect.Descriptor instead.
func (*UpdateSubnet6Request) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateSubnet6Request) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateSubnet6Request) GetValidLifetime() uint32 {
	if x != nil {
		return x.ValidLifetime
	}
	return 0
}

func (x *UpdateSubnet6Request) GetMaxValidLifetime() uint32 {
	if x != nil {
		return x.MaxValidLifetime
	}
	return 0
}

func (x *UpdateSubnet6Request) GetMinValidLifetime() uint32 {
	if x != nil {
		return x.MinValidLifetime
	}
	return 0
}

func (x *UpdateSubnet6Request) GetDnsServers() []string {
	if x != nil {
		return x.DnsServers
	}
	return nil
}

func (x *UpdateSubnet6Request) GetClientClass() string {
	if x != nil {
		return x.ClientClass
	}
	return ""
}

func (x *UpdateSubnet6Request) GetRelayAgentAddresses() []string {
	if x != nil {
		return x.RelayAgentAddresses
	}
	return nil
}

type CreatePool4Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId      uint32   `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	BeginAddress  string   `protobuf:"bytes,2,opt,name=begin_address,json=beginAddress,proto3" json:"begin_address,omitempty"`
	EndAddress    string   `protobuf:"bytes,3,opt,name=end_address,json=endAddress,proto3" json:"end_address,omitempty"`
	DomainServers []string `protobuf:"bytes,4,rep,name=domain_servers,json=domainServers,proto3" json:"domain_servers,omitempty"`
	Routers       []string `protobuf:"bytes,5,rep,name=routers,proto3" json:"routers,omitempty"`
	ClientClass   string   `protobuf:"bytes,6,opt,name=client_class,json=clientClass,proto3" json:"client_class,omitempty"`
}

func (x *CreatePool4Request) Reset() {
	*x = CreatePool4Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePool4Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePool4Request) ProtoMessage() {}

func (x *CreatePool4Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePool4Request.ProtoReflect.Descriptor instead.
func (*CreatePool4Request) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{6}
}

func (x *CreatePool4Request) GetSubnetId() uint32 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *CreatePool4Request) GetBeginAddress() string {
	if x != nil {
		return x.BeginAddress
	}
	return ""
}

func (x *CreatePool4Request) GetEndAddress() string {
	if x != nil {
		return x.EndAddress
	}
	return ""
}

func (x *CreatePool4Request) GetDomainServers() []string {
	if x != nil {
		return x.DomainServers
	}
	return nil
}

func (x *CreatePool4Request) GetRouters() []string {
	if x != nil {
		return x.Routers
	}
	return nil
}

func (x *CreatePool4Request) GetClientClass() string {
	if x != nil {
		return x.ClientClass
	}
	return ""
}

type DeletePool4Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId     uint32 `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	BeginAddress string `protobuf:"bytes,2,opt,name=begin_address,json=beginAddress,proto3" json:"begin_address,omitempty"`
	EndAddress   string `protobuf:"bytes,3,opt,name=end_address,json=endAddress,proto3" json:"end_address,omitempty"`
}

func (x *DeletePool4Request) Reset() {
	*x = DeletePool4Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePool4Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePool4Request) ProtoMessage() {}

func (x *DeletePool4Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePool4Request.ProtoReflect.Descriptor instead.
func (*DeletePool4Request) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{7}
}

func (x *DeletePool4Request) GetSubnetId() uint32 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *DeletePool4Request) GetBeginAddress() string {
	if x != nil {
		return x.BeginAddress
	}
	return ""
}

func (x *DeletePool4Request) GetEndAddress() string {
	if x != nil {
		return x.EndAddress
	}
	return ""
}

type UpdatePool4Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId      uint32   `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	BeginAddress  string   `protobuf:"bytes,2,opt,name=begin_address,json=beginAddress,proto3" json:"begin_address,omitempty"`
	EndAddress    string   `protobuf:"bytes,3,opt,name=end_address,json=endAddress,proto3" json:"end_address,omitempty"`
	DomainServers []string `protobuf:"bytes,4,rep,name=domain_servers,json=domainServers,proto3" json:"domain_servers,omitempty"`
	Routers       []string `protobuf:"bytes,5,rep,name=routers,proto3" json:"routers,omitempty"`
	ClientClass   string   `protobuf:"bytes,6,opt,name=client_class,json=clientClass,proto3" json:"client_class,omitempty"`
}

func (x *UpdatePool4Request) Reset() {
	*x = UpdatePool4Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePool4Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePool4Request) ProtoMessage() {}

func (x *UpdatePool4Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePool4Request.ProtoReflect.Descriptor instead.
func (*UpdatePool4Request) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{8}
}

func (x *UpdatePool4Request) GetSubnetId() uint32 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *UpdatePool4Request) GetBeginAddress() string {
	if x != nil {
		return x.BeginAddress
	}
	return ""
}

func (x *UpdatePool4Request) GetEndAddress() string {
	if x != nil {
		return x.EndAddress
	}
	return ""
}

func (x *UpdatePool4Request) GetDomainServers() []string {
	if x != nil {
		return x.DomainServers
	}
	return nil
}

func (x *UpdatePool4Request) GetRouters() []string {
	if x != nil {
		return x.Routers
	}
	return nil
}

func (x *UpdatePool4Request) GetClientClass() string {
	if x != nil {
		return x.ClientClass
	}
	return ""
}

type CreatePool6Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId     uint32   `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	BeginAddress string   `protobuf:"bytes,2,opt,name=begin_address,json=beginAddress,proto3" json:"begin_address,omitempty"`
	EndAddress   string   `protobuf:"bytes,3,opt,name=end_address,json=endAddress,proto3" json:"end_address,omitempty"`
	DnsServers   []string `protobuf:"bytes,4,rep,name=dns_servers,json=dnsServers,proto3" json:"dns_servers,omitempty"`
	ClientClass  string   `protobuf:"bytes,5,opt,name=client_class,json=clientClass,proto3" json:"client_class,omitempty"`
}

func (x *CreatePool6Request) Reset() {
	*x = CreatePool6Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePool6Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePool6Request) ProtoMessage() {}

func (x *CreatePool6Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePool6Request.ProtoReflect.Descriptor instead.
func (*CreatePool6Request) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{9}
}

func (x *CreatePool6Request) GetSubnetId() uint32 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *CreatePool6Request) GetBeginAddress() string {
	if x != nil {
		return x.BeginAddress
	}
	return ""
}

func (x *CreatePool6Request) GetEndAddress() string {
	if x != nil {
		return x.EndAddress
	}
	return ""
}

func (x *CreatePool6Request) GetDnsServers() []string {
	if x != nil {
		return x.DnsServers
	}
	return nil
}

func (x *CreatePool6Request) GetClientClass() string {
	if x != nil {
		return x.ClientClass
	}
	return ""
}

type DeletePool6Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId     uint32 `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	BeginAddress string `protobuf:"bytes,2,opt,name=begin_address,json=beginAddress,proto3" json:"begin_address,omitempty"`
	EndAddress   string `protobuf:"bytes,3,opt,name=end_address,json=endAddress,proto3" json:"end_address,omitempty"`
}

func (x *DeletePool6Request) Reset() {
	*x = DeletePool6Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePool6Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePool6Request) ProtoMessage() {}

func (x *DeletePool6Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePool6Request.ProtoReflect.Descriptor instead.
func (*DeletePool6Request) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{10}
}

func (x *DeletePool6Request) GetSubnetId() uint32 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *DeletePool6Request) GetBeginAddress() string {
	if x != nil {
		return x.BeginAddress
	}
	return ""
}

func (x *DeletePool6Request) GetEndAddress() string {
	if x != nil {
		return x.EndAddress
	}
	return ""
}

type UpdatePool6Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId     uint32   `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	BeginAddress string   `protobuf:"bytes,2,opt,name=begin_address,json=beginAddress,proto3" json:"begin_address,omitempty"`
	EndAddress   string   `protobuf:"bytes,3,opt,name=end_address,json=endAddress,proto3" json:"end_address,omitempty"`
	DnsServers   []string `protobuf:"bytes,4,rep,name=dns_servers,json=dnsServers,proto3" json:"dns_servers,omitempty"`
	ClientClass  string   `protobuf:"bytes,5,opt,name=client_class,json=clientClass,proto3" json:"client_class,omitempty"`
}

func (x *UpdatePool6Request) Reset() {
	*x = UpdatePool6Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePool6Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePool6Request) ProtoMessage() {}

func (x *UpdatePool6Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePool6Request.ProtoReflect.Descriptor instead.
func (*UpdatePool6Request) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{11}
}

func (x *UpdatePool6Request) GetSubnetId() uint32 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *UpdatePool6Request) GetBeginAddress() string {
	if x != nil {
		return x.BeginAddress
	}
	return ""
}

func (x *UpdatePool6Request) GetEndAddress() string {
	if x != nil {
		return x.EndAddress
	}
	return ""
}

func (x *UpdatePool6Request) GetDnsServers() []string {
	if x != nil {
		return x.DnsServers
	}
	return nil
}

func (x *UpdatePool6Request) GetClientClass() string {
	if x != nil {
		return x.ClientClass
	}
	return ""
}

type CreateReservation4Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId      uint32   `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	HwAddress     string   `protobuf:"bytes,2,opt,name=hw_address,json=hwAddress,proto3" json:"hw_address,omitempty"`
	IpAddress     string   `protobuf:"bytes,3,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	DomainServers []string `protobuf:"bytes,4,rep,name=domain_servers,json=domainServers,proto3" json:"domain_servers,omitempty"`
	Routers       []string `protobuf:"bytes,5,rep,name=routers,proto3" json:"routers,omitempty"`
}

func (x *CreateReservation4Request) Reset() {
	*x = CreateReservation4Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReservation4Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReservation4Request) ProtoMessage() {}

func (x *CreateReservation4Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReservation4Request.ProtoReflect.Descriptor instead.
func (*CreateReservation4Request) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{12}
}

func (x *CreateReservation4Request) GetSubnetId() uint32 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *CreateReservation4Request) GetHwAddress() string {
	if x != nil {
		return x.HwAddress
	}
	return ""
}

func (x *CreateReservation4Request) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *CreateReservation4Request) GetDomainServers() []string {
	if x != nil {
		return x.DomainServers
	}
	return nil
}

func (x *CreateReservation4Request) GetRouters() []string {
	if x != nil {
		return x.Routers
	}
	return nil
}

type DeleteReservation4Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId  uint32 `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	HwAddress string `protobuf:"bytes,2,opt,name=hw_address,json=hwAddress,proto3" json:"hw_address,omitempty"`
}

func (x *DeleteReservation4Request) Reset() {
	*x = DeleteReservation4Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteReservation4Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteReservation4Request) ProtoMessage() {}

func (x *DeleteReservation4Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteReservation4Request.ProtoReflect.Descriptor instead.
func (*DeleteReservation4Request) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteReservation4Request) GetSubnetId() uint32 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *DeleteReservation4Request) GetHwAddress() string {
	if x != nil {
		return x.HwAddress
	}
	return ""
}

type UpdateReservation4Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId      uint32   `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	HwAddress     string   `protobuf:"bytes,2,opt,name=hw_address,json=hwAddress,proto3" json:"hw_address,omitempty"`
	DomainServers []string `protobuf:"bytes,3,rep,name=domain_servers,json=domainServers,proto3" json:"domain_servers,omitempty"`
	Routers       []string `protobuf:"bytes,4,rep,name=routers,proto3" json:"routers,omitempty"`
}

func (x *UpdateReservation4Request) Reset() {
	*x = UpdateReservation4Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateReservation4Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateReservation4Request) ProtoMessage() {}

func (x *UpdateReservation4Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateReservation4Request.ProtoReflect.Descriptor instead.
func (*UpdateReservation4Request) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateReservation4Request) GetSubnetId() uint32 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *UpdateReservation4Request) GetHwAddress() string {
	if x != nil {
		return x.HwAddress
	}
	return ""
}

func (x *UpdateReservation4Request) GetDomainServers() []string {
	if x != nil {
		return x.DomainServers
	}
	return nil
}

func (x *UpdateReservation4Request) GetRouters() []string {
	if x != nil {
		return x.Routers
	}
	return nil
}

type CreateReservation6Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId    uint32   `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	HwAddress   string   `protobuf:"bytes,2,opt,name=hw_address,json=hwAddress,proto3" json:"hw_address,omitempty"`
	IpAddresses []string `protobuf:"bytes,3,rep,name=ip_addresses,json=ipAddresses,proto3" json:"ip_addresses,omitempty"`
	DnsServers  []string `protobuf:"bytes,4,rep,name=dns_servers,json=dnsServers,proto3" json:"dns_servers,omitempty"`
}

func (x *CreateReservation6Request) Reset() {
	*x = CreateReservation6Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReservation6Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReservation6Request) ProtoMessage() {}

func (x *CreateReservation6Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReservation6Request.ProtoReflect.Descriptor instead.
func (*CreateReservation6Request) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{15}
}

func (x *CreateReservation6Request) GetSubnetId() uint32 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *CreateReservation6Request) GetHwAddress() string {
	if x != nil {
		return x.HwAddress
	}
	return ""
}

func (x *CreateReservation6Request) GetIpAddresses() []string {
	if x != nil {
		return x.IpAddresses
	}
	return nil
}

func (x *CreateReservation6Request) GetDnsServers() []string {
	if x != nil {
		return x.DnsServers
	}
	return nil
}

type DeleteReservation6Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId  uint32 `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	HwAddress string `protobuf:"bytes,2,opt,name=hw_address,json=hwAddress,proto3" json:"hw_address,omitempty"`
}

func (x *DeleteReservation6Request) Reset() {
	*x = DeleteReservation6Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteReservation6Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteReservation6Request) ProtoMessage() {}

func (x *DeleteReservation6Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteReservation6Request.ProtoReflect.Descriptor instead.
func (*DeleteReservation6Request) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteReservation6Request) GetSubnetId() uint32 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *DeleteReservation6Request) GetHwAddress() string {
	if x != nil {
		return x.HwAddress
	}
	return ""
}

type UpdateReservation6Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId   uint32   `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	HwAddress  string   `protobuf:"bytes,2,opt,name=hw_address,json=hwAddress,proto3" json:"hw_address,omitempty"`
	DnsServers []string `protobuf:"bytes,3,rep,name=dns_servers,json=dnsServers,proto3" json:"dns_servers,omitempty"`
}

func (x *UpdateReservation6Request) Reset() {
	*x = UpdateReservation6Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateReservation6Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateReservation6Request) ProtoMessage() {}

func (x *UpdateReservation6Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateReservation6Request.ProtoReflect.Descriptor instead.
func (*UpdateReservation6Request) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateReservation6Request) GetSubnetId() uint32 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *UpdateReservation6Request) GetHwAddress() string {
	if x != nil {
		return x.HwAddress
	}
	return ""
}

func (x *UpdateReservation6Request) GetDnsServers() []string {
	if x != nil {
		return x.DnsServers
	}
	return nil
}

type CreatePDPoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId     uint32   `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	Prefix       string   `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
	PrefixLen    uint32   `protobuf:"varint,3,opt,name=prefix_len,json=prefixLen,proto3" json:"prefix_len,omitempty"`
	DelegatedLen uint32   `protobuf:"varint,4,opt,name=delegated_len,json=delegatedLen,proto3" json:"delegated_len,omitempty"`
	DnsServers   []string `protobuf:"bytes,5,rep,name=dns_servers,json=dnsServers,proto3" json:"dns_servers,omitempty"`
	ClientClass  string   `protobuf:"bytes,6,opt,name=client_class,json=clientClass,proto3" json:"client_class,omitempty"`
}

func (x *CreatePDPoolRequest) Reset() {
	*x = CreatePDPoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePDPoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePDPoolRequest) ProtoMessage() {}

func (x *CreatePDPoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePDPoolRequest.ProtoReflect.Descriptor instead.
func (*CreatePDPoolRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{18}
}

func (x *CreatePDPoolRequest) GetSubnetId() uint32 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *CreatePDPoolRequest) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *CreatePDPoolRequest) GetPrefixLen() uint32 {
	if x != nil {
		return x.PrefixLen
	}
	return 0
}

func (x *CreatePDPoolRequest) GetDelegatedLen() uint32 {
	if x != nil {
		return x.DelegatedLen
	}
	return 0
}

func (x *CreatePDPoolRequest) GetDnsServers() []string {
	if x != nil {
		return x.DnsServers
	}
	return nil
}

func (x *CreatePDPoolRequest) GetClientClass() string {
	if x != nil {
		return x.ClientClass
	}
	return ""
}

type DeletePDPoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId uint32 `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	Prefix   string `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (x *DeletePDPoolRequest) Reset() {
	*x = DeletePDPoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePDPoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePDPoolRequest) ProtoMessage() {}

func (x *DeletePDPoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePDPoolRequest.ProtoReflect.Descriptor instead.
func (*DeletePDPoolRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{19}
}

func (x *DeletePDPoolRequest) GetSubnetId() uint32 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *DeletePDPoolRequest) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

type UpdatePDPoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId    uint32   `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	Prefix      string   `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
	DnsServers  []string `protobuf:"bytes,3,rep,name=dns_servers,json=dnsServers,proto3" json:"dns_servers,omitempty"`
	ClientClass string   `protobuf:"bytes,4,opt,name=client_class,json=clientClass,proto3" json:"client_class,omitempty"`
}

func (x *UpdatePDPoolRequest) Reset() {
	*x = UpdatePDPoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePDPoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePDPoolRequest) ProtoMessage() {}

func (x *UpdatePDPoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePDPoolRequest.ProtoReflect.Descriptor instead.
func (*UpdatePDPoolRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{20}
}

func (x *UpdatePDPoolRequest) GetSubnetId() uint32 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *UpdatePDPoolRequest) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *UpdatePDPoolRequest) GetDnsServers() []string {
	if x != nil {
		return x.DnsServers
	}
	return nil
}

func (x *UpdatePDPoolRequest) GetClientClass() string {
	if x != nil {
		return x.ClientClass
	}
	return ""
}

type CreateClientClass4Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Regexp string `protobuf:"bytes,2,opt,name=regexp,proto3" json:"regexp,omitempty"`
}

func (x *CreateClientClass4Request) Reset() {
	*x = CreateClientClass4Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateClientClass4Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClientClass4Request) ProtoMessage() {}

func (x *CreateClientClass4Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClientClass4Request.ProtoReflect.Descriptor instead.
func (*CreateClientClass4Request) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{21}
}

func (x *CreateClientClass4Request) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateClientClass4Request) GetRegexp() string {
	if x != nil {
		return x.Regexp
	}
	return ""
}

type DeleteClientClass4Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteClientClass4Request) Reset() {
	*x = DeleteClientClass4Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteClientClass4Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClientClass4Request) ProtoMessage() {}

func (x *DeleteClientClass4Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClientClass4Request.ProtoReflect.Descriptor instead.
func (*DeleteClientClass4Request) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteClientClass4Request) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UpdateClientClass4Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Regexp string `protobuf:"bytes,2,opt,name=regexp,proto3" json:"regexp,omitempty"`
}

func (x *UpdateClientClass4Request) Reset() {
	*x = UpdateClientClass4Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateClientClass4Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClientClass4Request) ProtoMessage() {}

func (x *UpdateClientClass4Request) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClientClass4Request.ProtoReflect.Descriptor instead.
func (*UpdateClientClass4Request) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{23}
}

func (x *UpdateClientClass4Request) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateClientClass4Request) GetRegexp() string {
	if x != nil {
		return x.Regexp
	}
	return ""
}

type UpdateGlobalConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValidLifetime    uint32   `protobuf:"varint,1,opt,name=valid_lifetime,json=validLifetime,proto3" json:"valid_lifetime,omitempty"`
	MaxValidLifetime uint32   `protobuf:"varint,2,opt,name=max_valid_lifetime,json=maxValidLifetime,proto3" json:"max_valid_lifetime,omitempty"`
	MinValidLifetime uint32   `protobuf:"varint,3,opt,name=min_valid_lifetime,json=minValidLifetime,proto3" json:"min_valid_lifetime,omitempty"`
	DomainServers    []string `protobuf:"bytes,4,rep,name=domain_servers,json=domainServers,proto3" json:"domain_servers,omitempty"`
}

func (x *UpdateGlobalConfigRequest) Reset() {
	*x = UpdateGlobalConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGlobalConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGlobalConfigRequest) ProtoMessage() {}

func (x *UpdateGlobalConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGlobalConfigRequest.ProtoReflect.Descriptor instead.
func (*UpdateGlobalConfigRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{24}
}

func (x *UpdateGlobalConfigRequest) GetValidLifetime() uint32 {
	if x != nil {
		return x.ValidLifetime
	}
	return 0
}

func (x *UpdateGlobalConfigRequest) GetMaxValidLifetime() uint32 {
	if x != nil {
		return x.MaxValidLifetime
	}
	return 0
}

func (x *UpdateGlobalConfigRequest) GetMinValidLifetime() uint32 {
	if x != nil {
		return x.MinValidLifetime
	}
	return 0
}

func (x *UpdateGlobalConfigRequest) GetDomainServers() []string {
	if x != nil {
		return x.DomainServers
	}
	return nil
}

type GetSubnet4LeasesCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetSubnet4LeasesCountRequest) Reset() {
	*x = GetSubnet4LeasesCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnet4LeasesCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnet4LeasesCountRequest) ProtoMessage() {}

func (x *GetSubnet4LeasesCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnet4LeasesCountRequest.ProtoReflect.Descriptor instead.
func (*GetSubnet4LeasesCountRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{25}
}

func (x *GetSubnet4LeasesCountRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetPool4LeasesCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId     uint32 `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	BeginAddress string `protobuf:"bytes,2,opt,name=begin_address,json=beginAddress,proto3" json:"begin_address,omitempty"`
	EndAddress   string `protobuf:"bytes,3,opt,name=end_address,json=endAddress,proto3" json:"end_address,omitempty"`
}

func (x *GetPool4LeasesCountRequest) Reset() {
	*x = GetPool4LeasesCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPool4LeasesCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPool4LeasesCountRequest) ProtoMessage() {}

func (x *GetPool4LeasesCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPool4LeasesCountRequest.ProtoReflect.Descriptor instead.
func (*GetPool4LeasesCountRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{26}
}

func (x *GetPool4LeasesCountRequest) GetSubnetId() uint32 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *GetPool4LeasesCountRequest) GetBeginAddress() string {
	if x != nil {
		return x.BeginAddress
	}
	return ""
}

func (x *GetPool4LeasesCountRequest) GetEndAddress() string {
	if x != nil {
		return x.EndAddress
	}
	return ""
}

type GetReservation4LeasesCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId  uint32 `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	HwAddress string `protobuf:"bytes,2,opt,name=hw_address,json=hwAddress,proto3" json:"hw_address,omitempty"`
}

func (x *GetReservation4LeasesCountRequest) Reset() {
	*x = GetReservation4LeasesCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReservation4LeasesCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReservation4LeasesCountRequest) ProtoMessage() {}

func (x *GetReservation4LeasesCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReservation4LeasesCountRequest.ProtoReflect.Descriptor instead.
func (*GetReservation4LeasesCountRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{27}
}

func (x *GetReservation4LeasesCountRequest) GetSubnetId() uint32 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *GetReservation4LeasesCountRequest) GetHwAddress() string {
	if x != nil {
		return x.HwAddress
	}
	return ""
}

type GetLeasesCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Succeed     bool   `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
	LeasesCount uint64 `protobuf:"varint,2,opt,name=leases_count,json=leasesCount,proto3" json:"leases_count,omitempty"`
}

func (x *GetLeasesCountResponse) Reset() {
	*x = GetLeasesCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLeasesCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLeasesCountResponse) ProtoMessage() {}

func (x *GetLeasesCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLeasesCountResponse.ProtoReflect.Descriptor instead.
func (*GetLeasesCountResponse) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{28}
}

func (x *GetLeasesCountResponse) GetSucceed() bool {
	if x != nil {
		return x.Succeed
	}
	return false
}

func (x *GetLeasesCountResponse) GetLeasesCount() uint64 {
	if x != nil {
		return x.LeasesCount
	}
	return 0
}

type GetSubnet6LeasesCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetSubnet6LeasesCountRequest) Reset() {
	*x = GetSubnet6LeasesCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnet6LeasesCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnet6LeasesCountRequest) ProtoMessage() {}

func (x *GetSubnet6LeasesCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnet6LeasesCountRequest.ProtoReflect.Descriptor instead.
func (*GetSubnet6LeasesCountRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{29}
}

func (x *GetSubnet6LeasesCountRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetPool6LeasesCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId     uint32 `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	BeginAddress string `protobuf:"bytes,2,opt,name=begin_address,json=beginAddress,proto3" json:"begin_address,omitempty"`
	EndAddress   string `protobuf:"bytes,3,opt,name=end_address,json=endAddress,proto3" json:"end_address,omitempty"`
}

func (x *GetPool6LeasesCountRequest) Reset() {
	*x = GetPool6LeasesCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPool6LeasesCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPool6LeasesCountRequest) ProtoMessage() {}

func (x *GetPool6LeasesCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPool6LeasesCountRequest.ProtoReflect.Descriptor instead.
func (*GetPool6LeasesCountRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{30}
}

func (x *GetPool6LeasesCountRequest) GetSubnetId() uint32 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *GetPool6LeasesCountRequest) GetBeginAddress() string {
	if x != nil {
		return x.BeginAddress
	}
	return ""
}

func (x *GetPool6LeasesCountRequest) GetEndAddress() string {
	if x != nil {
		return x.EndAddress
	}
	return ""
}

type GetReservation6LeasesCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId  uint32 `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	HwAddress string `protobuf:"bytes,2,opt,name=hw_address,json=hwAddress,proto3" json:"hw_address,omitempty"`
}

func (x *GetReservation6LeasesCountRequest) Reset() {
	*x = GetReservation6LeasesCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReservation6LeasesCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReservation6LeasesCountRequest) ProtoMessage() {}

func (x *GetReservation6LeasesCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReservation6LeasesCountRequest.ProtoReflect.Descriptor instead.
func (*GetReservation6LeasesCountRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{31}
}

func (x *GetReservation6LeasesCountRequest) GetSubnetId() uint32 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *GetReservation6LeasesCountRequest) GetHwAddress() string {
	if x != nil {
		return x.HwAddress
	}
	return ""
}

type GetSubnet4LeasesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetSubnet4LeasesRequest) Reset() {
	*x = GetSubnet4LeasesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnet4LeasesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnet4LeasesRequest) ProtoMessage() {}

func (x *GetSubnet4LeasesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnet4LeasesRequest.ProtoReflect.Descriptor instead.
func (*GetSubnet4LeasesRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{32}
}

func (x *GetSubnet4LeasesRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetSubnet6LeasesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetSubnet6LeasesRequest) Reset() {
	*x = GetSubnet6LeasesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnet6LeasesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnet6LeasesRequest) ProtoMessage() {}

func (x *GetSubnet6LeasesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnet6LeasesRequest.ProtoReflect.Descriptor instead.
func (*GetSubnet6LeasesRequest) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{33}
}

func (x *GetSubnet6LeasesRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DHCPLease struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address         string              `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	SubnetId        uint32              `protobuf:"varint,2,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	HwAddress       string              `protobuf:"bytes,3,opt,name=hw_address,json=hwAddress,proto3" json:"hw_address,omitempty"`
	HwType          uint32              `protobuf:"varint,4,opt,name=hw_type,json=hwType,proto3" json:"hw_type,omitempty"`
	HwAddressSource uint32              `protobuf:"varint,5,opt,name=hw_address_source,json=hwAddressSource,proto3" json:"hw_address_source,omitempty"`
	Duid            string              `protobuf:"bytes,6,opt,name=duid,proto3" json:"duid,omitempty"`
	ValidLifetime   uint32              `protobuf:"varint,7,opt,name=valid_lifetime,json=validLifetime,proto3" json:"valid_lifetime,omitempty"`
	Expire          int64               `protobuf:"varint,8,opt,name=expire,proto3" json:"expire,omitempty"`
	PrefixLen       uint32              `protobuf:"varint,9,opt,name=prefix_len,json=prefixLen,proto3" json:"prefix_len,omitempty"`
	LeaseType       DHCPLease_LeaseType `protobuf:"varint,10,opt,name=lease_type,json=leaseType,proto3,enum=proto.DHCPLease_LeaseType" json:"lease_type,omitempty"`
	State           uint32              `protobuf:"varint,11,opt,name=state,proto3" json:"state,omitempty"`
	Hostname        string              `protobuf:"bytes,12,opt,name=hostname,proto3" json:"hostname,omitempty"`
	ClientId        string              `protobuf:"bytes,13,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
}

func (x *DHCPLease) Reset() {
	*x = DHCPLease{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DHCPLease) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DHCPLease) ProtoMessage() {}

func (x *DHCPLease) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DHCPLease.ProtoReflect.Descriptor instead.
func (*DHCPLease) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{34}
}

func (x *DHCPLease) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *DHCPLease) GetSubnetId() uint32 {
	if x != nil {
		return x.SubnetId
	}
	return 0
}

func (x *DHCPLease) GetHwAddress() string {
	if x != nil {
		return x.HwAddress
	}
	return ""
}

func (x *DHCPLease) GetHwType() uint32 {
	if x != nil {
		return x.HwType
	}
	return 0
}

func (x *DHCPLease) GetHwAddressSource() uint32 {
	if x != nil {
		return x.HwAddressSource
	}
	return 0
}

func (x *DHCPLease) GetDuid() string {
	if x != nil {
		return x.Duid
	}
	return ""
}

func (x *DHCPLease) GetValidLifetime() uint32 {
	if x != nil {
		return x.ValidLifetime
	}
	return 0
}

func (x *DHCPLease) GetExpire() int64 {
	if x != nil {
		return x.Expire
	}
	return 0
}

func (x *DHCPLease) GetPrefixLen() uint32 {
	if x != nil {
		return x.PrefixLen
	}
	return 0
}

func (x *DHCPLease) GetLeaseType() DHCPLease_LeaseType {
	if x != nil {
		return x.LeaseType
	}
	return DHCPLease_TYPE_NA
}

func (x *DHCPLease) GetState() uint32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *DHCPLease) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *DHCPLease) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

type GetLeasesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Succeed bool         `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
	Leases  []*DHCPLease `protobuf:"bytes,2,rep,name=leases,proto3" json:"leases,omitempty"`
}

func (x *GetLeasesResponse) Reset() {
	*x = GetLeasesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhcp_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLeasesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLeasesResponse) ProtoMessage() {}

func (x *GetLeasesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dhcp_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLeasesResponse.ProtoReflect.Descriptor instead.
func (*GetLeasesResponse) Descriptor() ([]byte, []int) {
	return file_dhcp_proto_rawDescGZIP(), []int{35}
}

func (x *GetLeasesResponse) GetSucceed() bool {
	if x != nil {
		return x.Succeed
	}
	return false
}

func (x *GetLeasesResponse) GetLeases() []*DHCPLease {
	if x != nil {
		return x.Leases
	}
	return nil
}

var File_dhcp_proto protoreflect.FileDescriptor

var file_dhcp_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x64, 0x68, 0x63, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x64, 0x64, 0x69, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd7, 0x02, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x70, 0x6e, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x69, 0x70, 0x6e, 0x65, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f,
	0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a,
	0x12, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6d,
	0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0d, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x32, 0x0a,
	0x15, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65,
	0x6c, 0x61, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x22, 0x26, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0xc1, 0x02, 0x0a, 0x14, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x66, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x78,
	0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4c,
	0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x69, 0x6e, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4c, 0x69, 0x66,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x6c,
	0x61, 0x79, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0xb7, 0x02,
	0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x70, 0x6e, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x70, 0x6e, 0x65, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4c, 0x69, 0x66, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6c,
	0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d,
	0x69, 0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x64, 0x6e, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x26, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22,
	0xa1, 0x02, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x36, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x66,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x61, 0x78,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a,
	0x12, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x69, 0x6e, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64,
	0x6e, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x64, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12,
	0x32, 0x0a, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13,
	0x72, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x22, 0xdb, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f,
	0x6f, 0x6c, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x65, 0x67, 0x69, 0x6e,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x62, 0x65, 0x67, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x65, 0x6e, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a,
	0x0e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x22, 0x77, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x34,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x65, 0x67,
	0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x64,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x65, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xdb, 0x01, 0x0a, 0x12, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x22, 0xbb, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x36, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6e, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x22, 0x77, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x6f, 0x6f, 0x6c, 0x36, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x65, 0x67,
	0x69, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22,
	0xbb, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x36, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x65, 0x67, 0x69,
	0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65,
	0x6e, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6e, 0x73,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a,
	0x64, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x22, 0xb7, 0x01,
	0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x77, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x77,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x73, 0x22, 0x57, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x34, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x22, 0x98, 0x01, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x68,
	0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x68, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0d, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x73, 0x22, 0x9b, 0x01, 0x0a, 0x19,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x36, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x77, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x77, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x70, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6e, 0x73, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x64,
	0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x22, 0x57, 0x0a, 0x19, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x36, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x22, 0x78, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x36, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x68, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x68, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x64,
	0x6e, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x64, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x22, 0xd2, 0x01, 0x0a,
	0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x44, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x65, 0x6e, 0x12, 0x1f, 0x0a,
	0x0b, 0x64, 0x6e, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x64, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x22, 0x4a, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x44, 0x50, 0x6f, 0x6f,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x22, 0x8e, 0x01,
	0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x44, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6e,
	0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x64, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x22, 0x47,
	0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x65, 0x78, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x67, 0x65, 0x78, 0x70, 0x22, 0x2f, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x34, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x47, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x34, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67,
	0x65, 0x78, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x65, 0x78,
	0x70, 0x22, 0xc5, 0x01, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4c, 0x69,
	0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4c, 0x69, 0x66, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x6d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x22, 0x2e, 0x0a, 0x1c, 0x47, 0x65, 0x74,
	0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x7f, 0x0a, 0x1a, 0x47, 0x65, 0x74,
	0x50, 0x6f, 0x6f, 0x6c, 0x34, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x65, 0x67,
	0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x64,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x65, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x5f, 0x0a, 0x21, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x34, 0x4c, 0x65, 0x61,
	0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x68, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x68, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x55, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x2e, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36,
	0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x7f, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x36, 0x4c, 0x65,
	0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x22, 0x5f, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x36, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x77, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x22, 0x29, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x34, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x29, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x4c, 0x65, 0x61,
	0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0xe3, 0x03, 0x0a, 0x09, 0x44,
	0x48, 0x43, 0x50, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x68, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x17,
	0x0a, 0x07, 0x68, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x68, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x77, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x68, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x75, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x4c, 0x65, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x48, 0x43, 0x50, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x4c, 0x65, 0x61, 0x73,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22,
	0x3f, 0x0a, 0x09, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x41, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x54, 0x41, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50,
	0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x34, 0x10, 0x03,
	0x22, 0x57, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x12,
	0x28, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x48, 0x43, 0x50, 0x4c, 0x65, 0x61, 0x73,
	0x65, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x32, 0xdd, 0x13, 0x0a, 0x0b, 0x44, 0x48,
	0x43, 0x50, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x0d, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x44, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a,
	0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x12, 0x1b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x44, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x42, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x34, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x44, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x44, 0x49, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0d, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x44, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a,
	0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x12, 0x1b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x36, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x44, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x3e, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x34,
	0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x6f, 0x6f, 0x6c, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x44, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x3e, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x34,
	0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x6f, 0x6f, 0x6c, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x44, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x3e, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x34,
	0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x6f, 0x6f, 0x6c, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x44, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x3e, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x36,
	0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x6f, 0x6f, 0x6c, 0x36, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x44, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x3e, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x36,
	0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x6f, 0x6f, 0x6c, 0x36, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x44, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x3e, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x36,
	0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x6f, 0x6f, 0x6c, 0x36, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x44, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x40, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x44, 0x50, 0x6f, 0x6f,
	0x6c, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x44, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x44, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x44, 0x50,
	0x6f, 0x6f, 0x6c, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x44, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x44, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x44, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x44, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x44, 0x49, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x34, 0x12, 0x20, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x44, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x34, 0x12, 0x20, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x44, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x34, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x44, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x4c, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x36, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x36, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x44, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x4c, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x36, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x36,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x44, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a,
	0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x36, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x36, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x44,
	0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x12, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x34, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x34, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x44, 0x49, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x12, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x34, 0x12,
	0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x44, 0x49, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x34, 0x12, 0x20, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x44, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x20, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x44, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x34, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x4c,
	0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61,
	0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x59, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x34, 0x4c, 0x65,
	0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x34, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67, 0x0a,
	0x1a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x34,
	0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x34, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65,
	0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x36, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x36, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74,
	0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c,
	0x36, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x36, 0x4c, 0x65, 0x61,
	0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x67, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x36, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x36, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0x1e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x34,
	0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0x1e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x36,
	0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_dhcp_proto_rawDescOnce sync.Once
	file_dhcp_proto_rawDescData = file_dhcp_proto_rawDesc
)

func file_dhcp_proto_rawDescGZIP() []byte {
	file_dhcp_proto_rawDescOnce.Do(func() {
		file_dhcp_proto_rawDescData = protoimpl.X.CompressGZIP(file_dhcp_proto_rawDescData)
	})
	return file_dhcp_proto_rawDescData
}

var file_dhcp_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_dhcp_proto_msgTypes = make([]protoimpl.MessageInfo, 36)
var file_dhcp_proto_goTypes = []interface{}{
	(DHCPLease_LeaseType)(0),                  // 0: proto.DHCPLease.LeaseType
	(*CreateSubnet4Request)(nil),              // 1: proto.CreateSubnet4Request
	(*DeleteSubnet4Request)(nil),              // 2: proto.DeleteSubnet4Request
	(*UpdateSubnet4Request)(nil),              // 3: proto.UpdateSubnet4Request
	(*CreateSubnet6Request)(nil),              // 4: proto.CreateSubnet6Request
	(*DeleteSubnet6Request)(nil),              // 5: proto.DeleteSubnet6Request
	(*UpdateSubnet6Request)(nil),              // 6: proto.UpdateSubnet6Request
	(*CreatePool4Request)(nil),                // 7: proto.CreatePool4Request
	(*DeletePool4Request)(nil),                // 8: proto.DeletePool4Request
	(*UpdatePool4Request)(nil),                // 9: proto.UpdatePool4Request
	(*CreatePool6Request)(nil),                // 10: proto.CreatePool6Request
	(*DeletePool6Request)(nil),                // 11: proto.DeletePool6Request
	(*UpdatePool6Request)(nil),                // 12: proto.UpdatePool6Request
	(*CreateReservation4Request)(nil),         // 13: proto.CreateReservation4Request
	(*DeleteReservation4Request)(nil),         // 14: proto.DeleteReservation4Request
	(*UpdateReservation4Request)(nil),         // 15: proto.UpdateReservation4Request
	(*CreateReservation6Request)(nil),         // 16: proto.CreateReservation6Request
	(*DeleteReservation6Request)(nil),         // 17: proto.DeleteReservation6Request
	(*UpdateReservation6Request)(nil),         // 18: proto.UpdateReservation6Request
	(*CreatePDPoolRequest)(nil),               // 19: proto.CreatePDPoolRequest
	(*DeletePDPoolRequest)(nil),               // 20: proto.DeletePDPoolRequest
	(*UpdatePDPoolRequest)(nil),               // 21: proto.UpdatePDPoolRequest
	(*CreateClientClass4Request)(nil),         // 22: proto.CreateClientClass4Request
	(*DeleteClientClass4Request)(nil),         // 23: proto.DeleteClientClass4Request
	(*UpdateClientClass4Request)(nil),         // 24: proto.UpdateClientClass4Request
	(*UpdateGlobalConfigRequest)(nil),         // 25: proto.UpdateGlobalConfigRequest
	(*GetSubnet4LeasesCountRequest)(nil),      // 26: proto.GetSubnet4LeasesCountRequest
	(*GetPool4LeasesCountRequest)(nil),        // 27: proto.GetPool4LeasesCountRequest
	(*GetReservation4LeasesCountRequest)(nil), // 28: proto.GetReservation4LeasesCountRequest
	(*GetLeasesCountResponse)(nil),            // 29: proto.GetLeasesCountResponse
	(*GetSubnet6LeasesCountRequest)(nil),      // 30: proto.GetSubnet6LeasesCountRequest
	(*GetPool6LeasesCountRequest)(nil),        // 31: proto.GetPool6LeasesCountRequest
	(*GetReservation6LeasesCountRequest)(nil), // 32: proto.GetReservation6LeasesCountRequest
	(*GetSubnet4LeasesRequest)(nil),           // 33: proto.GetSubnet4LeasesRequest
	(*GetSubnet6LeasesRequest)(nil),           // 34: proto.GetSubnet6LeasesRequest
	(*DHCPLease)(nil),                         // 35: proto.DHCPLease
	(*GetLeasesResponse)(nil),                 // 36: proto.GetLeasesResponse
	(*DDIResponse)(nil),                       // 37: proto.DDIResponse
}
var file_dhcp_proto_depIdxs = []int32{
	0,  // 0: proto.DHCPLease.lease_type:type_name -> proto.DHCPLease.LeaseType
	35, // 1: proto.GetLeasesResponse.leases:type_name -> proto.DHCPLease
	1,  // 2: proto.DHCPManager.CreateSubnet4:input_type -> proto.CreateSubnet4Request
	2,  // 3: proto.DHCPManager.DeleteSubnet4:input_type -> proto.DeleteSubnet4Request
	3,  // 4: proto.DHCPManager.UpdateSubnet4:input_type -> proto.UpdateSubnet4Request
	4,  // 5: proto.DHCPManager.CreateSubnet6:input_type -> proto.CreateSubnet6Request
	5,  // 6: proto.DHCPManager.DeleteSubnet6:input_type -> proto.DeleteSubnet6Request
	6,  // 7: proto.DHCPManager.UpdateSubnet6:input_type -> proto.UpdateSubnet6Request
	7,  // 8: proto.DHCPManager.CreatePool4:input_type -> proto.CreatePool4Request
	8,  // 9: proto.DHCPManager.DeletePool4:input_type -> proto.DeletePool4Request
	9,  // 10: proto.DHCPManager.UpdatePool4:input_type -> proto.UpdatePool4Request
	10, // 11: proto.DHCPManager.CreatePool6:input_type -> proto.CreatePool6Request
	11, // 12: proto.DHCPManager.DeletePool6:input_type -> proto.DeletePool6Request
	12, // 13: proto.DHCPManager.UpdatePool6:input_type -> proto.UpdatePool6Request
	19, // 14: proto.DHCPManager.CreatePDPool:input_type -> proto.CreatePDPoolRequest
	20, // 15: proto.DHCPManager.DeletePDPool:input_type -> proto.DeletePDPoolRequest
	21, // 16: proto.DHCPManager.UpdatePDPool:input_type -> proto.UpdatePDPoolRequest
	13, // 17: proto.DHCPManager.CreateReservation4:input_type -> proto.CreateReservation4Request
	14, // 18: proto.DHCPManager.DeleteReservation4:input_type -> proto.DeleteReservation4Request
	15, // 19: proto.DHCPManager.UpdateReservation4:input_type -> proto.UpdateReservation4Request
	16, // 20: proto.DHCPManager.CreateReservation6:input_type -> proto.CreateReservation6Request
	17, // 21: proto.DHCPManager.DeleteReservation6:input_type -> proto.DeleteReservation6Request
	18, // 22: proto.DHCPManager.UpdateReservation6:input_type -> proto.UpdateReservation6Request
	22, // 23: proto.DHCPManager.CreateClientClass4:input_type -> proto.CreateClientClass4Request
	23, // 24: proto.DHCPManager.DeleteClientClass4:input_type -> proto.DeleteClientClass4Request
	24, // 25: proto.DHCPManager.UpdateClientClass4:input_type -> proto.UpdateClientClass4Request
	25, // 26: proto.DHCPManager.UpdateGlobalConfig:input_type -> proto.UpdateGlobalConfigRequest
	26, // 27: proto.DHCPManager.GetSubnet4LeasesCount:input_type -> proto.GetSubnet4LeasesCountRequest
	27, // 28: proto.DHCPManager.GetPool4LeasesCount:input_type -> proto.GetPool4LeasesCountRequest
	28, // 29: proto.DHCPManager.GetReservation4LeasesCount:input_type -> proto.GetReservation4LeasesCountRequest
	30, // 30: proto.DHCPManager.GetSubnet6LeasesCount:input_type -> proto.GetSubnet6LeasesCountRequest
	31, // 31: proto.DHCPManager.GetPool6LeasesCount:input_type -> proto.GetPool6LeasesCountRequest
	32, // 32: proto.DHCPManager.GetReservation6LeasesCount:input_type -> proto.GetReservation6LeasesCountRequest
	33, // 33: proto.DHCPManager.GetSubnet4Leases:input_type -> proto.GetSubnet4LeasesRequest
	34, // 34: proto.DHCPManager.GetSubnet6Leases:input_type -> proto.GetSubnet6LeasesRequest
	37, // 35: proto.DHCPManager.CreateSubnet4:output_type -> proto.DDIResponse
	37, // 36: proto.DHCPManager.DeleteSubnet4:output_type -> proto.DDIResponse
	37, // 37: proto.DHCPManager.UpdateSubnet4:output_type -> proto.DDIResponse
	37, // 38: proto.DHCPManager.CreateSubnet6:output_type -> proto.DDIResponse
	37, // 39: proto.DHCPManager.DeleteSubnet6:output_type -> proto.DDIResponse
	37, // 40: proto.DHCPManager.UpdateSubnet6:output_type -> proto.DDIResponse
	37, // 41: proto.DHCPManager.CreatePool4:output_type -> proto.DDIResponse
	37, // 42: proto.DHCPManager.DeletePool4:output_type -> proto.DDIResponse
	37, // 43: proto.DHCPManager.UpdatePool4:output_type -> proto.DDIResponse
	37, // 44: proto.DHCPManager.CreatePool6:output_type -> proto.DDIResponse
	37, // 45: proto.DHCPManager.DeletePool6:output_type -> proto.DDIResponse
	37, // 46: proto.DHCPManager.UpdatePool6:output_type -> proto.DDIResponse
	37, // 47: proto.DHCPManager.CreatePDPool:output_type -> proto.DDIResponse
	37, // 48: proto.DHCPManager.DeletePDPool:output_type -> proto.DDIResponse
	37, // 49: proto.DHCPManager.UpdatePDPool:output_type -> proto.DDIResponse
	37, // 50: proto.DHCPManager.CreateReservation4:output_type -> proto.DDIResponse
	37, // 51: proto.DHCPManager.DeleteReservation4:output_type -> proto.DDIResponse
	37, // 52: proto.DHCPManager.UpdateReservation4:output_type -> proto.DDIResponse
	37, // 53: proto.DHCPManager.CreateReservation6:output_type -> proto.DDIResponse
	37, // 54: proto.DHCPManager.DeleteReservation6:output_type -> proto.DDIResponse
	37, // 55: proto.DHCPManager.UpdateReservation6:output_type -> proto.DDIResponse
	37, // 56: proto.DHCPManager.CreateClientClass4:output_type -> proto.DDIResponse
	37, // 57: proto.DHCPManager.DeleteClientClass4:output_type -> proto.DDIResponse
	37, // 58: proto.DHCPManager.UpdateClientClass4:output_type -> proto.DDIResponse
	37, // 59: proto.DHCPManager.UpdateGlobalConfig:output_type -> proto.DDIResponse
	29, // 60: proto.DHCPManager.GetSubnet4LeasesCount:output_type -> proto.GetLeasesCountResponse
	29, // 61: proto.DHCPManager.GetPool4LeasesCount:output_type -> proto.GetLeasesCountResponse
	29, // 62: proto.DHCPManager.GetReservation4LeasesCount:output_type -> proto.GetLeasesCountResponse
	29, // 63: proto.DHCPManager.GetSubnet6LeasesCount:output_type -> proto.GetLeasesCountResponse
	29, // 64: proto.DHCPManager.GetPool6LeasesCount:output_type -> proto.GetLeasesCountResponse
	29, // 65: proto.DHCPManager.GetReservation6LeasesCount:output_type -> proto.GetLeasesCountResponse
	36, // 66: proto.DHCPManager.GetSubnet4Leases:output_type -> proto.GetLeasesResponse
	36, // 67: proto.DHCPManager.GetSubnet6Leases:output_type -> proto.GetLeasesResponse
	35, // [35:68] is the sub-list for method output_type
	2,  // [2:35] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_dhcp_proto_init() }
func file_dhcp_proto_init() {
	if File_dhcp_proto != nil {
		return
	}
	file_ddi_response_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_dhcp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSubnet4Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSubnet4Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSubnet4Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSubnet6Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSubnet6Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSubnet6Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePool4Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePool4Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePool4Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePool6Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePool6Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePool6Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReservation4Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteReservation4Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateReservation4Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReservation6Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteReservation6Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateReservation6Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePDPoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePDPoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePDPoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateClientClass4Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteClientClass4Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateClientClass4Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGlobalConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnet4LeasesCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPool4LeasesCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReservation4LeasesCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLeasesCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnet6LeasesCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPool6LeasesCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReservation6LeasesCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnet4LeasesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnet6LeasesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DHCPLease); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhcp_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLeasesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dhcp_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   36,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dhcp_proto_goTypes,
		DependencyIndexes: file_dhcp_proto_depIdxs,
		EnumInfos:         file_dhcp_proto_enumTypes,
		MessageInfos:      file_dhcp_proto_msgTypes,
	}.Build()
	File_dhcp_proto = out.File
	file_dhcp_proto_rawDesc = nil
	file_dhcp_proto_goTypes = nil
	file_dhcp_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DHCPManagerClient is the client API for DHCPManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DHCPManagerClient interface {
	CreateSubnet4(ctx context.Context, in *CreateSubnet4Request, opts ...grpc.CallOption) (*DDIResponse, error)
	DeleteSubnet4(ctx context.Context, in *DeleteSubnet4Request, opts ...grpc.CallOption) (*DDIResponse, error)
	UpdateSubnet4(ctx context.Context, in *UpdateSubnet4Request, opts ...grpc.CallOption) (*DDIResponse, error)
	CreateSubnet6(ctx context.Context, in *CreateSubnet6Request, opts ...grpc.CallOption) (*DDIResponse, error)
	DeleteSubnet6(ctx context.Context, in *DeleteSubnet6Request, opts ...grpc.CallOption) (*DDIResponse, error)
	UpdateSubnet6(ctx context.Context, in *UpdateSubnet6Request, opts ...grpc.CallOption) (*DDIResponse, error)
	CreatePool4(ctx context.Context, in *CreatePool4Request, opts ...grpc.CallOption) (*DDIResponse, error)
	DeletePool4(ctx context.Context, in *DeletePool4Request, opts ...grpc.CallOption) (*DDIResponse, error)
	UpdatePool4(ctx context.Context, in *UpdatePool4Request, opts ...grpc.CallOption) (*DDIResponse, error)
	CreatePool6(ctx context.Context, in *CreatePool6Request, opts ...grpc.CallOption) (*DDIResponse, error)
	DeletePool6(ctx context.Context, in *DeletePool6Request, opts ...grpc.CallOption) (*DDIResponse, error)
	UpdatePool6(ctx context.Context, in *UpdatePool6Request, opts ...grpc.CallOption) (*DDIResponse, error)
	CreatePDPool(ctx context.Context, in *CreatePDPoolRequest, opts ...grpc.CallOption) (*DDIResponse, error)
	DeletePDPool(ctx context.Context, in *DeletePDPoolRequest, opts ...grpc.CallOption) (*DDIResponse, error)
	UpdatePDPool(ctx context.Context, in *UpdatePDPoolRequest, opts ...grpc.CallOption) (*DDIResponse, error)
	CreateReservation4(ctx context.Context, in *CreateReservation4Request, opts ...grpc.CallOption) (*DDIResponse, error)
	DeleteReservation4(ctx context.Context, in *DeleteReservation4Request, opts ...grpc.CallOption) (*DDIResponse, error)
	UpdateReservation4(ctx context.Context, in *UpdateReservation4Request, opts ...grpc.CallOption) (*DDIResponse, error)
	CreateReservation6(ctx context.Context, in *CreateReservation6Request, opts ...grpc.CallOption) (*DDIResponse, error)
	DeleteReservation6(ctx context.Context, in *DeleteReservation6Request, opts ...grpc.CallOption) (*DDIResponse, error)
	UpdateReservation6(ctx context.Context, in *UpdateReservation6Request, opts ...grpc.CallOption) (*DDIResponse, error)
	CreateClientClass4(ctx context.Context, in *CreateClientClass4Request, opts ...grpc.CallOption) (*DDIResponse, error)
	DeleteClientClass4(ctx context.Context, in *DeleteClientClass4Request, opts ...grpc.CallOption) (*DDIResponse, error)
	UpdateClientClass4(ctx context.Context, in *UpdateClientClass4Request, opts ...grpc.CallOption) (*DDIResponse, error)
	UpdateGlobalConfig(ctx context.Context, in *UpdateGlobalConfigRequest, opts ...grpc.CallOption) (*DDIResponse, error)
	GetSubnet4LeasesCount(ctx context.Context, in *GetSubnet4LeasesCountRequest, opts ...grpc.CallOption) (*GetLeasesCountResponse, error)
	GetPool4LeasesCount(ctx context.Context, in *GetPool4LeasesCountRequest, opts ...grpc.CallOption) (*GetLeasesCountResponse, error)
	GetReservation4LeasesCount(ctx context.Context, in *GetReservation4LeasesCountRequest, opts ...grpc.CallOption) (*GetLeasesCountResponse, error)
	GetSubnet6LeasesCount(ctx context.Context, in *GetSubnet6LeasesCountRequest, opts ...grpc.CallOption) (*GetLeasesCountResponse, error)
	GetPool6LeasesCount(ctx context.Context, in *GetPool6LeasesCountRequest, opts ...grpc.CallOption) (*GetLeasesCountResponse, error)
	GetReservation6LeasesCount(ctx context.Context, in *GetReservation6LeasesCountRequest, opts ...grpc.CallOption) (*GetLeasesCountResponse, error)
	GetSubnet4Leases(ctx context.Context, in *GetSubnet4LeasesRequest, opts ...grpc.CallOption) (*GetLeasesResponse, error)
	GetSubnet6Leases(ctx context.Context, in *GetSubnet6LeasesRequest, opts ...grpc.CallOption) (*GetLeasesResponse, error)
}

type dHCPManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewDHCPManagerClient(cc grpc.ClientConnInterface) DHCPManagerClient {
	return &dHCPManagerClient{cc}
}

func (c *dHCPManagerClient) CreateSubnet4(ctx context.Context, in *CreateSubnet4Request, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/CreateSubnet4", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) DeleteSubnet4(ctx context.Context, in *DeleteSubnet4Request, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/DeleteSubnet4", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) UpdateSubnet4(ctx context.Context, in *UpdateSubnet4Request, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/UpdateSubnet4", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) CreateSubnet6(ctx context.Context, in *CreateSubnet6Request, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/CreateSubnet6", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) DeleteSubnet6(ctx context.Context, in *DeleteSubnet6Request, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/DeleteSubnet6", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) UpdateSubnet6(ctx context.Context, in *UpdateSubnet6Request, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/UpdateSubnet6", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) CreatePool4(ctx context.Context, in *CreatePool4Request, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/CreatePool4", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) DeletePool4(ctx context.Context, in *DeletePool4Request, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/DeletePool4", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) UpdatePool4(ctx context.Context, in *UpdatePool4Request, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/UpdatePool4", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) CreatePool6(ctx context.Context, in *CreatePool6Request, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/CreatePool6", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) DeletePool6(ctx context.Context, in *DeletePool6Request, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/DeletePool6", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) UpdatePool6(ctx context.Context, in *UpdatePool6Request, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/UpdatePool6", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) CreatePDPool(ctx context.Context, in *CreatePDPoolRequest, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/CreatePDPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) DeletePDPool(ctx context.Context, in *DeletePDPoolRequest, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/DeletePDPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) UpdatePDPool(ctx context.Context, in *UpdatePDPoolRequest, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/UpdatePDPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) CreateReservation4(ctx context.Context, in *CreateReservation4Request, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/CreateReservation4", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) DeleteReservation4(ctx context.Context, in *DeleteReservation4Request, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/DeleteReservation4", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) UpdateReservation4(ctx context.Context, in *UpdateReservation4Request, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/UpdateReservation4", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) CreateReservation6(ctx context.Context, in *CreateReservation6Request, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/CreateReservation6", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) DeleteReservation6(ctx context.Context, in *DeleteReservation6Request, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/DeleteReservation6", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) UpdateReservation6(ctx context.Context, in *UpdateReservation6Request, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/UpdateReservation6", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) CreateClientClass4(ctx context.Context, in *CreateClientClass4Request, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/CreateClientClass4", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) DeleteClientClass4(ctx context.Context, in *DeleteClientClass4Request, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/DeleteClientClass4", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) UpdateClientClass4(ctx context.Context, in *UpdateClientClass4Request, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/UpdateClientClass4", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) UpdateGlobalConfig(ctx context.Context, in *UpdateGlobalConfigRequest, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/UpdateGlobalConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) GetSubnet4LeasesCount(ctx context.Context, in *GetSubnet4LeasesCountRequest, opts ...grpc.CallOption) (*GetLeasesCountResponse, error) {
	out := new(GetLeasesCountResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/GetSubnet4LeasesCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) GetPool4LeasesCount(ctx context.Context, in *GetPool4LeasesCountRequest, opts ...grpc.CallOption) (*GetLeasesCountResponse, error) {
	out := new(GetLeasesCountResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/GetPool4LeasesCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) GetReservation4LeasesCount(ctx context.Context, in *GetReservation4LeasesCountRequest, opts ...grpc.CallOption) (*GetLeasesCountResponse, error) {
	out := new(GetLeasesCountResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/GetReservation4LeasesCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) GetSubnet6LeasesCount(ctx context.Context, in *GetSubnet6LeasesCountRequest, opts ...grpc.CallOption) (*GetLeasesCountResponse, error) {
	out := new(GetLeasesCountResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/GetSubnet6LeasesCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) GetPool6LeasesCount(ctx context.Context, in *GetPool6LeasesCountRequest, opts ...grpc.CallOption) (*GetLeasesCountResponse, error) {
	out := new(GetLeasesCountResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/GetPool6LeasesCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) GetReservation6LeasesCount(ctx context.Context, in *GetReservation6LeasesCountRequest, opts ...grpc.CallOption) (*GetLeasesCountResponse, error) {
	out := new(GetLeasesCountResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/GetReservation6LeasesCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) GetSubnet4Leases(ctx context.Context, in *GetSubnet4LeasesRequest, opts ...grpc.CallOption) (*GetLeasesResponse, error) {
	out := new(GetLeasesResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/GetSubnet4Leases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) GetSubnet6Leases(ctx context.Context, in *GetSubnet6LeasesRequest, opts ...grpc.CallOption) (*GetLeasesResponse, error) {
	out := new(GetLeasesResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/GetSubnet6Leases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DHCPManagerServer is the server API for DHCPManager service.
type DHCPManagerServer interface {
	CreateSubnet4(context.Context, *CreateSubnet4Request) (*DDIResponse, error)
	DeleteSubnet4(context.Context, *DeleteSubnet4Request) (*DDIResponse, error)
	UpdateSubnet4(context.Context, *UpdateSubnet4Request) (*DDIResponse, error)
	CreateSubnet6(context.Context, *CreateSubnet6Request) (*DDIResponse, error)
	DeleteSubnet6(context.Context, *DeleteSubnet6Request) (*DDIResponse, error)
	UpdateSubnet6(context.Context, *UpdateSubnet6Request) (*DDIResponse, error)
	CreatePool4(context.Context, *CreatePool4Request) (*DDIResponse, error)
	DeletePool4(context.Context, *DeletePool4Request) (*DDIResponse, error)
	UpdatePool4(context.Context, *UpdatePool4Request) (*DDIResponse, error)
	CreatePool6(context.Context, *CreatePool6Request) (*DDIResponse, error)
	DeletePool6(context.Context, *DeletePool6Request) (*DDIResponse, error)
	UpdatePool6(context.Context, *UpdatePool6Request) (*DDIResponse, error)
	CreatePDPool(context.Context, *CreatePDPoolRequest) (*DDIResponse, error)
	DeletePDPool(context.Context, *DeletePDPoolRequest) (*DDIResponse, error)
	UpdatePDPool(context.Context, *UpdatePDPoolRequest) (*DDIResponse, error)
	CreateReservation4(context.Context, *CreateReservation4Request) (*DDIResponse, error)
	DeleteReservation4(context.Context, *DeleteReservation4Request) (*DDIResponse, error)
	UpdateReservation4(context.Context, *UpdateReservation4Request) (*DDIResponse, error)
	CreateReservation6(context.Context, *CreateReservation6Request) (*DDIResponse, error)
	DeleteReservation6(context.Context, *DeleteReservation6Request) (*DDIResponse, error)
	UpdateReservation6(context.Context, *UpdateReservation6Request) (*DDIResponse, error)
	CreateClientClass4(context.Context, *CreateClientClass4Request) (*DDIResponse, error)
	DeleteClientClass4(context.Context, *DeleteClientClass4Request) (*DDIResponse, error)
	UpdateClientClass4(context.Context, *UpdateClientClass4Request) (*DDIResponse, error)
	UpdateGlobalConfig(context.Context, *UpdateGlobalConfigRequest) (*DDIResponse, error)
	GetSubnet4LeasesCount(context.Context, *GetSubnet4LeasesCountRequest) (*GetLeasesCountResponse, error)
	GetPool4LeasesCount(context.Context, *GetPool4LeasesCountRequest) (*GetLeasesCountResponse, error)
	GetReservation4LeasesCount(context.Context, *GetReservation4LeasesCountRequest) (*GetLeasesCountResponse, error)
	GetSubnet6LeasesCount(context.Context, *GetSubnet6LeasesCountRequest) (*GetLeasesCountResponse, error)
	GetPool6LeasesCount(context.Context, *GetPool6LeasesCountRequest) (*GetLeasesCountResponse, error)
	GetReservation6LeasesCount(context.Context, *GetReservation6LeasesCountRequest) (*GetLeasesCountResponse, error)
	GetSubnet4Leases(context.Context, *GetSubnet4LeasesRequest) (*GetLeasesResponse, error)
	GetSubnet6Leases(context.Context, *GetSubnet6LeasesRequest) (*GetLeasesResponse, error)
}

// UnimplementedDHCPManagerServer can be embedded to have forward compatible implementations.
type UnimplementedDHCPManagerServer struct {
}

func (*UnimplementedDHCPManagerServer) CreateSubnet4(context.Context, *CreateSubnet4Request) (*DDIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubnet4 not implemented")
}
func (*UnimplementedDHCPManagerServer) DeleteSubnet4(context.Context, *DeleteSubnet4Request) (*DDIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSubnet4 not implemented")
}
func (*UnimplementedDHCPManagerServer) UpdateSubnet4(context.Context, *UpdateSubnet4Request) (*DDIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubnet4 not implemented")
}
func (*UnimplementedDHCPManagerServer) CreateSubnet6(context.Context, *CreateSubnet6Request) (*DDIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubnet6 not implemented")
}
func (*UnimplementedDHCPManagerServer) DeleteSubnet6(context.Context, *DeleteSubnet6Request) (*DDIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSubnet6 not implemented")
}
func (*UnimplementedDHCPManagerServer) UpdateSubnet6(context.Context, *UpdateSubnet6Request) (*DDIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubnet6 not implemented")
}
func (*UnimplementedDHCPManagerServer) CreatePool4(context.Context, *CreatePool4Request) (*DDIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePool4 not implemented")
}
func (*UnimplementedDHCPManagerServer) DeletePool4(context.Context, *DeletePool4Request) (*DDIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePool4 not implemented")
}
func (*UnimplementedDHCPManagerServer) UpdatePool4(context.Context, *UpdatePool4Request) (*DDIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePool4 not implemented")
}
func (*UnimplementedDHCPManagerServer) CreatePool6(context.Context, *CreatePool6Request) (*DDIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePool6 not implemented")
}
func (*UnimplementedDHCPManagerServer) DeletePool6(context.Context, *DeletePool6Request) (*DDIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePool6 not implemented")
}
func (*UnimplementedDHCPManagerServer) UpdatePool6(context.Context, *UpdatePool6Request) (*DDIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePool6 not implemented")
}
func (*UnimplementedDHCPManagerServer) CreatePDPool(context.Context, *CreatePDPoolRequest) (*DDIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePDPool not implemented")
}
func (*UnimplementedDHCPManagerServer) DeletePDPool(context.Context, *DeletePDPoolRequest) (*DDIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePDPool not implemented")
}
func (*UnimplementedDHCPManagerServer) UpdatePDPool(context.Context, *UpdatePDPoolRequest) (*DDIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePDPool not implemented")
}
func (*UnimplementedDHCPManagerServer) CreateReservation4(context.Context, *CreateReservation4Request) (*DDIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReservation4 not implemented")
}
func (*UnimplementedDHCPManagerServer) DeleteReservation4(context.Context, *DeleteReservation4Request) (*DDIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReservation4 not implemented")
}
func (*UnimplementedDHCPManagerServer) UpdateReservation4(context.Context, *UpdateReservation4Request) (*DDIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReservation4 not implemented")
}
func (*UnimplementedDHCPManagerServer) CreateReservation6(context.Context, *CreateReservation6Request) (*DDIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReservation6 not implemented")
}
func (*UnimplementedDHCPManagerServer) DeleteReservation6(context.Context, *DeleteReservation6Request) (*DDIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReservation6 not implemented")
}
func (*UnimplementedDHCPManagerServer) UpdateReservation6(context.Context, *UpdateReservation6Request) (*DDIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReservation6 not implemented")
}
func (*UnimplementedDHCPManagerServer) CreateClientClass4(context.Context, *CreateClientClass4Request) (*DDIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClientClass4 not implemented")
}
func (*UnimplementedDHCPManagerServer) DeleteClientClass4(context.Context, *DeleteClientClass4Request) (*DDIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteClientClass4 not implemented")
}
func (*UnimplementedDHCPManagerServer) UpdateClientClass4(context.Context, *UpdateClientClass4Request) (*DDIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClientClass4 not implemented")
}
func (*UnimplementedDHCPManagerServer) UpdateGlobalConfig(context.Context, *UpdateGlobalConfigRequest) (*DDIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGlobalConfig not implemented")
}
func (*UnimplementedDHCPManagerServer) GetSubnet4LeasesCount(context.Context, *GetSubnet4LeasesCountRequest) (*GetLeasesCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubnet4LeasesCount not implemented")
}
func (*UnimplementedDHCPManagerServer) GetPool4LeasesCount(context.Context, *GetPool4LeasesCountRequest) (*GetLeasesCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPool4LeasesCount not implemented")
}
func (*UnimplementedDHCPManagerServer) GetReservation4LeasesCount(context.Context, *GetReservation4LeasesCountRequest) (*GetLeasesCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReservation4LeasesCount not implemented")
}
func (*UnimplementedDHCPManagerServer) GetSubnet6LeasesCount(context.Context, *GetSubnet6LeasesCountRequest) (*GetLeasesCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubnet6LeasesCount not implemented")
}
func (*UnimplementedDHCPManagerServer) GetPool6LeasesCount(context.Context, *GetPool6LeasesCountRequest) (*GetLeasesCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPool6LeasesCount not implemented")
}
func (*UnimplementedDHCPManagerServer) GetReservation6LeasesCount(context.Context, *GetReservation6LeasesCountRequest) (*GetLeasesCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReservation6LeasesCount not implemented")
}
func (*UnimplementedDHCPManagerServer) GetSubnet4Leases(context.Context, *GetSubnet4LeasesRequest) (*GetLeasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubnet4Leases not implemented")
}
func (*UnimplementedDHCPManagerServer) GetSubnet6Leases(context.Context, *GetSubnet6LeasesRequest) (*GetLeasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubnet6Leases not implemented")
}

func RegisterDHCPManagerServer(s *grpc.Server, srv DHCPManagerServer) {
	s.RegisterService(&_DHCPManager_serviceDesc, srv)
}

func _DHCPManager_CreateSubnet4_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubnet4Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).CreateSubnet4(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/CreateSubnet4",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).CreateSubnet4(ctx, req.(*CreateSubnet4Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_DeleteSubnet4_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSubnet4Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).DeleteSubnet4(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/DeleteSubnet4",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).DeleteSubnet4(ctx, req.(*DeleteSubnet4Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_UpdateSubnet4_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSubnet4Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).UpdateSubnet4(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/UpdateSubnet4",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).UpdateSubnet4(ctx, req.(*UpdateSubnet4Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_CreateSubnet6_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubnet6Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).CreateSubnet6(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/CreateSubnet6",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).CreateSubnet6(ctx, req.(*CreateSubnet6Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_DeleteSubnet6_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSubnet6Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).DeleteSubnet6(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/DeleteSubnet6",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).DeleteSubnet6(ctx, req.(*DeleteSubnet6Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_UpdateSubnet6_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSubnet6Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).UpdateSubnet6(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/UpdateSubnet6",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).UpdateSubnet6(ctx, req.(*UpdateSubnet6Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_CreatePool4_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePool4Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).CreatePool4(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/CreatePool4",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).CreatePool4(ctx, req.(*CreatePool4Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_DeletePool4_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePool4Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).DeletePool4(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/DeletePool4",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).DeletePool4(ctx, req.(*DeletePool4Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_UpdatePool4_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePool4Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).UpdatePool4(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/UpdatePool4",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).UpdatePool4(ctx, req.(*UpdatePool4Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_CreatePool6_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePool6Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).CreatePool6(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/CreatePool6",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).CreatePool6(ctx, req.(*CreatePool6Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_DeletePool6_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePool6Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).DeletePool6(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/DeletePool6",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).DeletePool6(ctx, req.(*DeletePool6Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_UpdatePool6_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePool6Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).UpdatePool6(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/UpdatePool6",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).UpdatePool6(ctx, req.(*UpdatePool6Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_CreatePDPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePDPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).CreatePDPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/CreatePDPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).CreatePDPool(ctx, req.(*CreatePDPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_DeletePDPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePDPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).DeletePDPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/DeletePDPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).DeletePDPool(ctx, req.(*DeletePDPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_UpdatePDPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePDPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).UpdatePDPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/UpdatePDPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).UpdatePDPool(ctx, req.(*UpdatePDPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_CreateReservation4_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReservation4Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).CreateReservation4(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/CreateReservation4",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).CreateReservation4(ctx, req.(*CreateReservation4Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_DeleteReservation4_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReservation4Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).DeleteReservation4(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/DeleteReservation4",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).DeleteReservation4(ctx, req.(*DeleteReservation4Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_UpdateReservation4_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReservation4Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).UpdateReservation4(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/UpdateReservation4",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).UpdateReservation4(ctx, req.(*UpdateReservation4Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_CreateReservation6_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReservation6Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).CreateReservation6(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/CreateReservation6",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).CreateReservation6(ctx, req.(*CreateReservation6Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_DeleteReservation6_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReservation6Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).DeleteReservation6(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/DeleteReservation6",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).DeleteReservation6(ctx, req.(*DeleteReservation6Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_UpdateReservation6_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReservation6Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).UpdateReservation6(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/UpdateReservation6",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).UpdateReservation6(ctx, req.(*UpdateReservation6Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_CreateClientClass4_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClientClass4Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).CreateClientClass4(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/CreateClientClass4",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).CreateClientClass4(ctx, req.(*CreateClientClass4Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_DeleteClientClass4_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClientClass4Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).DeleteClientClass4(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/DeleteClientClass4",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).DeleteClientClass4(ctx, req.(*DeleteClientClass4Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_UpdateClientClass4_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClientClass4Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).UpdateClientClass4(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/UpdateClientClass4",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).UpdateClientClass4(ctx, req.(*UpdateClientClass4Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_UpdateGlobalConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGlobalConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).UpdateGlobalConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/UpdateGlobalConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).UpdateGlobalConfig(ctx, req.(*UpdateGlobalConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_GetSubnet4LeasesCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnet4LeasesCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).GetSubnet4LeasesCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/GetSubnet4LeasesCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).GetSubnet4LeasesCount(ctx, req.(*GetSubnet4LeasesCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_GetPool4LeasesCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPool4LeasesCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).GetPool4LeasesCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/GetPool4LeasesCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).GetPool4LeasesCount(ctx, req.(*GetPool4LeasesCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_GetReservation4LeasesCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReservation4LeasesCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).GetReservation4LeasesCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/GetReservation4LeasesCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).GetReservation4LeasesCount(ctx, req.(*GetReservation4LeasesCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_GetSubnet6LeasesCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnet6LeasesCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).GetSubnet6LeasesCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/GetSubnet6LeasesCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).GetSubnet6LeasesCount(ctx, req.(*GetSubnet6LeasesCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_GetPool6LeasesCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPool6LeasesCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).GetPool6LeasesCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/GetPool6LeasesCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).GetPool6LeasesCount(ctx, req.(*GetPool6LeasesCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_GetReservation6LeasesCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReservation6LeasesCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).GetReservation6LeasesCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/GetReservation6LeasesCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).GetReservation6LeasesCount(ctx, req.(*GetReservation6LeasesCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_GetSubnet4Leases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnet4LeasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).GetSubnet4Leases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/GetSubnet4Leases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).GetSubnet4Leases(ctx, req.(*GetSubnet4LeasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_GetSubnet6Leases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnet6LeasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).GetSubnet6Leases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/GetSubnet6Leases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).GetSubnet6Leases(ctx, req.(*GetSubnet6LeasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DHCPManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DHCPManager",
	HandlerType: (*DHCPManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSubnet4",
			Handler:    _DHCPManager_CreateSubnet4_Handler,
		},
		{
			MethodName: "DeleteSubnet4",
			Handler:    _DHCPManager_DeleteSubnet4_Handler,
		},
		{
			MethodName: "UpdateSubnet4",
			Handler:    _DHCPManager_UpdateSubnet4_Handler,
		},
		{
			MethodName: "CreateSubnet6",
			Handler:    _DHCPManager_CreateSubnet6_Handler,
		},
		{
			MethodName: "DeleteSubnet6",
			Handler:    _DHCPManager_DeleteSubnet6_Handler,
		},
		{
			MethodName: "UpdateSubnet6",
			Handler:    _DHCPManager_UpdateSubnet6_Handler,
		},
		{
			MethodName: "CreatePool4",
			Handler:    _DHCPManager_CreatePool4_Handler,
		},
		{
			MethodName: "DeletePool4",
			Handler:    _DHCPManager_DeletePool4_Handler,
		},
		{
			MethodName: "UpdatePool4",
			Handler:    _DHCPManager_UpdatePool4_Handler,
		},
		{
			MethodName: "CreatePool6",
			Handler:    _DHCPManager_CreatePool6_Handler,
		},
		{
			MethodName: "DeletePool6",
			Handler:    _DHCPManager_DeletePool6_Handler,
		},
		{
			MethodName: "UpdatePool6",
			Handler:    _DHCPManager_UpdatePool6_Handler,
		},
		{
			MethodName: "CreatePDPool",
			Handler:    _DHCPManager_CreatePDPool_Handler,
		},
		{
			MethodName: "DeletePDPool",
			Handler:    _DHCPManager_DeletePDPool_Handler,
		},
		{
			MethodName: "UpdatePDPool",
			Handler:    _DHCPManager_UpdatePDPool_Handler,
		},
		{
			MethodName: "CreateReservation4",
			Handler:    _DHCPManager_CreateReservation4_Handler,
		},
		{
			MethodName: "DeleteReservation4",
			Handler:    _DHCPManager_DeleteReservation4_Handler,
		},
		{
			MethodName: "UpdateReservation4",
			Handler:    _DHCPManager_UpdateReservation4_Handler,
		},
		{
			MethodName: "CreateReservation6",
			Handler:    _DHCPManager_CreateReservation6_Handler,
		},
		{
			MethodName: "DeleteReservation6",
			Handler:    _DHCPManager_DeleteReservation6_Handler,
		},
		{
			MethodName: "UpdateReservation6",
			Handler:    _DHCPManager_UpdateReservation6_Handler,
		},
		{
			MethodName: "CreateClientClass4",
			Handler:    _DHCPManager_CreateClientClass4_Handler,
		},
		{
			MethodName: "DeleteClientClass4",
			Handler:    _DHCPManager_DeleteClientClass4_Handler,
		},
		{
			MethodName: "UpdateClientClass4",
			Handler:    _DHCPManager_UpdateClientClass4_Handler,
		},
		{
			MethodName: "UpdateGlobalConfig",
			Handler:    _DHCPManager_UpdateGlobalConfig_Handler,
		},
		{
			MethodName: "GetSubnet4LeasesCount",
			Handler:    _DHCPManager_GetSubnet4LeasesCount_Handler,
		},
		{
			MethodName: "GetPool4LeasesCount",
			Handler:    _DHCPManager_GetPool4LeasesCount_Handler,
		},
		{
			MethodName: "GetReservation4LeasesCount",
			Handler:    _DHCPManager_GetReservation4LeasesCount_Handler,
		},
		{
			MethodName: "GetSubnet6LeasesCount",
			Handler:    _DHCPManager_GetSubnet6LeasesCount_Handler,
		},
		{
			MethodName: "GetPool6LeasesCount",
			Handler:    _DHCPManager_GetPool6LeasesCount_Handler,
		},
		{
			MethodName: "GetReservation6LeasesCount",
			Handler:    _DHCPManager_GetReservation6LeasesCount_Handler,
		},
		{
			MethodName: "GetSubnet4Leases",
			Handler:    _DHCPManager_GetSubnet4Leases_Handler,
		},
		{
			MethodName: "GetSubnet6Leases",
			Handler:    _DHCPManager_GetSubnet6Leases_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dhcp.proto",
}
