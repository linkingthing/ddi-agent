// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dhcp.proto

package proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DHCPLease6_LeaseType int32

const (
	DHCPLease6_TYPE_NA DHCPLease6_LeaseType = 0
	DHCPLease6_TYPE_TA DHCPLease6_LeaseType = 1
	DHCPLease6_TYPE_PD DHCPLease6_LeaseType = 2
	DHCPLease6_TYPE_V4 DHCPLease6_LeaseType = 3
)

var DHCPLease6_LeaseType_name = map[int32]string{
	0: "TYPE_NA",
	1: "TYPE_TA",
	2: "TYPE_PD",
	3: "TYPE_V4",
}
var DHCPLease6_LeaseType_value = map[string]int32{
	"TYPE_NA": 0,
	"TYPE_TA": 1,
	"TYPE_PD": 2,
	"TYPE_V4": 3,
}

func (x DHCPLease6_LeaseType) String() string {
	return proto.EnumName(DHCPLease6_LeaseType_name, int32(x))
}
func (DHCPLease6_LeaseType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dhcp_7955f288d15089a5, []int{32, 0}
}

type CreateSubnet4Request struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Ipnet                string   `protobuf:"bytes,2,opt,name=ipnet,proto3" json:"ipnet,omitempty"`
	ValidLifetime        uint32   `protobuf:"varint,3,opt,name=valid_lifetime,json=validLifetime,proto3" json:"valid_lifetime,omitempty"`
	MaxValidLifetime     uint32   `protobuf:"varint,4,opt,name=max_valid_lifetime,json=maxValidLifetime,proto3" json:"max_valid_lifetime,omitempty"`
	MinValidLifetime     uint32   `protobuf:"varint,5,opt,name=min_valid_lifetime,json=minValidLifetime,proto3" json:"min_valid_lifetime,omitempty"`
	DomainServers        []string `protobuf:"bytes,6,rep,name=domain_servers,json=domainServers,proto3" json:"domain_servers,omitempty"`
	Routers              []string `protobuf:"bytes,7,rep,name=routers,proto3" json:"routers,omitempty"`
	ClientClass          string   `protobuf:"bytes,8,opt,name=client_class,json=clientClass,proto3" json:"client_class,omitempty"`
	RelayAgentAddresses  []string `protobuf:"bytes,9,rep,name=relay_agent_addresses,json=relayAgentAddresses,proto3" json:"relay_agent_addresses,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateSubnet4Request) Reset()         { *m = CreateSubnet4Request{} }
func (m *CreateSubnet4Request) String() string { return proto.CompactTextString(m) }
func (*CreateSubnet4Request) ProtoMessage()    {}
func (*CreateSubnet4Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_dhcp_7955f288d15089a5, []int{0}
}
func (m *CreateSubnet4Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateSubnet4Request.Unmarshal(m, b)
}
func (m *CreateSubnet4Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateSubnet4Request.Marshal(b, m, deterministic)
}
func (dst *CreateSubnet4Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSubnet4Request.Merge(dst, src)
}
func (m *CreateSubnet4Request) XXX_Size() int {
	return xxx_messageInfo_CreateSubnet4Request.Size(m)
}
func (m *CreateSubnet4Request) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSubnet4Request.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSubnet4Request proto.InternalMessageInfo

func (m *CreateSubnet4Request) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CreateSubnet4Request) GetIpnet() string {
	if m != nil {
		return m.Ipnet
	}
	return ""
}

func (m *CreateSubnet4Request) GetValidLifetime() uint32 {
	if m != nil {
		return m.ValidLifetime
	}
	return 0
}

func (m *CreateSubnet4Request) GetMaxValidLifetime() uint32 {
	if m != nil {
		return m.MaxValidLifetime
	}
	return 0
}

func (m *CreateSubnet4Request) GetMinValidLifetime() uint32 {
	if m != nil {
		return m.MinValidLifetime
	}
	return 0
}

func (m *CreateSubnet4Request) GetDomainServers() []string {
	if m != nil {
		return m.DomainServers
	}
	return nil
}

func (m *CreateSubnet4Request) GetRouters() []string {
	if m != nil {
		return m.Routers
	}
	return nil
}

func (m *CreateSubnet4Request) GetClientClass() string {
	if m != nil {
		return m.ClientClass
	}
	return ""
}

func (m *CreateSubnet4Request) GetRelayAgentAddresses() []string {
	if m != nil {
		return m.RelayAgentAddresses
	}
	return nil
}

type DeleteSubnet4Request struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteSubnet4Request) Reset()         { *m = DeleteSubnet4Request{} }
func (m *DeleteSubnet4Request) String() string { return proto.CompactTextString(m) }
func (*DeleteSubnet4Request) ProtoMessage()    {}
func (*DeleteSubnet4Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_dhcp_7955f288d15089a5, []int{1}
}
func (m *DeleteSubnet4Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteSubnet4Request.Unmarshal(m, b)
}
func (m *DeleteSubnet4Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteSubnet4Request.Marshal(b, m, deterministic)
}
func (dst *DeleteSubnet4Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteSubnet4Request.Merge(dst, src)
}
func (m *DeleteSubnet4Request) XXX_Size() int {
	return xxx_messageInfo_DeleteSubnet4Request.Size(m)
}
func (m *DeleteSubnet4Request) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteSubnet4Request.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteSubnet4Request proto.InternalMessageInfo

func (m *DeleteSubnet4Request) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type UpdateSubnet4Request struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ValidLifetime        uint32   `protobuf:"varint,2,opt,name=valid_lifetime,json=validLifetime,proto3" json:"valid_lifetime,omitempty"`
	MaxValidLifetime     uint32   `protobuf:"varint,3,opt,name=max_valid_lifetime,json=maxValidLifetime,proto3" json:"max_valid_lifetime,omitempty"`
	MinValidLifetime     uint32   `protobuf:"varint,4,opt,name=min_valid_lifetime,json=minValidLifetime,proto3" json:"min_valid_lifetime,omitempty"`
	DomainServers        []string `protobuf:"bytes,5,rep,name=domain_servers,json=domainServers,proto3" json:"domain_servers,omitempty"`
	Routers              []string `protobuf:"bytes,6,rep,name=routers,proto3" json:"routers,omitempty"`
	ClientClass          string   `protobuf:"bytes,7,opt,name=client_class,json=clientClass,proto3" json:"client_class,omitempty"`
	RelayAgentAddresses  []string `protobuf:"bytes,8,rep,name=relay_agent_addresses,json=relayAgentAddresses,proto3" json:"relay_agent_addresses,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateSubnet4Request) Reset()         { *m = UpdateSubnet4Request{} }
func (m *UpdateSubnet4Request) String() string { return proto.CompactTextString(m) }
func (*UpdateSubnet4Request) ProtoMessage()    {}
func (*UpdateSubnet4Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_dhcp_7955f288d15089a5, []int{2}
}
func (m *UpdateSubnet4Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateSubnet4Request.Unmarshal(m, b)
}
func (m *UpdateSubnet4Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateSubnet4Request.Marshal(b, m, deterministic)
}
func (dst *UpdateSubnet4Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateSubnet4Request.Merge(dst, src)
}
func (m *UpdateSubnet4Request) XXX_Size() int {
	return xxx_messageInfo_UpdateSubnet4Request.Size(m)
}
func (m *UpdateSubnet4Request) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateSubnet4Request.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateSubnet4Request proto.InternalMessageInfo

func (m *UpdateSubnet4Request) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateSubnet4Request) GetValidLifetime() uint32 {
	if m != nil {
		return m.ValidLifetime
	}
	return 0
}

func (m *UpdateSubnet4Request) GetMaxValidLifetime() uint32 {
	if m != nil {
		return m.MaxValidLifetime
	}
	return 0
}

func (m *UpdateSubnet4Request) GetMinValidLifetime() uint32 {
	if m != nil {
		return m.MinValidLifetime
	}
	return 0
}

func (m *UpdateSubnet4Request) GetDomainServers() []string {
	if m != nil {
		return m.DomainServers
	}
	return nil
}

func (m *UpdateSubnet4Request) GetRouters() []string {
	if m != nil {
		return m.Routers
	}
	return nil
}

func (m *UpdateSubnet4Request) GetClientClass() string {
	if m != nil {
		return m.ClientClass
	}
	return ""
}

func (m *UpdateSubnet4Request) GetRelayAgentAddresses() []string {
	if m != nil {
		return m.RelayAgentAddresses
	}
	return nil
}

type CreateSubnet6Request struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Ipnet                string   `protobuf:"bytes,2,opt,name=ipnet,proto3" json:"ipnet,omitempty"`
	ValidLifetime        uint32   `protobuf:"varint,3,opt,name=valid_lifetime,json=validLifetime,proto3" json:"valid_lifetime,omitempty"`
	MaxValidLifetime     uint32   `protobuf:"varint,4,opt,name=max_valid_lifetime,json=maxValidLifetime,proto3" json:"max_valid_lifetime,omitempty"`
	MinValidLifetime     uint32   `protobuf:"varint,5,opt,name=min_valid_lifetime,json=minValidLifetime,proto3" json:"min_valid_lifetime,omitempty"`
	DnsServers           []string `protobuf:"bytes,6,rep,name=dns_servers,json=dnsServers,proto3" json:"dns_servers,omitempty"`
	ClientClass          string   `protobuf:"bytes,7,opt,name=client_class,json=clientClass,proto3" json:"client_class,omitempty"`
	RelayAgentAddresses  []string `protobuf:"bytes,8,rep,name=relay_agent_addresses,json=relayAgentAddresses,proto3" json:"relay_agent_addresses,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateSubnet6Request) Reset()         { *m = CreateSubnet6Request{} }
func (m *CreateSubnet6Request) String() string { return proto.CompactTextString(m) }
func (*CreateSubnet6Request) ProtoMessage()    {}
func (*CreateSubnet6Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_dhcp_7955f288d15089a5, []int{3}
}
func (m *CreateSubnet6Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateSubnet6Request.Unmarshal(m, b)
}
func (m *CreateSubnet6Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateSubnet6Request.Marshal(b, m, deterministic)
}
func (dst *CreateSubnet6Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSubnet6Request.Merge(dst, src)
}
func (m *CreateSubnet6Request) XXX_Size() int {
	return xxx_messageInfo_CreateSubnet6Request.Size(m)
}
func (m *CreateSubnet6Request) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSubnet6Request.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSubnet6Request proto.InternalMessageInfo

func (m *CreateSubnet6Request) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CreateSubnet6Request) GetIpnet() string {
	if m != nil {
		return m.Ipnet
	}
	return ""
}

func (m *CreateSubnet6Request) GetValidLifetime() uint32 {
	if m != nil {
		return m.ValidLifetime
	}
	return 0
}

func (m *CreateSubnet6Request) GetMaxValidLifetime() uint32 {
	if m != nil {
		return m.MaxValidLifetime
	}
	return 0
}

func (m *CreateSubnet6Request) GetMinValidLifetime() uint32 {
	if m != nil {
		return m.MinValidLifetime
	}
	return 0
}

func (m *CreateSubnet6Request) GetDnsServers() []string {
	if m != nil {
		return m.DnsServers
	}
	return nil
}

func (m *CreateSubnet6Request) GetClientClass() string {
	if m != nil {
		return m.ClientClass
	}
	return ""
}

func (m *CreateSubnet6Request) GetRelayAgentAddresses() []string {
	if m != nil {
		return m.RelayAgentAddresses
	}
	return nil
}

type DeleteSubnet6Request struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteSubnet6Request) Reset()         { *m = DeleteSubnet6Request{} }
func (m *DeleteSubnet6Request) String() string { return proto.CompactTextString(m) }
func (*DeleteSubnet6Request) ProtoMessage()    {}
func (*DeleteSubnet6Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_dhcp_7955f288d15089a5, []int{4}
}
func (m *DeleteSubnet6Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteSubnet6Request.Unmarshal(m, b)
}
func (m *DeleteSubnet6Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteSubnet6Request.Marshal(b, m, deterministic)
}
func (dst *DeleteSubnet6Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteSubnet6Request.Merge(dst, src)
}
func (m *DeleteSubnet6Request) XXX_Size() int {
	return xxx_messageInfo_DeleteSubnet6Request.Size(m)
}
func (m *DeleteSubnet6Request) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteSubnet6Request.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteSubnet6Request proto.InternalMessageInfo

func (m *DeleteSubnet6Request) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type UpdateSubnet6Request struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ValidLifetime        uint32   `protobuf:"varint,2,opt,name=valid_lifetime,json=validLifetime,proto3" json:"valid_lifetime,omitempty"`
	MaxValidLifetime     uint32   `protobuf:"varint,3,opt,name=max_valid_lifetime,json=maxValidLifetime,proto3" json:"max_valid_lifetime,omitempty"`
	MinValidLifetime     uint32   `protobuf:"varint,4,opt,name=min_valid_lifetime,json=minValidLifetime,proto3" json:"min_valid_lifetime,omitempty"`
	DnsServers           []string `protobuf:"bytes,5,rep,name=dns_servers,json=dnsServers,proto3" json:"dns_servers,omitempty"`
	ClientClass          string   `protobuf:"bytes,6,opt,name=client_class,json=clientClass,proto3" json:"client_class,omitempty"`
	RelayAgentAddresses  []string `protobuf:"bytes,7,rep,name=relay_agent_addresses,json=relayAgentAddresses,proto3" json:"relay_agent_addresses,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateSubnet6Request) Reset()         { *m = UpdateSubnet6Request{} }
func (m *UpdateSubnet6Request) String() string { return proto.CompactTextString(m) }
func (*UpdateSubnet6Request) ProtoMessage()    {}
func (*UpdateSubnet6Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_dhcp_7955f288d15089a5, []int{5}
}
func (m *UpdateSubnet6Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateSubnet6Request.Unmarshal(m, b)
}
func (m *UpdateSubnet6Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateSubnet6Request.Marshal(b, m, deterministic)
}
func (dst *UpdateSubnet6Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateSubnet6Request.Merge(dst, src)
}
func (m *UpdateSubnet6Request) XXX_Size() int {
	return xxx_messageInfo_UpdateSubnet6Request.Size(m)
}
func (m *UpdateSubnet6Request) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateSubnet6Request.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateSubnet6Request proto.InternalMessageInfo

func (m *UpdateSubnet6Request) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateSubnet6Request) GetValidLifetime() uint32 {
	if m != nil {
		return m.ValidLifetime
	}
	return 0
}

func (m *UpdateSubnet6Request) GetMaxValidLifetime() uint32 {
	if m != nil {
		return m.MaxValidLifetime
	}
	return 0
}

func (m *UpdateSubnet6Request) GetMinValidLifetime() uint32 {
	if m != nil {
		return m.MinValidLifetime
	}
	return 0
}

func (m *UpdateSubnet6Request) GetDnsServers() []string {
	if m != nil {
		return m.DnsServers
	}
	return nil
}

func (m *UpdateSubnet6Request) GetClientClass() string {
	if m != nil {
		return m.ClientClass
	}
	return ""
}

func (m *UpdateSubnet6Request) GetRelayAgentAddresses() []string {
	if m != nil {
		return m.RelayAgentAddresses
	}
	return nil
}

type CreatePool4Request struct {
	SubnetId             uint32   `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	BeginAddress         string   `protobuf:"bytes,2,opt,name=begin_address,json=beginAddress,proto3" json:"begin_address,omitempty"`
	EndAddress           string   `protobuf:"bytes,3,opt,name=end_address,json=endAddress,proto3" json:"end_address,omitempty"`
	DomainServers        []string `protobuf:"bytes,4,rep,name=domain_servers,json=domainServers,proto3" json:"domain_servers,omitempty"`
	Routers              []string `protobuf:"bytes,5,rep,name=routers,proto3" json:"routers,omitempty"`
	ClientClass          string   `protobuf:"bytes,6,opt,name=client_class,json=clientClass,proto3" json:"client_class,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreatePool4Request) Reset()         { *m = CreatePool4Request{} }
func (m *CreatePool4Request) String() string { return proto.CompactTextString(m) }
func (*CreatePool4Request) ProtoMessage()    {}
func (*CreatePool4Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_dhcp_7955f288d15089a5, []int{6}
}
func (m *CreatePool4Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreatePool4Request.Unmarshal(m, b)
}
func (m *CreatePool4Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreatePool4Request.Marshal(b, m, deterministic)
}
func (dst *CreatePool4Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreatePool4Request.Merge(dst, src)
}
func (m *CreatePool4Request) XXX_Size() int {
	return xxx_messageInfo_CreatePool4Request.Size(m)
}
func (m *CreatePool4Request) XXX_DiscardUnknown() {
	xxx_messageInfo_CreatePool4Request.DiscardUnknown(m)
}

var xxx_messageInfo_CreatePool4Request proto.InternalMessageInfo

func (m *CreatePool4Request) GetSubnetId() uint32 {
	if m != nil {
		return m.SubnetId
	}
	return 0
}

func (m *CreatePool4Request) GetBeginAddress() string {
	if m != nil {
		return m.BeginAddress
	}
	return ""
}

func (m *CreatePool4Request) GetEndAddress() string {
	if m != nil {
		return m.EndAddress
	}
	return ""
}

func (m *CreatePool4Request) GetDomainServers() []string {
	if m != nil {
		return m.DomainServers
	}
	return nil
}

func (m *CreatePool4Request) GetRouters() []string {
	if m != nil {
		return m.Routers
	}
	return nil
}

func (m *CreatePool4Request) GetClientClass() string {
	if m != nil {
		return m.ClientClass
	}
	return ""
}

type DeletePool4Request struct {
	SubnetId             uint32   `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	BeginAddress         string   `protobuf:"bytes,2,opt,name=begin_address,json=beginAddress,proto3" json:"begin_address,omitempty"`
	EndAddress           string   `protobuf:"bytes,3,opt,name=end_address,json=endAddress,proto3" json:"end_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeletePool4Request) Reset()         { *m = DeletePool4Request{} }
func (m *DeletePool4Request) String() string { return proto.CompactTextString(m) }
func (*DeletePool4Request) ProtoMessage()    {}
func (*DeletePool4Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_dhcp_7955f288d15089a5, []int{7}
}
func (m *DeletePool4Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeletePool4Request.Unmarshal(m, b)
}
func (m *DeletePool4Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeletePool4Request.Marshal(b, m, deterministic)
}
func (dst *DeletePool4Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeletePool4Request.Merge(dst, src)
}
func (m *DeletePool4Request) XXX_Size() int {
	return xxx_messageInfo_DeletePool4Request.Size(m)
}
func (m *DeletePool4Request) XXX_DiscardUnknown() {
	xxx_messageInfo_DeletePool4Request.DiscardUnknown(m)
}

var xxx_messageInfo_DeletePool4Request proto.InternalMessageInfo

func (m *DeletePool4Request) GetSubnetId() uint32 {
	if m != nil {
		return m.SubnetId
	}
	return 0
}

func (m *DeletePool4Request) GetBeginAddress() string {
	if m != nil {
		return m.BeginAddress
	}
	return ""
}

func (m *DeletePool4Request) GetEndAddress() string {
	if m != nil {
		return m.EndAddress
	}
	return ""
}

type UpdatePool4Request struct {
	SubnetId             uint32   `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	BeginAddress         string   `protobuf:"bytes,2,opt,name=begin_address,json=beginAddress,proto3" json:"begin_address,omitempty"`
	EndAddress           string   `protobuf:"bytes,3,opt,name=end_address,json=endAddress,proto3" json:"end_address,omitempty"`
	DomainServers        []string `protobuf:"bytes,4,rep,name=domain_servers,json=domainServers,proto3" json:"domain_servers,omitempty"`
	Routers              []string `protobuf:"bytes,5,rep,name=routers,proto3" json:"routers,omitempty"`
	ClientClass          string   `protobuf:"bytes,6,opt,name=client_class,json=clientClass,proto3" json:"client_class,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdatePool4Request) Reset()         { *m = UpdatePool4Request{} }
func (m *UpdatePool4Request) String() string { return proto.CompactTextString(m) }
func (*UpdatePool4Request) ProtoMessage()    {}
func (*UpdatePool4Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_dhcp_7955f288d15089a5, []int{8}
}
func (m *UpdatePool4Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdatePool4Request.Unmarshal(m, b)
}
func (m *UpdatePool4Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdatePool4Request.Marshal(b, m, deterministic)
}
func (dst *UpdatePool4Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatePool4Request.Merge(dst, src)
}
func (m *UpdatePool4Request) XXX_Size() int {
	return xxx_messageInfo_UpdatePool4Request.Size(m)
}
func (m *UpdatePool4Request) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatePool4Request.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatePool4Request proto.InternalMessageInfo

func (m *UpdatePool4Request) GetSubnetId() uint32 {
	if m != nil {
		return m.SubnetId
	}
	return 0
}

func (m *UpdatePool4Request) GetBeginAddress() string {
	if m != nil {
		return m.BeginAddress
	}
	return ""
}

func (m *UpdatePool4Request) GetEndAddress() string {
	if m != nil {
		return m.EndAddress
	}
	return ""
}

func (m *UpdatePool4Request) GetDomainServers() []string {
	if m != nil {
		return m.DomainServers
	}
	return nil
}

func (m *UpdatePool4Request) GetRouters() []string {
	if m != nil {
		return m.Routers
	}
	return nil
}

func (m *UpdatePool4Request) GetClientClass() string {
	if m != nil {
		return m.ClientClass
	}
	return ""
}

type CreatePool6Request struct {
	SubnetId             uint32   `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	BeginAddress         string   `protobuf:"bytes,2,opt,name=begin_address,json=beginAddress,proto3" json:"begin_address,omitempty"`
	EndAddress           string   `protobuf:"bytes,3,opt,name=end_address,json=endAddress,proto3" json:"end_address,omitempty"`
	DnsServers           []string `protobuf:"bytes,4,rep,name=dns_servers,json=dnsServers,proto3" json:"dns_servers,omitempty"`
	ClientClass          string   `protobuf:"bytes,5,opt,name=client_class,json=clientClass,proto3" json:"client_class,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreatePool6Request) Reset()         { *m = CreatePool6Request{} }
func (m *CreatePool6Request) String() string { return proto.CompactTextString(m) }
func (*CreatePool6Request) ProtoMessage()    {}
func (*CreatePool6Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_dhcp_7955f288d15089a5, []int{9}
}
func (m *CreatePool6Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreatePool6Request.Unmarshal(m, b)
}
func (m *CreatePool6Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreatePool6Request.Marshal(b, m, deterministic)
}
func (dst *CreatePool6Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreatePool6Request.Merge(dst, src)
}
func (m *CreatePool6Request) XXX_Size() int {
	return xxx_messageInfo_CreatePool6Request.Size(m)
}
func (m *CreatePool6Request) XXX_DiscardUnknown() {
	xxx_messageInfo_CreatePool6Request.DiscardUnknown(m)
}

var xxx_messageInfo_CreatePool6Request proto.InternalMessageInfo

func (m *CreatePool6Request) GetSubnetId() uint32 {
	if m != nil {
		return m.SubnetId
	}
	return 0
}

func (m *CreatePool6Request) GetBeginAddress() string {
	if m != nil {
		return m.BeginAddress
	}
	return ""
}

func (m *CreatePool6Request) GetEndAddress() string {
	if m != nil {
		return m.EndAddress
	}
	return ""
}

func (m *CreatePool6Request) GetDnsServers() []string {
	if m != nil {
		return m.DnsServers
	}
	return nil
}

func (m *CreatePool6Request) GetClientClass() string {
	if m != nil {
		return m.ClientClass
	}
	return ""
}

type DeletePool6Request struct {
	SubnetId             uint32   `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	BeginAddress         string   `protobuf:"bytes,2,opt,name=begin_address,json=beginAddress,proto3" json:"begin_address,omitempty"`
	EndAddress           string   `protobuf:"bytes,3,opt,name=end_address,json=endAddress,proto3" json:"end_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeletePool6Request) Reset()         { *m = DeletePool6Request{} }
func (m *DeletePool6Request) String() string { return proto.CompactTextString(m) }
func (*DeletePool6Request) ProtoMessage()    {}
func (*DeletePool6Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_dhcp_7955f288d15089a5, []int{10}
}
func (m *DeletePool6Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeletePool6Request.Unmarshal(m, b)
}
func (m *DeletePool6Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeletePool6Request.Marshal(b, m, deterministic)
}
func (dst *DeletePool6Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeletePool6Request.Merge(dst, src)
}
func (m *DeletePool6Request) XXX_Size() int {
	return xxx_messageInfo_DeletePool6Request.Size(m)
}
func (m *DeletePool6Request) XXX_DiscardUnknown() {
	xxx_messageInfo_DeletePool6Request.DiscardUnknown(m)
}

var xxx_messageInfo_DeletePool6Request proto.InternalMessageInfo

func (m *DeletePool6Request) GetSubnetId() uint32 {
	if m != nil {
		return m.SubnetId
	}
	return 0
}

func (m *DeletePool6Request) GetBeginAddress() string {
	if m != nil {
		return m.BeginAddress
	}
	return ""
}

func (m *DeletePool6Request) GetEndAddress() string {
	if m != nil {
		return m.EndAddress
	}
	return ""
}

type UpdatePool6Request struct {
	SubnetId             uint32   `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	BeginAddress         string   `protobuf:"bytes,2,opt,name=begin_address,json=beginAddress,proto3" json:"begin_address,omitempty"`
	EndAddress           string   `protobuf:"bytes,3,opt,name=end_address,json=endAddress,proto3" json:"end_address,omitempty"`
	DnsServers           []string `protobuf:"bytes,4,rep,name=dns_servers,json=dnsServers,proto3" json:"dns_servers,omitempty"`
	ClientClass          string   `protobuf:"bytes,5,opt,name=client_class,json=clientClass,proto3" json:"client_class,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdatePool6Request) Reset()         { *m = UpdatePool6Request{} }
func (m *UpdatePool6Request) String() string { return proto.CompactTextString(m) }
func (*UpdatePool6Request) ProtoMessage()    {}
func (*UpdatePool6Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_dhcp_7955f288d15089a5, []int{11}
}
func (m *UpdatePool6Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdatePool6Request.Unmarshal(m, b)
}
func (m *UpdatePool6Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdatePool6Request.Marshal(b, m, deterministic)
}
func (dst *UpdatePool6Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatePool6Request.Merge(dst, src)
}
func (m *UpdatePool6Request) XXX_Size() int {
	return xxx_messageInfo_UpdatePool6Request.Size(m)
}
func (m *UpdatePool6Request) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatePool6Request.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatePool6Request proto.InternalMessageInfo

func (m *UpdatePool6Request) GetSubnetId() uint32 {
	if m != nil {
		return m.SubnetId
	}
	return 0
}

func (m *UpdatePool6Request) GetBeginAddress() string {
	if m != nil {
		return m.BeginAddress
	}
	return ""
}

func (m *UpdatePool6Request) GetEndAddress() string {
	if m != nil {
		return m.EndAddress
	}
	return ""
}

func (m *UpdatePool6Request) GetDnsServers() []string {
	if m != nil {
		return m.DnsServers
	}
	return nil
}

func (m *UpdatePool6Request) GetClientClass() string {
	if m != nil {
		return m.ClientClass
	}
	return ""
}

type CreateReservation4Request struct {
	SubnetId             uint32   `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	HwAddress            string   `protobuf:"bytes,2,opt,name=hw_address,json=hwAddress,proto3" json:"hw_address,omitempty"`
	IpAddress            string   `protobuf:"bytes,3,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	DomainServers        []string `protobuf:"bytes,4,rep,name=domain_servers,json=domainServers,proto3" json:"domain_servers,omitempty"`
	Routers              []string `protobuf:"bytes,5,rep,name=routers,proto3" json:"routers,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateReservation4Request) Reset()         { *m = CreateReservation4Request{} }
func (m *CreateReservation4Request) String() string { return proto.CompactTextString(m) }
func (*CreateReservation4Request) ProtoMessage()    {}
func (*CreateReservation4Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_dhcp_7955f288d15089a5, []int{12}
}
func (m *CreateReservation4Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateReservation4Request.Unmarshal(m, b)
}
func (m *CreateReservation4Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateReservation4Request.Marshal(b, m, deterministic)
}
func (dst *CreateReservation4Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateReservation4Request.Merge(dst, src)
}
func (m *CreateReservation4Request) XXX_Size() int {
	return xxx_messageInfo_CreateReservation4Request.Size(m)
}
func (m *CreateReservation4Request) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateReservation4Request.DiscardUnknown(m)
}

var xxx_messageInfo_CreateReservation4Request proto.InternalMessageInfo

func (m *CreateReservation4Request) GetSubnetId() uint32 {
	if m != nil {
		return m.SubnetId
	}
	return 0
}

func (m *CreateReservation4Request) GetHwAddress() string {
	if m != nil {
		return m.HwAddress
	}
	return ""
}

func (m *CreateReservation4Request) GetIpAddress() string {
	if m != nil {
		return m.IpAddress
	}
	return ""
}

func (m *CreateReservation4Request) GetDomainServers() []string {
	if m != nil {
		return m.DomainServers
	}
	return nil
}

func (m *CreateReservation4Request) GetRouters() []string {
	if m != nil {
		return m.Routers
	}
	return nil
}

type DeleteReservation4Request struct {
	SubnetId             uint32   `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	HwAddress            string   `protobuf:"bytes,2,opt,name=hw_address,json=hwAddress,proto3" json:"hw_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteReservation4Request) Reset()         { *m = DeleteReservation4Request{} }
func (m *DeleteReservation4Request) String() string { return proto.CompactTextString(m) }
func (*DeleteReservation4Request) ProtoMessage()    {}
func (*DeleteReservation4Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_dhcp_7955f288d15089a5, []int{13}
}
func (m *DeleteReservation4Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteReservation4Request.Unmarshal(m, b)
}
func (m *DeleteReservation4Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteReservation4Request.Marshal(b, m, deterministic)
}
func (dst *DeleteReservation4Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteReservation4Request.Merge(dst, src)
}
func (m *DeleteReservation4Request) XXX_Size() int {
	return xxx_messageInfo_DeleteReservation4Request.Size(m)
}
func (m *DeleteReservation4Request) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteReservation4Request.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteReservation4Request proto.InternalMessageInfo

func (m *DeleteReservation4Request) GetSubnetId() uint32 {
	if m != nil {
		return m.SubnetId
	}
	return 0
}

func (m *DeleteReservation4Request) GetHwAddress() string {
	if m != nil {
		return m.HwAddress
	}
	return ""
}

type UpdateReservation4Request struct {
	SubnetId             uint32   `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	HwAddress            string   `protobuf:"bytes,2,opt,name=hw_address,json=hwAddress,proto3" json:"hw_address,omitempty"`
	DomainServers        []string `protobuf:"bytes,3,rep,name=domain_servers,json=domainServers,proto3" json:"domain_servers,omitempty"`
	Routers              []string `protobuf:"bytes,4,rep,name=routers,proto3" json:"routers,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateReservation4Request) Reset()         { *m = UpdateReservation4Request{} }
func (m *UpdateReservation4Request) String() string { return proto.CompactTextString(m) }
func (*UpdateReservation4Request) ProtoMessage()    {}
func (*UpdateReservation4Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_dhcp_7955f288d15089a5, []int{14}
}
func (m *UpdateReservation4Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateReservation4Request.Unmarshal(m, b)
}
func (m *UpdateReservation4Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateReservation4Request.Marshal(b, m, deterministic)
}
func (dst *UpdateReservation4Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateReservation4Request.Merge(dst, src)
}
func (m *UpdateReservation4Request) XXX_Size() int {
	return xxx_messageInfo_UpdateReservation4Request.Size(m)
}
func (m *UpdateReservation4Request) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateReservation4Request.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateReservation4Request proto.InternalMessageInfo

func (m *UpdateReservation4Request) GetSubnetId() uint32 {
	if m != nil {
		return m.SubnetId
	}
	return 0
}

func (m *UpdateReservation4Request) GetHwAddress() string {
	if m != nil {
		return m.HwAddress
	}
	return ""
}

func (m *UpdateReservation4Request) GetDomainServers() []string {
	if m != nil {
		return m.DomainServers
	}
	return nil
}

func (m *UpdateReservation4Request) GetRouters() []string {
	if m != nil {
		return m.Routers
	}
	return nil
}

type CreateReservation6Request struct {
	SubnetId             uint32   `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	HwAddress            string   `protobuf:"bytes,2,opt,name=hw_address,json=hwAddress,proto3" json:"hw_address,omitempty"`
	IpAddresses          []string `protobuf:"bytes,3,rep,name=ip_addresses,json=ipAddresses,proto3" json:"ip_addresses,omitempty"`
	DnsServers           []string `protobuf:"bytes,4,rep,name=dns_servers,json=dnsServers,proto3" json:"dns_servers,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateReservation6Request) Reset()         { *m = CreateReservation6Request{} }
func (m *CreateReservation6Request) String() string { return proto.CompactTextString(m) }
func (*CreateReservation6Request) ProtoMessage()    {}
func (*CreateReservation6Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_dhcp_7955f288d15089a5, []int{15}
}
func (m *CreateReservation6Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateReservation6Request.Unmarshal(m, b)
}
func (m *CreateReservation6Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateReservation6Request.Marshal(b, m, deterministic)
}
func (dst *CreateReservation6Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateReservation6Request.Merge(dst, src)
}
func (m *CreateReservation6Request) XXX_Size() int {
	return xxx_messageInfo_CreateReservation6Request.Size(m)
}
func (m *CreateReservation6Request) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateReservation6Request.DiscardUnknown(m)
}

var xxx_messageInfo_CreateReservation6Request proto.InternalMessageInfo

func (m *CreateReservation6Request) GetSubnetId() uint32 {
	if m != nil {
		return m.SubnetId
	}
	return 0
}

func (m *CreateReservation6Request) GetHwAddress() string {
	if m != nil {
		return m.HwAddress
	}
	return ""
}

func (m *CreateReservation6Request) GetIpAddresses() []string {
	if m != nil {
		return m.IpAddresses
	}
	return nil
}

func (m *CreateReservation6Request) GetDnsServers() []string {
	if m != nil {
		return m.DnsServers
	}
	return nil
}

type DeleteReservation6Request struct {
	SubnetId             uint32   `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	HwAddress            string   `protobuf:"bytes,2,opt,name=hw_address,json=hwAddress,proto3" json:"hw_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteReservation6Request) Reset()         { *m = DeleteReservation6Request{} }
func (m *DeleteReservation6Request) String() string { return proto.CompactTextString(m) }
func (*DeleteReservation6Request) ProtoMessage()    {}
func (*DeleteReservation6Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_dhcp_7955f288d15089a5, []int{16}
}
func (m *DeleteReservation6Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteReservation6Request.Unmarshal(m, b)
}
func (m *DeleteReservation6Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteReservation6Request.Marshal(b, m, deterministic)
}
func (dst *DeleteReservation6Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteReservation6Request.Merge(dst, src)
}
func (m *DeleteReservation6Request) XXX_Size() int {
	return xxx_messageInfo_DeleteReservation6Request.Size(m)
}
func (m *DeleteReservation6Request) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteReservation6Request.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteReservation6Request proto.InternalMessageInfo

func (m *DeleteReservation6Request) GetSubnetId() uint32 {
	if m != nil {
		return m.SubnetId
	}
	return 0
}

func (m *DeleteReservation6Request) GetHwAddress() string {
	if m != nil {
		return m.HwAddress
	}
	return ""
}

type UpdateReservation6Request struct {
	SubnetId             uint32   `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	HwAddress            string   `protobuf:"bytes,2,opt,name=hw_address,json=hwAddress,proto3" json:"hw_address,omitempty"`
	DnsServers           []string `protobuf:"bytes,3,rep,name=dns_servers,json=dnsServers,proto3" json:"dns_servers,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateReservation6Request) Reset()         { *m = UpdateReservation6Request{} }
func (m *UpdateReservation6Request) String() string { return proto.CompactTextString(m) }
func (*UpdateReservation6Request) ProtoMessage()    {}
func (*UpdateReservation6Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_dhcp_7955f288d15089a5, []int{17}
}
func (m *UpdateReservation6Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateReservation6Request.Unmarshal(m, b)
}
func (m *UpdateReservation6Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateReservation6Request.Marshal(b, m, deterministic)
}
func (dst *UpdateReservation6Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateReservation6Request.Merge(dst, src)
}
func (m *UpdateReservation6Request) XXX_Size() int {
	return xxx_messageInfo_UpdateReservation6Request.Size(m)
}
func (m *UpdateReservation6Request) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateReservation6Request.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateReservation6Request proto.InternalMessageInfo

func (m *UpdateReservation6Request) GetSubnetId() uint32 {
	if m != nil {
		return m.SubnetId
	}
	return 0
}

func (m *UpdateReservation6Request) GetHwAddress() string {
	if m != nil {
		return m.HwAddress
	}
	return ""
}

func (m *UpdateReservation6Request) GetDnsServers() []string {
	if m != nil {
		return m.DnsServers
	}
	return nil
}

type CreatePDPoolRequest struct {
	SubnetId             uint32   `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	Prefix               string   `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
	PrefixLen            uint32   `protobuf:"varint,3,opt,name=prefix_len,json=prefixLen,proto3" json:"prefix_len,omitempty"`
	DelegatedLen         uint32   `protobuf:"varint,4,opt,name=delegated_len,json=delegatedLen,proto3" json:"delegated_len,omitempty"`
	DnsServers           []string `protobuf:"bytes,5,rep,name=dns_servers,json=dnsServers,proto3" json:"dns_servers,omitempty"`
	ClientClass          string   `protobuf:"bytes,6,opt,name=client_class,json=clientClass,proto3" json:"client_class,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreatePDPoolRequest) Reset()         { *m = CreatePDPoolRequest{} }
func (m *CreatePDPoolRequest) String() string { return proto.CompactTextString(m) }
func (*CreatePDPoolRequest) ProtoMessage()    {}
func (*CreatePDPoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dhcp_7955f288d15089a5, []int{18}
}
func (m *CreatePDPoolRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreatePDPoolRequest.Unmarshal(m, b)
}
func (m *CreatePDPoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreatePDPoolRequest.Marshal(b, m, deterministic)
}
func (dst *CreatePDPoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreatePDPoolRequest.Merge(dst, src)
}
func (m *CreatePDPoolRequest) XXX_Size() int {
	return xxx_messageInfo_CreatePDPoolRequest.Size(m)
}
func (m *CreatePDPoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreatePDPoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreatePDPoolRequest proto.InternalMessageInfo

func (m *CreatePDPoolRequest) GetSubnetId() uint32 {
	if m != nil {
		return m.SubnetId
	}
	return 0
}

func (m *CreatePDPoolRequest) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *CreatePDPoolRequest) GetPrefixLen() uint32 {
	if m != nil {
		return m.PrefixLen
	}
	return 0
}

func (m *CreatePDPoolRequest) GetDelegatedLen() uint32 {
	if m != nil {
		return m.DelegatedLen
	}
	return 0
}

func (m *CreatePDPoolRequest) GetDnsServers() []string {
	if m != nil {
		return m.DnsServers
	}
	return nil
}

func (m *CreatePDPoolRequest) GetClientClass() string {
	if m != nil {
		return m.ClientClass
	}
	return ""
}

type DeletePDPoolRequest struct {
	SubnetId             uint32   `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	Prefix               string   `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeletePDPoolRequest) Reset()         { *m = DeletePDPoolRequest{} }
func (m *DeletePDPoolRequest) String() string { return proto.CompactTextString(m) }
func (*DeletePDPoolRequest) ProtoMessage()    {}
func (*DeletePDPoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dhcp_7955f288d15089a5, []int{19}
}
func (m *DeletePDPoolRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeletePDPoolRequest.Unmarshal(m, b)
}
func (m *DeletePDPoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeletePDPoolRequest.Marshal(b, m, deterministic)
}
func (dst *DeletePDPoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeletePDPoolRequest.Merge(dst, src)
}
func (m *DeletePDPoolRequest) XXX_Size() int {
	return xxx_messageInfo_DeletePDPoolRequest.Size(m)
}
func (m *DeletePDPoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeletePDPoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeletePDPoolRequest proto.InternalMessageInfo

func (m *DeletePDPoolRequest) GetSubnetId() uint32 {
	if m != nil {
		return m.SubnetId
	}
	return 0
}

func (m *DeletePDPoolRequest) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

type UpdatePDPoolRequest struct {
	SubnetId             uint32   `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	Prefix               string   `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
	DnsServers           []string `protobuf:"bytes,3,rep,name=dns_servers,json=dnsServers,proto3" json:"dns_servers,omitempty"`
	ClientClass          string   `protobuf:"bytes,4,opt,name=client_class,json=clientClass,proto3" json:"client_class,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdatePDPoolRequest) Reset()         { *m = UpdatePDPoolRequest{} }
func (m *UpdatePDPoolRequest) String() string { return proto.CompactTextString(m) }
func (*UpdatePDPoolRequest) ProtoMessage()    {}
func (*UpdatePDPoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dhcp_7955f288d15089a5, []int{20}
}
func (m *UpdatePDPoolRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdatePDPoolRequest.Unmarshal(m, b)
}
func (m *UpdatePDPoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdatePDPoolRequest.Marshal(b, m, deterministic)
}
func (dst *UpdatePDPoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatePDPoolRequest.Merge(dst, src)
}
func (m *UpdatePDPoolRequest) XXX_Size() int {
	return xxx_messageInfo_UpdatePDPoolRequest.Size(m)
}
func (m *UpdatePDPoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatePDPoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatePDPoolRequest proto.InternalMessageInfo

func (m *UpdatePDPoolRequest) GetSubnetId() uint32 {
	if m != nil {
		return m.SubnetId
	}
	return 0
}

func (m *UpdatePDPoolRequest) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *UpdatePDPoolRequest) GetDnsServers() []string {
	if m != nil {
		return m.DnsServers
	}
	return nil
}

func (m *UpdatePDPoolRequest) GetClientClass() string {
	if m != nil {
		return m.ClientClass
	}
	return ""
}

type CreateClientClass4Request struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Regexp               string   `protobuf:"bytes,2,opt,name=regexp,proto3" json:"regexp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateClientClass4Request) Reset()         { *m = CreateClientClass4Request{} }
func (m *CreateClientClass4Request) String() string { return proto.CompactTextString(m) }
func (*CreateClientClass4Request) ProtoMessage()    {}
func (*CreateClientClass4Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_dhcp_7955f288d15089a5, []int{21}
}
func (m *CreateClientClass4Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateClientClass4Request.Unmarshal(m, b)
}
func (m *CreateClientClass4Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateClientClass4Request.Marshal(b, m, deterministic)
}
func (dst *CreateClientClass4Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateClientClass4Request.Merge(dst, src)
}
func (m *CreateClientClass4Request) XXX_Size() int {
	return xxx_messageInfo_CreateClientClass4Request.Size(m)
}
func (m *CreateClientClass4Request) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateClientClass4Request.DiscardUnknown(m)
}

var xxx_messageInfo_CreateClientClass4Request proto.InternalMessageInfo

func (m *CreateClientClass4Request) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateClientClass4Request) GetRegexp() string {
	if m != nil {
		return m.Regexp
	}
	return ""
}

type DeleteClientClass4Request struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteClientClass4Request) Reset()         { *m = DeleteClientClass4Request{} }
func (m *DeleteClientClass4Request) String() string { return proto.CompactTextString(m) }
func (*DeleteClientClass4Request) ProtoMessage()    {}
func (*DeleteClientClass4Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_dhcp_7955f288d15089a5, []int{22}
}
func (m *DeleteClientClass4Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteClientClass4Request.Unmarshal(m, b)
}
func (m *DeleteClientClass4Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteClientClass4Request.Marshal(b, m, deterministic)
}
func (dst *DeleteClientClass4Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteClientClass4Request.Merge(dst, src)
}
func (m *DeleteClientClass4Request) XXX_Size() int {
	return xxx_messageInfo_DeleteClientClass4Request.Size(m)
}
func (m *DeleteClientClass4Request) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteClientClass4Request.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteClientClass4Request proto.InternalMessageInfo

func (m *DeleteClientClass4Request) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type UpdateClientClass4Request struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Regexp               string   `protobuf:"bytes,2,opt,name=regexp,proto3" json:"regexp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateClientClass4Request) Reset()         { *m = UpdateClientClass4Request{} }
func (m *UpdateClientClass4Request) String() string { return proto.CompactTextString(m) }
func (*UpdateClientClass4Request) ProtoMessage()    {}
func (*UpdateClientClass4Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_dhcp_7955f288d15089a5, []int{23}
}
func (m *UpdateClientClass4Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateClientClass4Request.Unmarshal(m, b)
}
func (m *UpdateClientClass4Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateClientClass4Request.Marshal(b, m, deterministic)
}
func (dst *UpdateClientClass4Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateClientClass4Request.Merge(dst, src)
}
func (m *UpdateClientClass4Request) XXX_Size() int {
	return xxx_messageInfo_UpdateClientClass4Request.Size(m)
}
func (m *UpdateClientClass4Request) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateClientClass4Request.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateClientClass4Request proto.InternalMessageInfo

func (m *UpdateClientClass4Request) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateClientClass4Request) GetRegexp() string {
	if m != nil {
		return m.Regexp
	}
	return ""
}

type UpdateGlobalConfigRequest struct {
	ValidLifetime        uint32   `protobuf:"varint,1,opt,name=valid_lifetime,json=validLifetime,proto3" json:"valid_lifetime,omitempty"`
	MaxValidLifetime     uint32   `protobuf:"varint,2,opt,name=max_valid_lifetime,json=maxValidLifetime,proto3" json:"max_valid_lifetime,omitempty"`
	MinValidLifetime     uint32   `protobuf:"varint,3,opt,name=min_valid_lifetime,json=minValidLifetime,proto3" json:"min_valid_lifetime,omitempty"`
	DomainServers        []string `protobuf:"bytes,4,rep,name=domain_servers,json=domainServers,proto3" json:"domain_servers,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateGlobalConfigRequest) Reset()         { *m = UpdateGlobalConfigRequest{} }
func (m *UpdateGlobalConfigRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateGlobalConfigRequest) ProtoMessage()    {}
func (*UpdateGlobalConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dhcp_7955f288d15089a5, []int{24}
}
func (m *UpdateGlobalConfigRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateGlobalConfigRequest.Unmarshal(m, b)
}
func (m *UpdateGlobalConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateGlobalConfigRequest.Marshal(b, m, deterministic)
}
func (dst *UpdateGlobalConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateGlobalConfigRequest.Merge(dst, src)
}
func (m *UpdateGlobalConfigRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateGlobalConfigRequest.Size(m)
}
func (m *UpdateGlobalConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateGlobalConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateGlobalConfigRequest proto.InternalMessageInfo

func (m *UpdateGlobalConfigRequest) GetValidLifetime() uint32 {
	if m != nil {
		return m.ValidLifetime
	}
	return 0
}

func (m *UpdateGlobalConfigRequest) GetMaxValidLifetime() uint32 {
	if m != nil {
		return m.MaxValidLifetime
	}
	return 0
}

func (m *UpdateGlobalConfigRequest) GetMinValidLifetime() uint32 {
	if m != nil {
		return m.MinValidLifetime
	}
	return 0
}

func (m *UpdateGlobalConfigRequest) GetDomainServers() []string {
	if m != nil {
		return m.DomainServers
	}
	return nil
}

type GetSubnet4LeasesRequest struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSubnet4LeasesRequest) Reset()         { *m = GetSubnet4LeasesRequest{} }
func (m *GetSubnet4LeasesRequest) String() string { return proto.CompactTextString(m) }
func (*GetSubnet4LeasesRequest) ProtoMessage()    {}
func (*GetSubnet4LeasesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dhcp_7955f288d15089a5, []int{25}
}
func (m *GetSubnet4LeasesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSubnet4LeasesRequest.Unmarshal(m, b)
}
func (m *GetSubnet4LeasesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSubnet4LeasesRequest.Marshal(b, m, deterministic)
}
func (dst *GetSubnet4LeasesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSubnet4LeasesRequest.Merge(dst, src)
}
func (m *GetSubnet4LeasesRequest) XXX_Size() int {
	return xxx_messageInfo_GetSubnet4LeasesRequest.Size(m)
}
func (m *GetSubnet4LeasesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSubnet4LeasesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetSubnet4LeasesRequest proto.InternalMessageInfo

func (m *GetSubnet4LeasesRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetPool4LeasesRequest struct {
	SubnetId             uint32   `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	BeginAddress         string   `protobuf:"bytes,2,opt,name=begin_address,json=beginAddress,proto3" json:"begin_address,omitempty"`
	EndAddress           string   `protobuf:"bytes,3,opt,name=end_address,json=endAddress,proto3" json:"end_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPool4LeasesRequest) Reset()         { *m = GetPool4LeasesRequest{} }
func (m *GetPool4LeasesRequest) String() string { return proto.CompactTextString(m) }
func (*GetPool4LeasesRequest) ProtoMessage()    {}
func (*GetPool4LeasesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dhcp_7955f288d15089a5, []int{26}
}
func (m *GetPool4LeasesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPool4LeasesRequest.Unmarshal(m, b)
}
func (m *GetPool4LeasesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPool4LeasesRequest.Marshal(b, m, deterministic)
}
func (dst *GetPool4LeasesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPool4LeasesRequest.Merge(dst, src)
}
func (m *GetPool4LeasesRequest) XXX_Size() int {
	return xxx_messageInfo_GetPool4LeasesRequest.Size(m)
}
func (m *GetPool4LeasesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPool4LeasesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPool4LeasesRequest proto.InternalMessageInfo

func (m *GetPool4LeasesRequest) GetSubnetId() uint32 {
	if m != nil {
		return m.SubnetId
	}
	return 0
}

func (m *GetPool4LeasesRequest) GetBeginAddress() string {
	if m != nil {
		return m.BeginAddress
	}
	return ""
}

func (m *GetPool4LeasesRequest) GetEndAddress() string {
	if m != nil {
		return m.EndAddress
	}
	return ""
}

type GetReservation4LeasesRequest struct {
	SubnetId             uint32   `protobuf:"varint,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	HwAddress            string   `protobuf:"bytes,2,opt,name=hw_address,json=hwAddress,proto3" json:"hw_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetReservation4LeasesRequest) Reset()         { *m = GetReservation4LeasesRequest{} }
func (m *GetReservation4LeasesRequest) String() string { return proto.CompactTextString(m) }
func (*GetReservation4LeasesRequest) ProtoMessage()    {}
func (*GetReservation4LeasesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dhcp_7955f288d15089a5, []int{27}
}
func (m *GetReservation4LeasesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetReservation4LeasesRequest.Unmarshal(m, b)
}
func (m *GetReservation4LeasesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetReservation4LeasesRequest.Marshal(b, m, deterministic)
}
func (dst *GetReservation4LeasesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetReservation4LeasesRequest.Merge(dst, src)
}
func (m *GetReservation4LeasesRequest) XXX_Size() int {
	return xxx_messageInfo_GetReservation4LeasesRequest.Size(m)
}
func (m *GetReservation4LeasesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetReservation4LeasesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetReservation4LeasesRequest proto.InternalMessageInfo

func (m *GetReservation4LeasesRequest) GetSubnetId() uint32 {
	if m != nil {
		return m.SubnetId
	}
	return 0
}

func (m *GetReservation4LeasesRequest) GetHwAddress() string {
	if m != nil {
		return m.HwAddress
	}
	return ""
}

type DHCPLease4 struct {
	Address              string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	SubnetId             uint32   `protobuf:"varint,2,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	HwAddress            string   `protobuf:"bytes,3,opt,name=hw_address,json=hwAddress,proto3" json:"hw_address,omitempty"`
	ClientId             string   `protobuf:"bytes,4,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ValidLifetime        uint32   `protobuf:"varint,5,opt,name=valid_lifetime,json=validLifetime,proto3" json:"valid_lifetime,omitempty"`
	Expire               int64    `protobuf:"varint,6,opt,name=expire,proto3" json:"expire,omitempty"`
	State                uint32   `protobuf:"varint,7,opt,name=state,proto3" json:"state,omitempty"`
	Hostname             string   `protobuf:"bytes,8,opt,name=hostname,proto3" json:"hostname,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DHCPLease4) Reset()         { *m = DHCPLease4{} }
func (m *DHCPLease4) String() string { return proto.CompactTextString(m) }
func (*DHCPLease4) ProtoMessage()    {}
func (*DHCPLease4) Descriptor() ([]byte, []int) {
	return fileDescriptor_dhcp_7955f288d15089a5, []int{28}
}
func (m *DHCPLease4) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DHCPLease4.Unmarshal(m, b)
}
func (m *DHCPLease4) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DHCPLease4.Marshal(b, m, deterministic)
}
func (dst *DHCPLease4) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DHCPLease4.Merge(dst, src)
}
func (m *DHCPLease4) XXX_Size() int {
	return xxx_messageInfo_DHCPLease4.Size(m)
}
func (m *DHCPLease4) XXX_DiscardUnknown() {
	xxx_messageInfo_DHCPLease4.DiscardUnknown(m)
}

var xxx_messageInfo_DHCPLease4 proto.InternalMessageInfo

func (m *DHCPLease4) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *DHCPLease4) GetSubnetId() uint32 {
	if m != nil {
		return m.SubnetId
	}
	return 0
}

func (m *DHCPLease4) GetHwAddress() string {
	if m != nil {
		return m.HwAddress
	}
	return ""
}

func (m *DHCPLease4) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *DHCPLease4) GetValidLifetime() uint32 {
	if m != nil {
		return m.ValidLifetime
	}
	return 0
}

func (m *DHCPLease4) GetExpire() int64 {
	if m != nil {
		return m.Expire
	}
	return 0
}

func (m *DHCPLease4) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *DHCPLease4) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

type GetLeases4Response struct {
	Succeed              bool          `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
	Leases               []*DHCPLease4 `protobuf:"bytes,2,rep,name=leases,proto3" json:"leases,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GetLeases4Response) Reset()         { *m = GetLeases4Response{} }
func (m *GetLeases4Response) String() string { return proto.CompactTextString(m) }
func (*GetLeases4Response) ProtoMessage()    {}
func (*GetLeases4Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_dhcp_7955f288d15089a5, []int{29}
}
func (m *GetLeases4Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetLeases4Response.Unmarshal(m, b)
}
func (m *GetLeases4Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetLeases4Response.Marshal(b, m, deterministic)
}
func (dst *GetLeases4Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLeases4Response.Merge(dst, src)
}
func (m *GetLeases4Response) XXX_Size() int {
	return xxx_messageInfo_GetLeases4Response.Size(m)
}
func (m *GetLeases4Response) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLeases4Response.DiscardUnknown(m)
}

var xxx_messageInfo_GetLeases4Response proto.InternalMessageInfo

func (m *GetLeases4Response) GetSucceed() bool {
	if m != nil {
		return m.Succeed
	}
	return false
}

func (m *GetLeases4Response) GetLeases() []*DHCPLease4 {
	if m != nil {
		return m.Leases
	}
	return nil
}

type GetLeases4CountResponse struct {
	Succeed              bool     `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
	LeasesCount          uint64   `protobuf:"varint,2,opt,name=leases_count,json=leasesCount,proto3" json:"leases_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetLeases4CountResponse) Reset()         { *m = GetLeases4CountResponse{} }
func (m *GetLeases4CountResponse) String() string { return proto.CompactTextString(m) }
func (*GetLeases4CountResponse) ProtoMessage()    {}
func (*GetLeases4CountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dhcp_7955f288d15089a5, []int{30}
}
func (m *GetLeases4CountResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetLeases4CountResponse.Unmarshal(m, b)
}
func (m *GetLeases4CountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetLeases4CountResponse.Marshal(b, m, deterministic)
}
func (dst *GetLeases4CountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLeases4CountResponse.Merge(dst, src)
}
func (m *GetLeases4CountResponse) XXX_Size() int {
	return xxx_messageInfo_GetLeases4CountResponse.Size(m)
}
func (m *GetLeases4CountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLeases4CountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetLeases4CountResponse proto.InternalMessageInfo

func (m *GetLeases4CountResponse) GetSucceed() bool {
	if m != nil {
		return m.Succeed
	}
	return false
}

func (m *GetLeases4CountResponse) GetLeasesCount() uint64 {
	if m != nil {
		return m.LeasesCount
	}
	return 0
}

type GetSubnet6LeasesRequest struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSubnet6LeasesRequest) Reset()         { *m = GetSubnet6LeasesRequest{} }
func (m *GetSubnet6LeasesRequest) String() string { return proto.CompactTextString(m) }
func (*GetSubnet6LeasesRequest) ProtoMessage()    {}
func (*GetSubnet6LeasesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dhcp_7955f288d15089a5, []int{31}
}
func (m *GetSubnet6LeasesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSubnet6LeasesRequest.Unmarshal(m, b)
}
func (m *GetSubnet6LeasesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSubnet6LeasesRequest.Marshal(b, m, deterministic)
}
func (dst *GetSubnet6LeasesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSubnet6LeasesRequest.Merge(dst, src)
}
func (m *GetSubnet6LeasesRequest) XXX_Size() int {
	return xxx_messageInfo_GetSubnet6LeasesRequest.Size(m)
}
func (m *GetSubnet6LeasesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSubnet6LeasesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetSubnet6LeasesRequest proto.InternalMessageInfo

func (m *GetSubnet6LeasesRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type DHCPLease6 struct {
	Address              string               `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	SubnetId             uint32               `protobuf:"varint,2,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	HwAddress            string               `protobuf:"bytes,3,opt,name=hw_address,json=hwAddress,proto3" json:"hw_address,omitempty"`
	HwType               uint32               `protobuf:"varint,4,opt,name=hw_type,json=hwType,proto3" json:"hw_type,omitempty"`
	HwAddressSource      uint32               `protobuf:"varint,5,opt,name=hw_address_source,json=hwAddressSource,proto3" json:"hw_address_source,omitempty"`
	Duid                 string               `protobuf:"bytes,6,opt,name=duid,proto3" json:"duid,omitempty"`
	ValidLifetime        uint32               `protobuf:"varint,7,opt,name=valid_lifetime,json=validLifetime,proto3" json:"valid_lifetime,omitempty"`
	Expire               int64                `protobuf:"varint,8,opt,name=expire,proto3" json:"expire,omitempty"`
	PrefixLen            uint32               `protobuf:"varint,9,opt,name=prefix_len,json=prefixLen,proto3" json:"prefix_len,omitempty"`
	LeaseType            DHCPLease6_LeaseType `protobuf:"varint,10,opt,name=lease_type,json=leaseType,proto3,enum=proto.DHCPLease6_LeaseType" json:"lease_type,omitempty"`
	State                uint32               `protobuf:"varint,11,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *DHCPLease6) Reset()         { *m = DHCPLease6{} }
func (m *DHCPLease6) String() string { return proto.CompactTextString(m) }
func (*DHCPLease6) ProtoMessage()    {}
func (*DHCPLease6) Descriptor() ([]byte, []int) {
	return fileDescriptor_dhcp_7955f288d15089a5, []int{32}
}
func (m *DHCPLease6) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DHCPLease6.Unmarshal(m, b)
}
func (m *DHCPLease6) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DHCPLease6.Marshal(b, m, deterministic)
}
func (dst *DHCPLease6) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DHCPLease6.Merge(dst, src)
}
func (m *DHCPLease6) XXX_Size() int {
	return xxx_messageInfo_DHCPLease6.Size(m)
}
func (m *DHCPLease6) XXX_DiscardUnknown() {
	xxx_messageInfo_DHCPLease6.DiscardUnknown(m)
}

var xxx_messageInfo_DHCPLease6 proto.InternalMessageInfo

func (m *DHCPLease6) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *DHCPLease6) GetSubnetId() uint32 {
	if m != nil {
		return m.SubnetId
	}
	return 0
}

func (m *DHCPLease6) GetHwAddress() string {
	if m != nil {
		return m.HwAddress
	}
	return ""
}

func (m *DHCPLease6) GetHwType() uint32 {
	if m != nil {
		return m.HwType
	}
	return 0
}

func (m *DHCPLease6) GetHwAddressSource() uint32 {
	if m != nil {
		return m.HwAddressSource
	}
	return 0
}

func (m *DHCPLease6) GetDuid() string {
	if m != nil {
		return m.Duid
	}
	return ""
}

func (m *DHCPLease6) GetValidLifetime() uint32 {
	if m != nil {
		return m.ValidLifetime
	}
	return 0
}

func (m *DHCPLease6) GetExpire() int64 {
	if m != nil {
		return m.Expire
	}
	return 0
}

func (m *DHCPLease6) GetPrefixLen() uint32 {
	if m != nil {
		return m.PrefixLen
	}
	return 0
}

func (m *DHCPLease6) GetLeaseType() DHCPLease6_LeaseType {
	if m != nil {
		return m.LeaseType
	}
	return DHCPLease6_TYPE_NA
}

func (m *DHCPLease6) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

type GetLeases6Response struct {
	Succeed              bool          `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
	Leases               []*DHCPLease6 `protobuf:"bytes,2,rep,name=leases,proto3" json:"leases,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GetLeases6Response) Reset()         { *m = GetLeases6Response{} }
func (m *GetLeases6Response) String() string { return proto.CompactTextString(m) }
func (*GetLeases6Response) ProtoMessage()    {}
func (*GetLeases6Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_dhcp_7955f288d15089a5, []int{33}
}
func (m *GetLeases6Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetLeases6Response.Unmarshal(m, b)
}
func (m *GetLeases6Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetLeases6Response.Marshal(b, m, deterministic)
}
func (dst *GetLeases6Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLeases6Response.Merge(dst, src)
}
func (m *GetLeases6Response) XXX_Size() int {
	return xxx_messageInfo_GetLeases6Response.Size(m)
}
func (m *GetLeases6Response) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLeases6Response.DiscardUnknown(m)
}

var xxx_messageInfo_GetLeases6Response proto.InternalMessageInfo

func (m *GetLeases6Response) GetSucceed() bool {
	if m != nil {
		return m.Succeed
	}
	return false
}

func (m *GetLeases6Response) GetLeases() []*DHCPLease6 {
	if m != nil {
		return m.Leases
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateSubnet4Request)(nil), "proto.CreateSubnet4Request")
	proto.RegisterType((*DeleteSubnet4Request)(nil), "proto.DeleteSubnet4Request")
	proto.RegisterType((*UpdateSubnet4Request)(nil), "proto.UpdateSubnet4Request")
	proto.RegisterType((*CreateSubnet6Request)(nil), "proto.CreateSubnet6Request")
	proto.RegisterType((*DeleteSubnet6Request)(nil), "proto.DeleteSubnet6Request")
	proto.RegisterType((*UpdateSubnet6Request)(nil), "proto.UpdateSubnet6Request")
	proto.RegisterType((*CreatePool4Request)(nil), "proto.CreatePool4Request")
	proto.RegisterType((*DeletePool4Request)(nil), "proto.DeletePool4Request")
	proto.RegisterType((*UpdatePool4Request)(nil), "proto.UpdatePool4Request")
	proto.RegisterType((*CreatePool6Request)(nil), "proto.CreatePool6Request")
	proto.RegisterType((*DeletePool6Request)(nil), "proto.DeletePool6Request")
	proto.RegisterType((*UpdatePool6Request)(nil), "proto.UpdatePool6Request")
	proto.RegisterType((*CreateReservation4Request)(nil), "proto.CreateReservation4Request")
	proto.RegisterType((*DeleteReservation4Request)(nil), "proto.DeleteReservation4Request")
	proto.RegisterType((*UpdateReservation4Request)(nil), "proto.UpdateReservation4Request")
	proto.RegisterType((*CreateReservation6Request)(nil), "proto.CreateReservation6Request")
	proto.RegisterType((*DeleteReservation6Request)(nil), "proto.DeleteReservation6Request")
	proto.RegisterType((*UpdateReservation6Request)(nil), "proto.UpdateReservation6Request")
	proto.RegisterType((*CreatePDPoolRequest)(nil), "proto.CreatePDPoolRequest")
	proto.RegisterType((*DeletePDPoolRequest)(nil), "proto.DeletePDPoolRequest")
	proto.RegisterType((*UpdatePDPoolRequest)(nil), "proto.UpdatePDPoolRequest")
	proto.RegisterType((*CreateClientClass4Request)(nil), "proto.CreateClientClass4Request")
	proto.RegisterType((*DeleteClientClass4Request)(nil), "proto.DeleteClientClass4Request")
	proto.RegisterType((*UpdateClientClass4Request)(nil), "proto.UpdateClientClass4Request")
	proto.RegisterType((*UpdateGlobalConfigRequest)(nil), "proto.UpdateGlobalConfigRequest")
	proto.RegisterType((*GetSubnet4LeasesRequest)(nil), "proto.GetSubnet4LeasesRequest")
	proto.RegisterType((*GetPool4LeasesRequest)(nil), "proto.GetPool4LeasesRequest")
	proto.RegisterType((*GetReservation4LeasesRequest)(nil), "proto.GetReservation4LeasesRequest")
	proto.RegisterType((*DHCPLease4)(nil), "proto.DHCPLease4")
	proto.RegisterType((*GetLeases4Response)(nil), "proto.GetLeases4Response")
	proto.RegisterType((*GetLeases4CountResponse)(nil), "proto.GetLeases4CountResponse")
	proto.RegisterType((*GetSubnet6LeasesRequest)(nil), "proto.GetSubnet6LeasesRequest")
	proto.RegisterType((*DHCPLease6)(nil), "proto.DHCPLease6")
	proto.RegisterType((*GetLeases6Response)(nil), "proto.GetLeases6Response")
	proto.RegisterEnum("proto.DHCPLease6_LeaseType", DHCPLease6_LeaseType_name, DHCPLease6_LeaseType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DHCPManagerClient is the client API for DHCPManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DHCPManagerClient interface {
	CreateSubnet4(ctx context.Context, in *CreateSubnet4Request, opts ...grpc.CallOption) (*DDIResponse, error)
	DeleteSubnet4(ctx context.Context, in *DeleteSubnet4Request, opts ...grpc.CallOption) (*DDIResponse, error)
	UpdateSubnet4(ctx context.Context, in *UpdateSubnet4Request, opts ...grpc.CallOption) (*DDIResponse, error)
	CreateSubnet6(ctx context.Context, in *CreateSubnet6Request, opts ...grpc.CallOption) (*DDIResponse, error)
	DeleteSubnet6(ctx context.Context, in *DeleteSubnet6Request, opts ...grpc.CallOption) (*DDIResponse, error)
	UpdateSubnet6(ctx context.Context, in *UpdateSubnet6Request, opts ...grpc.CallOption) (*DDIResponse, error)
	CreatePool4(ctx context.Context, in *CreatePool4Request, opts ...grpc.CallOption) (*DDIResponse, error)
	DeletePool4(ctx context.Context, in *DeletePool4Request, opts ...grpc.CallOption) (*DDIResponse, error)
	UpdatePool4(ctx context.Context, in *UpdatePool4Request, opts ...grpc.CallOption) (*DDIResponse, error)
	CreatePool6(ctx context.Context, in *CreatePool6Request, opts ...grpc.CallOption) (*DDIResponse, error)
	DeletePool6(ctx context.Context, in *DeletePool6Request, opts ...grpc.CallOption) (*DDIResponse, error)
	UpdatePool6(ctx context.Context, in *UpdatePool6Request, opts ...grpc.CallOption) (*DDIResponse, error)
	CreatePDPool(ctx context.Context, in *CreatePDPoolRequest, opts ...grpc.CallOption) (*DDIResponse, error)
	DeletePDPool(ctx context.Context, in *DeletePDPoolRequest, opts ...grpc.CallOption) (*DDIResponse, error)
	UpdatePDPool(ctx context.Context, in *UpdatePDPoolRequest, opts ...grpc.CallOption) (*DDIResponse, error)
	CreateReservation4(ctx context.Context, in *CreateReservation4Request, opts ...grpc.CallOption) (*DDIResponse, error)
	DeleteReservation4(ctx context.Context, in *DeleteReservation4Request, opts ...grpc.CallOption) (*DDIResponse, error)
	UpdateReservation4(ctx context.Context, in *UpdateReservation4Request, opts ...grpc.CallOption) (*DDIResponse, error)
	CreateReservation6(ctx context.Context, in *CreateReservation6Request, opts ...grpc.CallOption) (*DDIResponse, error)
	DeleteReservation6(ctx context.Context, in *DeleteReservation6Request, opts ...grpc.CallOption) (*DDIResponse, error)
	UpdateReservation6(ctx context.Context, in *UpdateReservation6Request, opts ...grpc.CallOption) (*DDIResponse, error)
	CreateClientClass4(ctx context.Context, in *CreateClientClass4Request, opts ...grpc.CallOption) (*DDIResponse, error)
	DeleteClientClass4(ctx context.Context, in *DeleteClientClass4Request, opts ...grpc.CallOption) (*DDIResponse, error)
	UpdateClientClass4(ctx context.Context, in *UpdateClientClass4Request, opts ...grpc.CallOption) (*DDIResponse, error)
	UpdateGlobalConfig(ctx context.Context, in *UpdateGlobalConfigRequest, opts ...grpc.CallOption) (*DDIResponse, error)
	GetSubnet4Leases(ctx context.Context, in *GetSubnet4LeasesRequest, opts ...grpc.CallOption) (*GetLeases4Response, error)
	GetPool4Leases(ctx context.Context, in *GetPool4LeasesRequest, opts ...grpc.CallOption) (*GetLeases4Response, error)
	GetReservation4Leases(ctx context.Context, in *GetReservation4LeasesRequest, opts ...grpc.CallOption) (*GetLeases4Response, error)
	GetSubnet4LeasesCount(ctx context.Context, in *GetSubnet4LeasesRequest, opts ...grpc.CallOption) (*GetLeases4CountResponse, error)
	GetPool4LeasesCount(ctx context.Context, in *GetPool4LeasesRequest, opts ...grpc.CallOption) (*GetLeases4CountResponse, error)
	GetReservation4LeasesCount(ctx context.Context, in *GetReservation4LeasesRequest, opts ...grpc.CallOption) (*GetLeases4CountResponse, error)
	GetSubnet6Leases(ctx context.Context, in *GetSubnet6LeasesRequest, opts ...grpc.CallOption) (*GetLeases6Response, error)
}

type dHCPManagerClient struct {
	cc *grpc.ClientConn
}

func NewDHCPManagerClient(cc *grpc.ClientConn) DHCPManagerClient {
	return &dHCPManagerClient{cc}
}

func (c *dHCPManagerClient) CreateSubnet4(ctx context.Context, in *CreateSubnet4Request, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/CreateSubnet4", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) DeleteSubnet4(ctx context.Context, in *DeleteSubnet4Request, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/DeleteSubnet4", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) UpdateSubnet4(ctx context.Context, in *UpdateSubnet4Request, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/UpdateSubnet4", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) CreateSubnet6(ctx context.Context, in *CreateSubnet6Request, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/CreateSubnet6", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) DeleteSubnet6(ctx context.Context, in *DeleteSubnet6Request, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/DeleteSubnet6", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) UpdateSubnet6(ctx context.Context, in *UpdateSubnet6Request, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/UpdateSubnet6", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) CreatePool4(ctx context.Context, in *CreatePool4Request, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/CreatePool4", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) DeletePool4(ctx context.Context, in *DeletePool4Request, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/DeletePool4", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) UpdatePool4(ctx context.Context, in *UpdatePool4Request, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/UpdatePool4", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) CreatePool6(ctx context.Context, in *CreatePool6Request, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/CreatePool6", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) DeletePool6(ctx context.Context, in *DeletePool6Request, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/DeletePool6", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) UpdatePool6(ctx context.Context, in *UpdatePool6Request, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/UpdatePool6", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) CreatePDPool(ctx context.Context, in *CreatePDPoolRequest, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/CreatePDPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) DeletePDPool(ctx context.Context, in *DeletePDPoolRequest, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/DeletePDPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) UpdatePDPool(ctx context.Context, in *UpdatePDPoolRequest, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/UpdatePDPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) CreateReservation4(ctx context.Context, in *CreateReservation4Request, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/CreateReservation4", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) DeleteReservation4(ctx context.Context, in *DeleteReservation4Request, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/DeleteReservation4", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) UpdateReservation4(ctx context.Context, in *UpdateReservation4Request, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/UpdateReservation4", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) CreateReservation6(ctx context.Context, in *CreateReservation6Request, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/CreateReservation6", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) DeleteReservation6(ctx context.Context, in *DeleteReservation6Request, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/DeleteReservation6", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) UpdateReservation6(ctx context.Context, in *UpdateReservation6Request, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/UpdateReservation6", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) CreateClientClass4(ctx context.Context, in *CreateClientClass4Request, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/CreateClientClass4", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) DeleteClientClass4(ctx context.Context, in *DeleteClientClass4Request, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/DeleteClientClass4", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) UpdateClientClass4(ctx context.Context, in *UpdateClientClass4Request, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/UpdateClientClass4", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) UpdateGlobalConfig(ctx context.Context, in *UpdateGlobalConfigRequest, opts ...grpc.CallOption) (*DDIResponse, error) {
	out := new(DDIResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/UpdateGlobalConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) GetSubnet4Leases(ctx context.Context, in *GetSubnet4LeasesRequest, opts ...grpc.CallOption) (*GetLeases4Response, error) {
	out := new(GetLeases4Response)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/GetSubnet4Leases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) GetPool4Leases(ctx context.Context, in *GetPool4LeasesRequest, opts ...grpc.CallOption) (*GetLeases4Response, error) {
	out := new(GetLeases4Response)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/GetPool4Leases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) GetReservation4Leases(ctx context.Context, in *GetReservation4LeasesRequest, opts ...grpc.CallOption) (*GetLeases4Response, error) {
	out := new(GetLeases4Response)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/GetReservation4Leases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) GetSubnet4LeasesCount(ctx context.Context, in *GetSubnet4LeasesRequest, opts ...grpc.CallOption) (*GetLeases4CountResponse, error) {
	out := new(GetLeases4CountResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/GetSubnet4LeasesCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) GetPool4LeasesCount(ctx context.Context, in *GetPool4LeasesRequest, opts ...grpc.CallOption) (*GetLeases4CountResponse, error) {
	out := new(GetLeases4CountResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/GetPool4LeasesCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) GetReservation4LeasesCount(ctx context.Context, in *GetReservation4LeasesRequest, opts ...grpc.CallOption) (*GetLeases4CountResponse, error) {
	out := new(GetLeases4CountResponse)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/GetReservation4LeasesCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPManagerClient) GetSubnet6Leases(ctx context.Context, in *GetSubnet6LeasesRequest, opts ...grpc.CallOption) (*GetLeases6Response, error) {
	out := new(GetLeases6Response)
	err := c.cc.Invoke(ctx, "/proto.DHCPManager/GetSubnet6Leases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DHCPManagerServer is the server API for DHCPManager service.
type DHCPManagerServer interface {
	CreateSubnet4(context.Context, *CreateSubnet4Request) (*DDIResponse, error)
	DeleteSubnet4(context.Context, *DeleteSubnet4Request) (*DDIResponse, error)
	UpdateSubnet4(context.Context, *UpdateSubnet4Request) (*DDIResponse, error)
	CreateSubnet6(context.Context, *CreateSubnet6Request) (*DDIResponse, error)
	DeleteSubnet6(context.Context, *DeleteSubnet6Request) (*DDIResponse, error)
	UpdateSubnet6(context.Context, *UpdateSubnet6Request) (*DDIResponse, error)
	CreatePool4(context.Context, *CreatePool4Request) (*DDIResponse, error)
	DeletePool4(context.Context, *DeletePool4Request) (*DDIResponse, error)
	UpdatePool4(context.Context, *UpdatePool4Request) (*DDIResponse, error)
	CreatePool6(context.Context, *CreatePool6Request) (*DDIResponse, error)
	DeletePool6(context.Context, *DeletePool6Request) (*DDIResponse, error)
	UpdatePool6(context.Context, *UpdatePool6Request) (*DDIResponse, error)
	CreatePDPool(context.Context, *CreatePDPoolRequest) (*DDIResponse, error)
	DeletePDPool(context.Context, *DeletePDPoolRequest) (*DDIResponse, error)
	UpdatePDPool(context.Context, *UpdatePDPoolRequest) (*DDIResponse, error)
	CreateReservation4(context.Context, *CreateReservation4Request) (*DDIResponse, error)
	DeleteReservation4(context.Context, *DeleteReservation4Request) (*DDIResponse, error)
	UpdateReservation4(context.Context, *UpdateReservation4Request) (*DDIResponse, error)
	CreateReservation6(context.Context, *CreateReservation6Request) (*DDIResponse, error)
	DeleteReservation6(context.Context, *DeleteReservation6Request) (*DDIResponse, error)
	UpdateReservation6(context.Context, *UpdateReservation6Request) (*DDIResponse, error)
	CreateClientClass4(context.Context, *CreateClientClass4Request) (*DDIResponse, error)
	DeleteClientClass4(context.Context, *DeleteClientClass4Request) (*DDIResponse, error)
	UpdateClientClass4(context.Context, *UpdateClientClass4Request) (*DDIResponse, error)
	UpdateGlobalConfig(context.Context, *UpdateGlobalConfigRequest) (*DDIResponse, error)
	GetSubnet4Leases(context.Context, *GetSubnet4LeasesRequest) (*GetLeases4Response, error)
	GetPool4Leases(context.Context, *GetPool4LeasesRequest) (*GetLeases4Response, error)
	GetReservation4Leases(context.Context, *GetReservation4LeasesRequest) (*GetLeases4Response, error)
	GetSubnet4LeasesCount(context.Context, *GetSubnet4LeasesRequest) (*GetLeases4CountResponse, error)
	GetPool4LeasesCount(context.Context, *GetPool4LeasesRequest) (*GetLeases4CountResponse, error)
	GetReservation4LeasesCount(context.Context, *GetReservation4LeasesRequest) (*GetLeases4CountResponse, error)
	GetSubnet6Leases(context.Context, *GetSubnet6LeasesRequest) (*GetLeases6Response, error)
}

func RegisterDHCPManagerServer(s *grpc.Server, srv DHCPManagerServer) {
	s.RegisterService(&_DHCPManager_serviceDesc, srv)
}

func _DHCPManager_CreateSubnet4_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubnet4Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).CreateSubnet4(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/CreateSubnet4",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).CreateSubnet4(ctx, req.(*CreateSubnet4Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_DeleteSubnet4_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSubnet4Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).DeleteSubnet4(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/DeleteSubnet4",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).DeleteSubnet4(ctx, req.(*DeleteSubnet4Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_UpdateSubnet4_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSubnet4Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).UpdateSubnet4(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/UpdateSubnet4",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).UpdateSubnet4(ctx, req.(*UpdateSubnet4Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_CreateSubnet6_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubnet6Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).CreateSubnet6(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/CreateSubnet6",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).CreateSubnet6(ctx, req.(*CreateSubnet6Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_DeleteSubnet6_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSubnet6Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).DeleteSubnet6(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/DeleteSubnet6",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).DeleteSubnet6(ctx, req.(*DeleteSubnet6Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_UpdateSubnet6_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSubnet6Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).UpdateSubnet6(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/UpdateSubnet6",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).UpdateSubnet6(ctx, req.(*UpdateSubnet6Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_CreatePool4_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePool4Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).CreatePool4(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/CreatePool4",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).CreatePool4(ctx, req.(*CreatePool4Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_DeletePool4_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePool4Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).DeletePool4(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/DeletePool4",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).DeletePool4(ctx, req.(*DeletePool4Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_UpdatePool4_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePool4Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).UpdatePool4(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/UpdatePool4",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).UpdatePool4(ctx, req.(*UpdatePool4Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_CreatePool6_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePool6Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).CreatePool6(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/CreatePool6",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).CreatePool6(ctx, req.(*CreatePool6Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_DeletePool6_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePool6Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).DeletePool6(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/DeletePool6",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).DeletePool6(ctx, req.(*DeletePool6Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_UpdatePool6_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePool6Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).UpdatePool6(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/UpdatePool6",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).UpdatePool6(ctx, req.(*UpdatePool6Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_CreatePDPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePDPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).CreatePDPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/CreatePDPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).CreatePDPool(ctx, req.(*CreatePDPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_DeletePDPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePDPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).DeletePDPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/DeletePDPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).DeletePDPool(ctx, req.(*DeletePDPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_UpdatePDPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePDPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).UpdatePDPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/UpdatePDPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).UpdatePDPool(ctx, req.(*UpdatePDPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_CreateReservation4_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReservation4Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).CreateReservation4(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/CreateReservation4",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).CreateReservation4(ctx, req.(*CreateReservation4Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_DeleteReservation4_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReservation4Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).DeleteReservation4(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/DeleteReservation4",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).DeleteReservation4(ctx, req.(*DeleteReservation4Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_UpdateReservation4_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReservation4Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).UpdateReservation4(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/UpdateReservation4",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).UpdateReservation4(ctx, req.(*UpdateReservation4Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_CreateReservation6_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReservation6Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).CreateReservation6(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/CreateReservation6",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).CreateReservation6(ctx, req.(*CreateReservation6Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_DeleteReservation6_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReservation6Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).DeleteReservation6(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/DeleteReservation6",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).DeleteReservation6(ctx, req.(*DeleteReservation6Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_UpdateReservation6_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReservation6Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).UpdateReservation6(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/UpdateReservation6",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).UpdateReservation6(ctx, req.(*UpdateReservation6Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_CreateClientClass4_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClientClass4Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).CreateClientClass4(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/CreateClientClass4",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).CreateClientClass4(ctx, req.(*CreateClientClass4Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_DeleteClientClass4_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClientClass4Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).DeleteClientClass4(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/DeleteClientClass4",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).DeleteClientClass4(ctx, req.(*DeleteClientClass4Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_UpdateClientClass4_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClientClass4Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).UpdateClientClass4(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/UpdateClientClass4",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).UpdateClientClass4(ctx, req.(*UpdateClientClass4Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_UpdateGlobalConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGlobalConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).UpdateGlobalConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/UpdateGlobalConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).UpdateGlobalConfig(ctx, req.(*UpdateGlobalConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_GetSubnet4Leases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnet4LeasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).GetSubnet4Leases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/GetSubnet4Leases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).GetSubnet4Leases(ctx, req.(*GetSubnet4LeasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_GetPool4Leases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPool4LeasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).GetPool4Leases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/GetPool4Leases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).GetPool4Leases(ctx, req.(*GetPool4LeasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_GetReservation4Leases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReservation4LeasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).GetReservation4Leases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/GetReservation4Leases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).GetReservation4Leases(ctx, req.(*GetReservation4LeasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_GetSubnet4LeasesCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnet4LeasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).GetSubnet4LeasesCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/GetSubnet4LeasesCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).GetSubnet4LeasesCount(ctx, req.(*GetSubnet4LeasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_GetPool4LeasesCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPool4LeasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).GetPool4LeasesCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/GetPool4LeasesCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).GetPool4LeasesCount(ctx, req.(*GetPool4LeasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_GetReservation4LeasesCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReservation4LeasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).GetReservation4LeasesCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/GetReservation4LeasesCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).GetReservation4LeasesCount(ctx, req.(*GetReservation4LeasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPManager_GetSubnet6Leases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnet6LeasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPManagerServer).GetSubnet6Leases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DHCPManager/GetSubnet6Leases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPManagerServer).GetSubnet6Leases(ctx, req.(*GetSubnet6LeasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DHCPManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DHCPManager",
	HandlerType: (*DHCPManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSubnet4",
			Handler:    _DHCPManager_CreateSubnet4_Handler,
		},
		{
			MethodName: "DeleteSubnet4",
			Handler:    _DHCPManager_DeleteSubnet4_Handler,
		},
		{
			MethodName: "UpdateSubnet4",
			Handler:    _DHCPManager_UpdateSubnet4_Handler,
		},
		{
			MethodName: "CreateSubnet6",
			Handler:    _DHCPManager_CreateSubnet6_Handler,
		},
		{
			MethodName: "DeleteSubnet6",
			Handler:    _DHCPManager_DeleteSubnet6_Handler,
		},
		{
			MethodName: "UpdateSubnet6",
			Handler:    _DHCPManager_UpdateSubnet6_Handler,
		},
		{
			MethodName: "CreatePool4",
			Handler:    _DHCPManager_CreatePool4_Handler,
		},
		{
			MethodName: "DeletePool4",
			Handler:    _DHCPManager_DeletePool4_Handler,
		},
		{
			MethodName: "UpdatePool4",
			Handler:    _DHCPManager_UpdatePool4_Handler,
		},
		{
			MethodName: "CreatePool6",
			Handler:    _DHCPManager_CreatePool6_Handler,
		},
		{
			MethodName: "DeletePool6",
			Handler:    _DHCPManager_DeletePool6_Handler,
		},
		{
			MethodName: "UpdatePool6",
			Handler:    _DHCPManager_UpdatePool6_Handler,
		},
		{
			MethodName: "CreatePDPool",
			Handler:    _DHCPManager_CreatePDPool_Handler,
		},
		{
			MethodName: "DeletePDPool",
			Handler:    _DHCPManager_DeletePDPool_Handler,
		},
		{
			MethodName: "UpdatePDPool",
			Handler:    _DHCPManager_UpdatePDPool_Handler,
		},
		{
			MethodName: "CreateReservation4",
			Handler:    _DHCPManager_CreateReservation4_Handler,
		},
		{
			MethodName: "DeleteReservation4",
			Handler:    _DHCPManager_DeleteReservation4_Handler,
		},
		{
			MethodName: "UpdateReservation4",
			Handler:    _DHCPManager_UpdateReservation4_Handler,
		},
		{
			MethodName: "CreateReservation6",
			Handler:    _DHCPManager_CreateReservation6_Handler,
		},
		{
			MethodName: "DeleteReservation6",
			Handler:    _DHCPManager_DeleteReservation6_Handler,
		},
		{
			MethodName: "UpdateReservation6",
			Handler:    _DHCPManager_UpdateReservation6_Handler,
		},
		{
			MethodName: "CreateClientClass4",
			Handler:    _DHCPManager_CreateClientClass4_Handler,
		},
		{
			MethodName: "DeleteClientClass4",
			Handler:    _DHCPManager_DeleteClientClass4_Handler,
		},
		{
			MethodName: "UpdateClientClass4",
			Handler:    _DHCPManager_UpdateClientClass4_Handler,
		},
		{
			MethodName: "UpdateGlobalConfig",
			Handler:    _DHCPManager_UpdateGlobalConfig_Handler,
		},
		{
			MethodName: "GetSubnet4Leases",
			Handler:    _DHCPManager_GetSubnet4Leases_Handler,
		},
		{
			MethodName: "GetPool4Leases",
			Handler:    _DHCPManager_GetPool4Leases_Handler,
		},
		{
			MethodName: "GetReservation4Leases",
			Handler:    _DHCPManager_GetReservation4Leases_Handler,
		},
		{
			MethodName: "GetSubnet4LeasesCount",
			Handler:    _DHCPManager_GetSubnet4LeasesCount_Handler,
		},
		{
			MethodName: "GetPool4LeasesCount",
			Handler:    _DHCPManager_GetPool4LeasesCount_Handler,
		},
		{
			MethodName: "GetReservation4LeasesCount",
			Handler:    _DHCPManager_GetReservation4LeasesCount_Handler,
		},
		{
			MethodName: "GetSubnet6Leases",
			Handler:    _DHCPManager_GetSubnet6Leases_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dhcp.proto",
}

func init() { proto.RegisterFile("dhcp.proto", fileDescriptor_dhcp_7955f288d15089a5) }

var fileDescriptor_dhcp_7955f288d15089a5 = []byte{
	// 1451 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x58, 0xcb, 0x6e, 0xe4, 0x44,
	0x17, 0x8e, 0xdb, 0x7d, 0xf3, 0xe9, 0x24, 0x7f, 0xa6, 0x92, 0x99, 0xe9, 0x64, 0x2e, 0x7f, 0xc6,
	0xa3, 0x41, 0x19, 0x84, 0x06, 0x29, 0x44, 0xb5, 0x60, 0x01, 0x84, 0x04, 0x85, 0x81, 0x00, 0x91,
	0xe7, 0x82, 0x86, 0x8d, 0xe5, 0xb4, 0x6b, 0x12, 0x4b, 0x8e, 0x6d, 0x6c, 0xf7, 0xa4, 0x87, 0x87,
	0x60, 0x8d, 0xc4, 0x8a, 0x3d, 0xfb, 0x59, 0xb0, 0x62, 0xc1, 0x0b, 0xb0, 0x01, 0x89, 0x97, 0xe0,
	0x11, 0x90, 0xab, 0x6c, 0xb7, 0x2f, 0x55, 0x6d, 0x5b, 0xe9, 0x89, 0x18, 0x56, 0xdd, 0x55, 0x3e,
	0xf5, 0xf9, 0x7c, 0x5f, 0x9d, 0x2a, 0x9f, 0x73, 0x00, 0xcc, 0xd3, 0x91, 0xf7, 0xc0, 0xf3, 0xdd,
	0xd0, 0x45, 0x1d, 0xfa, 0xb3, 0x81, 0x4c, 0xd3, 0xd2, 0x7d, 0x12, 0x78, 0xae, 0x13, 0x10, 0xf6,
	0x48, 0xfd, 0xa3, 0x05, 0x6b, 0x7b, 0x3e, 0x31, 0x42, 0xf2, 0x68, 0x7c, 0xec, 0x90, 0x70, 0x47,
	0x23, 0xdf, 0x8e, 0x49, 0x10, 0xa2, 0x65, 0x68, 0x59, 0xe6, 0x50, 0xda, 0x94, 0xb6, 0x96, 0xb4,
	0x96, 0x65, 0xa2, 0x35, 0xe8, 0x58, 0x9e, 0x43, 0xc2, 0x61, 0x6b, 0x53, 0xda, 0x52, 0x34, 0x36,
	0x40, 0xf7, 0x60, 0xf9, 0x85, 0x61, 0x5b, 0xa6, 0x6e, 0x5b, 0xcf, 0x49, 0x68, 0x9d, 0x91, 0xa1,
	0x4c, 0x57, 0x2c, 0xd1, 0xd9, 0xc3, 0x78, 0x12, 0xbd, 0x03, 0xe8, 0xcc, 0x98, 0xe8, 0x05, 0xd3,
	0x36, 0x35, 0x5d, 0x39, 0x33, 0x26, 0x4f, 0x4b, 0xd6, 0x96, 0x53, 0xb4, 0xee, 0xc4, 0xd6, 0x96,
	0x93, 0xb7, 0xbe, 0x07, 0xcb, 0xa6, 0x7b, 0x66, 0x58, 0x8e, 0x1e, 0x10, 0xff, 0x05, 0xf1, 0x83,
	0x61, 0x77, 0x53, 0xde, 0x52, 0xb4, 0x25, 0x36, 0xfb, 0x88, 0x4d, 0xa2, 0x21, 0xf4, 0x7c, 0x77,
	0x1c, 0x46, 0xcf, 0x7b, 0xf4, 0x79, 0x32, 0x44, 0x77, 0x60, 0x71, 0x64, 0x5b, 0xc4, 0x09, 0xf5,
	0x91, 0x6d, 0x04, 0xc1, 0xb0, 0x4f, 0x09, 0x0e, 0xd8, 0xdc, 0x5e, 0x34, 0x85, 0xb6, 0xe1, 0xaa,
	0x4f, 0x6c, 0xe3, 0xa5, 0x6e, 0x9c, 0x44, 0x76, 0x86, 0x69, 0xfa, 0x24, 0x08, 0x48, 0x30, 0x54,
	0x28, 0xd4, 0x2a, 0x7d, 0xb8, 0x1b, 0x3d, 0xdb, 0x4d, 0x1e, 0xa9, 0x6f, 0xc1, 0xda, 0x3e, 0xb1,
	0x49, 0x95, 0xb0, 0xea, 0xaf, 0x2d, 0x58, 0x7b, 0xe2, 0x99, 0xd5, 0x3b, 0x50, 0xd6, 0xba, 0x55,
	0x5f, 0x6b, 0xb9, 0x91, 0xd6, 0xed, 0xda, 0x5a, 0x77, 0x2a, 0xb4, 0xee, 0xce, 0xd6, 0xba, 0xd7,
	0x40, 0xeb, 0xbe, 0x58, 0xeb, 0x57, 0x85, 0x28, 0xc6, 0x6f, 0x5c, 0x14, 0xff, 0x1f, 0x06, 0xa6,
	0x13, 0x14, 0x42, 0x18, 0x4c, 0x27, 0x48, 0x34, 0x7d, 0x4d, 0xca, 0x15, 0xa2, 0x54, 0x24, 0x9c,
	0xfa, 0x53, 0x21, 0x4a, 0xf1, 0xbf, 0x38, 0x4a, 0x0b, 0x5a, 0x76, 0x2a, 0xb5, 0xec, 0x36, 0xd0,
	0xb2, 0x27, 0xd6, 0xf2, 0x2f, 0x09, 0x10, 0x8b, 0xc2, 0x23, 0xd7, 0xb5, 0xd3, 0x73, 0x7c, 0x03,
	0x94, 0x80, 0x6a, 0xa6, 0xa7, 0x42, 0xf5, 0xd9, 0xc4, 0x43, 0x13, 0xdd, 0x85, 0xa5, 0x63, 0x72,
	0x62, 0x39, 0xc9, 0x1b, 0xe2, 0xc0, 0x5c, 0xa4, 0x93, 0x31, 0x74, 0x44, 0x88, 0x38, 0x66, 0x6a,
	0x22, 0x53, 0x13, 0x20, 0x8e, 0x99, 0x18, 0x94, 0xcf, 0x65, 0xbb, 0xe2, 0x5c, 0x76, 0x66, 0x9f,
	0xcb, 0xb2, 0x22, 0xea, 0x39, 0x20, 0x16, 0x29, 0x97, 0x4c, 0x8e, 0xca, 0xca, 0x42, 0xef, 0xbf,
	0x28, 0xeb, 0x2f, 0xb9, 0xa0, 0xc1, 0x97, 0xc8, 0xae, 0x70, 0x4c, 0xda, 0x95, 0xc7, 0xa4, 0x53,
	0x11, 0x14, 0x97, 0xe8, 0x3c, 0x95, 0x6d, 0x1a, 0x14, 0x6f, 0x9a, 0x6c, 0xaf, 0x24, 0x58, 0x67,
	0x9b, 0xae, 0x91, 0x08, 0xc8, 0x08, 0x2d, 0xd7, 0xa9, 0x17, 0xd9, 0xb7, 0x00, 0x4e, 0xcf, 0x0b,
	0x0c, 0x94, 0xd3, 0xf3, 0xc4, 0xbb, 0x5b, 0x00, 0x96, 0x57, 0xf0, 0x5e, 0xb1, 0xbc, 0x79, 0x45,
	0xb4, 0xfa, 0x35, 0xac, 0xb3, 0x0d, 0x9f, 0xb3, 0xe3, 0xea, 0x0f, 0x12, 0xac, 0xb3, 0x0d, 0x9d,
	0xb7, 0x24, 0x65, 0xce, 0x72, 0x05, 0xe7, 0x76, 0x9e, 0xf3, 0x8f, 0xbc, 0xdd, 0xc2, 0xf3, 0x70,
	0xed, 0x0e, 0x2c, 0x4e, 0x77, 0x8b, 0x24, 0x8e, 0x0d, 0xd2, 0xfd, 0x22, 0xd5, 0xe1, 0xc6, 0xdd,
	0x91, 0x79, 0x38, 0xa7, 0x4e, 0x38, 0x1b, 0x32, 0x17, 0xd6, 0x05, 0x4a, 0x72, 0x89, 0xd2, 0xef,
	0x12, 0xac, 0xc6, 0x77, 0xe2, 0x7e, 0x74, 0xbc, 0x6b, 0xbd, 0xf4, 0x1a, 0x74, 0x3d, 0x9f, 0x3c,
	0xb7, 0x26, 0xf1, 0x0b, 0xe3, 0x51, 0xe4, 0x0c, 0xfb, 0xa7, 0xdb, 0xc4, 0x89, 0x33, 0x0c, 0x85,
	0xcd, 0x1c, 0x12, 0x27, 0xba, 0x14, 0x4c, 0x62, 0x93, 0x13, 0x23, 0x24, 0x26, 0xb5, 0x60, 0x59,
	0xc5, 0x62, 0x3a, 0x19, 0x19, 0xcd, 0x21, 0xa3, 0x50, 0x3f, 0x83, 0xd5, 0xf8, 0xaa, 0xbc, 0x30,
	0x27, 0xf5, 0x7b, 0x09, 0x56, 0xe3, 0xdb, 0xef, 0xe2, 0x02, 0x55, 0x6d, 0x47, 0x89, 0x5c, 0xbb,
	0x4c, 0xee, 0x20, 0x39, 0x21, 0x7b, 0xd3, 0xc9, 0xf4, 0xf0, 0x22, 0x68, 0x3b, 0xc6, 0x19, 0xa1,
	0x0e, 0x29, 0x1a, 0xfd, 0x1f, 0x39, 0xe3, 0x93, 0x13, 0x32, 0xf1, 0x12, 0x67, 0xd8, 0x48, 0x7d,
	0x37, 0x89, 0xe6, 0x9a, 0x40, 0xd1, 0x9b, 0x99, 0x12, 0x17, 0x7d, 0xf3, 0x6f, 0xe9, 0x05, 0x74,
	0x60, 0xbb, 0xc7, 0x86, 0xbd, 0xe7, 0x3a, 0xcf, 0xad, 0x93, 0x04, 0xa9, 0x9c, 0xd6, 0x4a, 0xf5,
	0xd3, 0xda, 0x56, 0xa3, 0xb4, 0x56, 0xae, 0x5d, 0x7c, 0xf1, 0xee, 0x6e, 0xf5, 0x3e, 0x5c, 0x3f,
	0x20, 0x61, 0x5c, 0x4b, 0x1e, 0x12, 0x23, 0x20, 0x81, 0x28, 0xa9, 0xff, 0x0e, 0xae, 0x1e, 0x90,
	0x90, 0x66, 0x55, 0x79, 0xc3, 0x4b, 0xf8, 0x80, 0x7f, 0x03, 0x37, 0x0f, 0x48, 0x98, 0xbd, 0xeb,
	0x1b, 0xb8, 0x50, 0x71, 0x73, 0xfd, 0x2d, 0x01, 0xec, 0x7f, 0xba, 0x77, 0x44, 0x11, 0x77, 0xa2,
	0x9b, 0x3d, 0x31, 0x65, 0x81, 0x90, 0x0c, 0xf3, 0x2f, 0x69, 0xcd, 0x7c, 0x89, 0x5c, 0xbc, 0xc5,
	0x6e, 0x80, 0x12, 0x9f, 0x0a, 0xcb, 0x8c, 0x8f, 0x44, 0x9f, 0x4d, 0x3c, 0xe4, 0x55, 0x41, 0x1d,
	0x5e, 0xb8, 0x5c, 0x83, 0x2e, 0x99, 0x78, 0x96, 0x4f, 0xe8, 0x85, 0x21, 0x6b, 0xf1, 0x28, 0x2a,
	0x53, 0x83, 0xd0, 0x08, 0x09, 0xad, 0xf2, 0x96, 0x34, 0x36, 0x40, 0x1b, 0xd0, 0x3f, 0x75, 0x83,
	0x90, 0x46, 0x34, 0x6b, 0x52, 0xa4, 0x63, 0xf5, 0x19, 0xa0, 0x03, 0x12, 0x32, 0x09, 0x77, 0xb4,
	0xb8, 0xc7, 0x13, 0x31, 0x0f, 0xc6, 0xa3, 0x11, 0x21, 0x4c, 0xc2, 0xbe, 0x96, 0x0c, 0xd1, 0x7d,
	0xe8, 0xda, 0xd4, 0x78, 0xd8, 0xda, 0x94, 0xb7, 0x06, 0xdb, 0x57, 0x58, 0x3f, 0xe8, 0xc1, 0x54,
	0x36, 0x2d, 0x36, 0x50, 0x9f, 0xd2, 0x80, 0x8a, 0xa1, 0xf7, 0xdc, 0xb1, 0x13, 0xd6, 0xc0, 0xbf,
	0x03, 0x8b, 0x6c, 0xb9, 0x3e, 0x8a, 0x56, 0x50, 0x71, 0xdb, 0xda, 0x80, 0xcd, 0x51, 0x90, 0x5c,
	0xa0, 0xe2, 0xd9, 0x81, 0xfa, 0xb3, 0x9c, 0xd9, 0x50, 0xfc, 0x9a, 0x36, 0xf4, 0x3a, 0xf4, 0x4e,
	0xcf, 0xf5, 0xf0, 0xa5, 0x97, 0x54, 0x96, 0xdd, 0xd3, 0xf3, 0xc7, 0x2f, 0x3d, 0x82, 0xde, 0x86,
	0x2b, 0xd3, 0x75, 0x7a, 0xe0, 0x8e, 0xfd, 0x51, 0xb2, 0x9f, 0xff, 0x4b, 0x97, 0x3f, 0xa2, 0xd3,
	0xd1, 0x8d, 0x63, 0x8e, 0x2d, 0x33, 0xfe, 0x00, 0xd0, 0xff, 0x9c, 0x60, 0xe8, 0xcd, 0x0e, 0x86,
	0x7e, 0x2e, 0x18, 0xf2, 0x1f, 0x30, 0xa5, 0xf8, 0x01, 0x7b, 0x1f, 0x80, 0xaa, 0xca, 0x3c, 0x87,
	0x4d, 0x69, 0x6b, 0x79, 0xfb, 0x46, 0x71, 0x37, 0xf1, 0x03, 0xfa, 0x13, 0xd1, 0xd1, 0x14, 0x3b,
	0xf9, 0x3b, 0x8d, 0xb3, 0x41, 0x26, 0xce, 0xd4, 0x0f, 0x41, 0x49, 0xad, 0xd1, 0x00, 0x7a, 0x8f,
	0x9f, 0x1d, 0x7d, 0xa2, 0x7f, 0xb9, 0xbb, 0xb2, 0x90, 0x0e, 0x1e, 0xef, 0xae, 0x48, 0xe9, 0xe0,
	0x68, 0x7f, 0xa5, 0x95, 0x0e, 0x9e, 0xee, 0xac, 0xc8, 0xb9, 0x60, 0xc4, 0xf3, 0x08, 0x46, 0x9c,
	0x04, 0xe3, 0xf6, 0x9f, 0x08, 0x06, 0xd1, 0xf4, 0x17, 0x86, 0x63, 0x9c, 0x10, 0x1f, 0x7d, 0x0c,
	0x4b, 0xb9, 0xf6, 0x25, 0x4a, 0xa8, 0xf3, 0x9a, 0x9a, 0x1b, 0x28, 0x01, 0xde, 0x7f, 0x98, 0xb8,
	0xa5, 0x2e, 0x44, 0x18, 0xb9, 0x4e, 0x5d, 0x8a, 0xc1, 0xeb, 0xdf, 0x89, 0x31, 0x72, 0x4d, 0xbc,
	0x14, 0x83, 0xd7, 0xda, 0x13, 0x63, 0xe4, 0x9a, 0x58, 0x5c, 0x2e, 0xb8, 0x11, 0x17, 0xcc, 0xe5,
	0x82, 0x1b, 0x71, 0xc1, 0x5c, 0x2e, 0x15, 0x18, 0x1f, 0xc0, 0x20, 0xd3, 0x0a, 0x41, 0xeb, 0x39,
	0x26, 0xd9, 0x3a, 0x5e, 0xbc, 0x3e, 0xd3, 0x6d, 0x48, 0xd7, 0x97, 0x3b, 0x10, 0xe2, 0xf5, 0x99,
	0x9e, 0x41, 0xba, 0xbe, 0xdc, 0x47, 0xa8, 0xe3, 0x3f, 0xe6, 0xf8, 0x8f, 0x1b, 0xf8, 0x8f, 0x39,
	0xfe, 0xe3, 0x06, 0xfe, 0x63, 0x8e, 0xff, 0x15, 0xeb, 0x3f, 0x82, 0xc5, 0x6c, 0x06, 0x8d, 0x36,
	0xf2, 0x04, 0xb2, 0x59, 0xa3, 0x18, 0x21, 0x9b, 0xaf, 0xa6, 0x08, 0x9c, 0x24, 0x56, 0x8c, 0x90,
	0x4d, 0x52, 0x53, 0x04, 0x4e, 0xe6, 0x2a, 0x40, 0x38, 0x4c, 0x7a, 0x23, 0xd9, 0x3c, 0x01, 0x6d,
	0xe6, 0xb8, 0x70, 0xca, 0x45, 0x31, 0x5a, 0xb9, 0x76, 0x4d, 0xd1, 0x84, 0x65, 0xad, 0x18, 0xad,
	0x5c, 0xaf, 0xa6, 0x68, 0xc2, 0x52, 0xb6, 0x01, 0x53, 0x2c, 0x66, 0x8a, 0x9b, 0x33, 0xc5, 0x62,
	0xa6, 0xb8, 0x39, 0x53, 0x2c, 0x66, 0x8a, 0x6b, 0x32, 0xcd, 0x26, 0xec, 0x05, 0xa6, 0x9c, 0x5c,
	0xbe, 0x8a, 0x29, 0x17, 0x4d, 0x58, 0x4a, 0x54, 0x31, 0xe5, 0xa2, 0x09, 0xeb, 0x8c, 0x2a, 0xb4,
	0x6c, 0x41, 0x51, 0x40, 0xe3, 0xd4, 0x1a, 0x02, 0xb4, 0xaf, 0x60, 0xa5, 0x98, 0xd7, 0xa3, 0xdb,
	0xb1, 0xa5, 0x20, 0xe1, 0xdf, 0x58, 0x9f, 0x3e, 0x2f, 0xa4, 0x86, 0xea, 0x02, 0xfa, 0x1c, 0x96,
	0xf3, 0xd9, 0x3f, 0xba, 0x39, 0x35, 0x2f, 0x17, 0x05, 0xb3, 0xc1, 0x9e, 0xd1, 0x52, 0xa2, 0x9c,
	0xce, 0xa3, 0xbb, 0xd3, 0x55, 0xc2, 0x64, 0xbf, 0x0e, 0x74, 0x8e, 0x1f, 0x4d, 0x20, 0x2b, 0xd9,
	0xdf, 0x2e, 0xa1, 0xe6, 0xb2, 0x57, 0x75, 0x01, 0x3d, 0x81, 0xd5, 0x3c, 0x57, 0x06, 0x3c, 0x5b,
	0x87, 0x6a, 0xd8, 0x11, 0x6c, 0x70, 0xe9, 0x32, 0xf4, 0x5a, 0x8a, 0x54, 0xbf, 0x24, 0x1b, 0x0f,
	0x58, 0x14, 0x0f, 0xb8, 0x42, 0x67, 0x3c, 0x05, 0x3c, 0xee, 0xd2, 0x67, 0xef, 0xfd, 0x13, 0x00,
	0x00, 0xff, 0xff, 0xaa, 0x34, 0x86, 0xe3, 0x3a, 0x1e, 0x00, 0x00,
}
